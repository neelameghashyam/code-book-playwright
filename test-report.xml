<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\business\business.component.spec.ts">
    <testCase name="BusinessComponent should create the component" duration="1822"/>
    <testCase name="BusinessComponent Initial State should initialize business signal with empty values" duration="302"/>
    <testCase name="BusinessComponent Initial State should initialize categories and subCategories" duration="344"/>
    <testCase name="BusinessComponent Initial State should initialize isPublished as false" duration="302"/>
    <testCase name="BusinessComponent Initial State should initialize isEditing with all steps as false" duration="403"/>
    <testCase name="BusinessComponent Template Rendering should render the header with title and Create New Business button" duration="465"/>
    <testCase name="BusinessComponent Template Rendering should render the stepper with three steps" duration="334"/>
    <testCase name="BusinessComponent Template Rendering should render step 1 form when not published" duration="426"/>
    <testCase name="BusinessComponent Template Rendering should render published view when isPublished is true" duration="372"/>
    <testCase name="BusinessComponent Template Rendering should show success message when published" duration="390"/>
    <testCase name="BusinessComponent Form Validation should validate step 1 as invalid when name or country is empty" duration="302"/>
    <testCase name="BusinessComponent Form Validation should validate step 2 as invalid when category or subCategory is empty" duration="261"/>
    <testCase name="BusinessComponent Form Validation should validate step 3 as invalid when phone is empty" duration="422"/>
    <testCase name="BusinessComponent Form Validation should show validation errors for step 1 when fields are touched and invalid" duration="436"/>
    <testCase name="BusinessComponent Stepper Navigation should disable Next button in step 1 when form is invalid" duration="379"/>
    <testCase name="BusinessComponent Stepper Navigation should enable Next button in step 1 when form is valid" duration="345"/>
    <testCase name="BusinessComponent Stepper Navigation should navigate to step 2 when Next is clicked" duration="517"/>
    <testCase name="BusinessComponent Stepper Navigation should navigate back to step 1 from step 2" duration="348"/>
    <testCase name="BusinessComponent Publishing Business should call addBusiness and set isPublished to true on publish" duration="362"/>
    <testCase name="BusinessComponent Publishing Business should not publish if confirm is cancelled" duration="350"/>
    <testCase name="BusinessComponent Editing Business should toggle edit mode for step 1" duration="352"/>
    <testCase name="BusinessComponent Editing Business should render edit form for step 1" duration="556"/>
    <testCase name="BusinessComponent Editing Business should call updateBusiness on save" duration="460"/>
    <testCase name="BusinessComponent Editing Business should cancel edit mode without saving" duration="392"/>
    <testCase name="BusinessComponent Reset Form should reset the form and signals" duration="299"/>
    <testCase name="BusinessComponent Responsive Behavior should set stepper orientation to vertical on mobile" duration="695"/>
    <testCase name="BusinessComponent Responsive Behavior should set stepper orientation to horizontal on desktop" duration="355"/>
    <testCase name="BusinessComponent Dark Mode should apply dark-theme class when dark mode is enabled" duration="358"/>
    <testCase name="BusinessComponent Dark Mode should not apply dark-theme class when dark mode is disabled" duration="415"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\categories.component.spec.ts">
    <testCase name="CategoriesComponent should create the component" duration="2155"/>
    <testCase name="CategoriesComponent should initialize in ngOnInit and set up subscriptions" duration="1851"/>
    <testCase name="CategoriesComponent should unsubscribe in ngOnDestroy" duration="315"/>
    <testCase name="CategoriesComponent should not throw error if breakpointSubscription is undefined in ngOnDestroy" duration="307"/>
    <testCase name="CategoriesComponent should update displayed columns for mobile" duration="261"/>
    <testCase name="CategoriesComponent should update displayed columns for tablet" duration="359"/>
    <testCase name="CategoriesComponent should update displayed columns for desktop" duration="446"/>
    <testCase name="CategoriesComponent should refresh table" duration="367"/>
    <testCase name="CategoriesComponent should handle refresh table when search input is not found" duration="574"/>
    <testCase name="CategoriesComponent should handle search query change" duration="331"/>
    <testCase name="CategoriesComponent should handle page change" duration="318"/>
    <testCase name="CategoriesComponent should sort column" duration="343"/>
    <testCase name="CategoriesComponent should toggle category selection" duration="337"/>
    <testCase name="CategoriesComponent should check if category is selected" duration="282"/>
    <testCase name="CategoriesComponent should toggle all categories" duration="327"/>
    <testCase name="CategoriesComponent should check if all categories are selected" duration="341"/>
    <testCase name="CategoriesComponent should delete selected categories" duration="280"/>
    <testCase name="CategoriesComponent should get page numbers for pagination" duration="317"/>
    <testCase name="CategoriesComponent should handle pagination with single page" duration="288"/>
    <testCase name="CategoriesComponent should handle pagination with no pages" duration="329"/>
    <testCase name="CategoriesComponent should track categories by id" duration="448"/>
    <testCase name="CategoriesComponent should handle trackById with null category" duration="313"/>
    <testCase name="CategoriesComponent should display error message when service.error is truthy" duration="318"/>
    <testCase name="CategoriesComponent should display loading spinner when service.isLoading is true" duration="495"/>
    <testCase name="CategoriesComponent should apply dark-theme class when darkModeService.isDarkMode is true" duration="338"/>
    <testCase name="CategoriesComponent should handle search input change" duration="290"/>
    <testCase name="CategoriesComponent should display no pages message when no pages are available" duration="319"/>
    <testCase name="CategoriesComponent should handle empty category list" duration="221"/>
    <testCase name="CategoriesComponent should handle sort direction toggle" duration="272"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\mat-components\mat-components.store.spec.ts">
    <testCase name="UserStore should be created" duration="502"/>
    <testCase name="UserStore initial state should initialize with default state" duration="134"/>
    <testCase name="UserStore loadUsers should load users from localStorage if available" duration="32"/>
    <testCase name="UserStore loadUsers should load users from API if localStorage is empty" duration="42"/>
    <testCase name="UserStore loadUsers should handle API error" duration="185"/>
    <testCase name="UserStore addUser should add a new user" duration="48"/>
    <testCase name="UserStore addUser should handle error when adding user" duration="123"/>
    <testCase name="UserStore addUser should handle null/undefined fields when adding user" duration="60"/>
    <testCase name="UserStore updateUser should update an existing user" duration="62"/>
    <testCase name="UserStore updateUser should handle error when updating user" duration="34"/>
    <testCase name="UserStore updateUser should handle null/undefined fields when updating user" duration="37"/>
    <testCase name="UserStore deleteUser should delete a user" duration="50"/>
    <testCase name="UserStore deleteUser should handle error when deleting user" duration="30"/>
    <testCase name="UserStore Computed Signals should filter users based on search query" duration="21"/>
    <testCase name="UserStore Computed Signals should sort users by firstName" duration="111"/>
    <testCase name="UserStore Computed Signals should sort users by createdDate" duration="48"/>
    <testCase name="UserStore Computed Signals should compute unique first names" duration="59"/>
    <testCase name="UserStore Computed Signals should compute unique emails" duration="64"/>
    <testCase name="UserStore Computed Signals should compute total records" duration="18"/>
    <testCase name="UserStore Computed Signals should compute total pages" duration="25"/>
    <testCase name="UserStore Computed Signals should compute paginated users" duration="20"/>
    <testCase name="UserStore Pagination and Sorting Methods should set page" duration="40"/>
    <testCase name="UserStore Pagination and Sorting Methods should set page size and reset current page" duration="21"/>
    <testCase name="UserStore Pagination and Sorting Methods should set search query and reset current page" duration="18"/>
    <testCase name="UserStore Pagination and Sorting Methods should sort users and reset current page" duration="21"/>
    <testCase name="UserStore Edge Cases should handle empty user list in computed signals" duration="22"/>
    <testCase name="UserStore Edge Cases should handle invalid sort field" duration="26"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\app.config.spec.ts">
    <testCase name="AppConfig HttpLoaderFactory should return a TranslateHttpLoader instance" duration="9"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\main-dashboard-2\main-dashboard-2.component.spec.ts">
    <testCase name="MainDashboard2Component should create" duration="1897"/>
    <testCase name="MainDashboard2Component should initialize with correct title" duration="640"/>
    <testCase name="MainDashboard2Component should initialize collapsed signal as false" duration="777"/>
    <testCase name="MainDashboard2Component should initialize currentLanguage signal as English" duration="875"/>
    <testCase name="MainDashboard2Component should add languages in constructor" duration="653"/>
    <testCase name="MainDashboard2Component should set up language in ngOnInit with stored language (en)" duration="671"/>
    <testCase name="MainDashboard2Component should set up language in ngOnInit with stored language (fr)" duration="874"/>
    <testCase name="MainDashboard2Component should set up language in ngOnInit with no stored language" duration="954"/>
    <testCase name="MainDashboard2Component should change language to French" duration="683"/>
    <testCase name="MainDashboard2Component should change language to English" duration="704"/>
    <testCase name="MainDashboard2Component should return correct theme aria label" duration="687"/>
    <testCase name="MainDashboard2Component should return correct color theme aria label" duration="676"/>
    <testCase name="MainDashboard2Component should toggle fullscreen when not in fullscreen" duration="679"/>
    <testCase name="MainDashboard2Component should exit fullscreen when in fullscreen" duration="731"/>
    <testCase name="MainDashboard2Component should handle fullscreen error" duration="1005"/>
    <testCase name="MainDashboard2Component should compute sidenavWidth for mobile" duration="598"/>
    <testCase name="MainDashboard2Component should compute sidenavWidth for non-mobile collapsed" duration="626"/>
    <testCase name="MainDashboard2Component should compute sidenavWidth for non-mobile non-collapsed" duration="607"/>
    <testCase name="MainDashboard2Component should compute sidenavMode for mobile" duration="633"/>
    <testCase name="MainDashboard2Component should compute sidenavMode for non-mobile" duration="664"/>
    <testCase name="MainDashboard2Component should compute sidenavOpened for mobile and collapsed" duration="565"/>
    <testCase name="MainDashboard2Component should compute sidenavOpened for mobile and non-collapsed" duration="533"/>
    <testCase name="MainDashboard2Component should compute sidenavOpened for non-mobile" duration="524"/>
    <testCase name="MainDashboard2Component should toggle sidenav collapsed state" duration="808"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\main-dashboard\main-dashboard.component.spec.ts">
    <testCase name="MainDashboardComponent should create" duration="1645"/>
    <testCase name="MainDashboardComponent should initialize with correct title" duration="253"/>
    <testCase name="MainDashboardComponent should initialize with default language from localStorage (en)" duration="954"/>
    <testCase name="MainDashboardComponent should initialize with French language from localStorage" duration="1016"/>
    <testCase name="MainDashboardComponent should initialize with default language when localStorage is empty" duration="992"/>
    <testCase name="MainDashboardComponent should change language to French" duration="685"/>
    <testCase name="MainDashboardComponent should change language to English" duration="823"/>
    <testCase name="MainDashboardComponent should toggle sidenav" duration="672"/>
    <testCase name="MainDashboardComponent should close sidenav" duration="812"/>
    <testCase name="MainDashboardComponent should compute sidenav width for desktop when not collapsed" duration="650"/>
    <testCase name="MainDashboardComponent should compute sidenav width for desktop when collapsed" duration="656"/>
    <testCase name="MainDashboardComponent should compute sidenav width for mobile" duration="646"/>
    <testCase name="MainDashboardComponent should compute sidenav mode for mobile" duration="576"/>
    <testCase name="MainDashboardComponent should compute sidenav mode for desktop" duration="566"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for mobile when not collapsed" duration="699"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for mobile when collapsed" duration="631"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for desktop when collapsed" duration="544"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for desktop when not collapsed" duration="482"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for light theme" duration="365"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for dark theme" duration="267"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for system theme" duration="250"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for unknown theme" duration="253"/>
    <testCase name="MainDashboardComponent should return correct color theme aria label for Deep-Blue" duration="288"/>
    <testCase name="MainDashboardComponent should return correct color theme aria label for Green" duration="213"/>
    <testCase name="MainDashboardComponent should toggle fullscreen mode when not in fullscreen" duration="924"/>
    <testCase name="MainDashboardComponent should exit fullscreen mode when in fullscreen" duration="507"/>
    <testCase name="MainDashboardComponent should handle fullscreen error" duration="702"/>
    <testCase name="MainDashboardComponent should not attempt to exit fullscreen if exitFullscreen is not available" duration="461"/>
    <testCase name="MainDashboardComponent should handle invalid language code" duration="847"/>
    <testCase name="MainDashboardComponent should initialize services in constructor" duration="333"/>
    <testCase name="MainDashboardComponent should handle null responsiveService in error cases" duration="570"/>
    <testCase name="MainDashboardComponent should initialize sidenav" duration="838"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\subcategories.component.spec.ts">
    <testCase name="SubcategoriesComponent should create the component" duration="2001"/>
    <testCase name="SubcategoriesComponent should initialize in ngOnInit and set up subscriptions" duration="836"/>
    <testCase name="SubcategoriesComponent should unsubscribe in ngOnDestroy" duration="605"/>
    <testCase name="SubcategoriesComponent should not unsubscribe in ngOnDestroy if subscription is undefined" duration="451"/>
    <testCase name="SubcategoriesComponent should update displayed columns for mobile" duration="499"/>
    <testCase name="SubcategoriesComponent should update displayed columns for tablet" duration="447"/>
    <testCase name="SubcategoriesComponent should update displayed columns for desktop" duration="703"/>
    <testCase name="SubcategoriesComponent should handle category change" duration="506"/>
    <testCase name="SubcategoriesComponent should handle null category change" duration="646"/>
    <testCase name="SubcategoriesComponent should refresh table" duration="535"/>
    <testCase name="SubcategoriesComponent should warn when opening add dialog with no category selected" duration="488"/>
    <testCase name="SubcategoriesComponent should warn when selected category is not found" duration="471"/>
    <testCase name="SubcategoriesComponent should handle search query change" duration="506"/>
    <testCase name="SubcategoriesComponent should delete a subcategory by id" duration="474"/>
    <testCase name="SubcategoriesComponent should handle page change" duration="444"/>
    <testCase name="SubcategoriesComponent should sort column" duration="561"/>
    <testCase name="SubcategoriesComponent should toggle subcategory selection" duration="619"/>
    <testCase name="SubcategoriesComponent should check if subcategory is selected" duration="498"/>
    <testCase name="SubcategoriesComponent should toggle all subcategories" duration="507"/>
    <testCase name="SubcategoriesComponent should check if all subcategories are selected" duration="523"/>
    <testCase name="SubcategoriesComponent should delete selected subcategories" duration="386"/>
    <testCase name="SubcategoriesComponent should get page numbers for pagination" duration="442"/>
    <testCase name="SubcategoriesComponent should track subcategories by id" duration="377"/>
    <testCase name="SubcategoriesComponent should display loading spinner when service.isLoading is true" duration="450"/>
    <testCase name="SubcategoriesComponent should apply dark-theme class when darkModeService.isDarkMode is true" duration="558"/>
    <testCase name="SubcategoriesComponent should handle search input change" duration="588"/>
    <testCase name="SubcategoriesComponent should handle delete selected button click" duration="717"/>
    <testCase name="SubcategoriesComponent should disable delete button when no subcategories are selected" duration="381"/>
    <testCase name="SubcategoriesComponent should handle previous page button" duration="428"/>
    <testCase name="SubcategoriesComponent should disable previous page button on first page" duration="788"/>
    <testCase name="SubcategoriesComponent should handle next page button" duration="517"/>
    <testCase name="SubcategoriesComponent should disable next page button on last page" duration="633"/>
    <testCase name="SubcategoriesComponent should handle page number button click" duration="608"/>
    <testCase name="SubcategoriesComponent should handle mobile page select" duration="698"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\login\login\login.component.spec.ts">
    <testCase name="LoginComponent should create the component" duration="1558"/>
    <testCase name="LoginComponent should initialize the form with correct controls" duration="624"/>
    <testCase name="LoginComponent should set validators correctly in login mode" duration="437"/>
    <testCase name="LoginComponent should set validators correctly in signup mode" duration="1030"/>
    <testCase name="LoginComponent should toggle to signup mode when handleSignup is called in login mode" duration="408"/>
    <testCase name="LoginComponent should toggle to login mode when handleLogin is called in signup mode" duration="523"/>
    <testCase name="LoginComponent should validate email field as required and valid email" duration="471"/>
    <testCase name="LoginComponent should validate password field as required and minimum length" duration="404"/>
    <testCase name="LoginComponent should validate password match in signup mode" duration="582"/>
    <testCase name="LoginComponent should validate name field as required in signup mode" duration="584"/>
    <testCase name="LoginComponent should validate agreeTerms as required in signup mode" duration="736"/>
    <testCase name="LoginComponent should toggle password visibility" duration="384"/>
    <testCase name="LoginComponent should toggle confirm password visibility" duration="561"/>
    <testCase name="LoginComponent should call authService.login and navigate on successful login via handleLogin" duration="404"/>
    <testCase name="LoginComponent should toggle to login mode if isSignupMode is true in handleLogin" duration="469"/>
    <testCase name="LoginComponent should toggle to login mode if form is invalid in handleLogin" duration="391"/>
    <testCase name="LoginComponent should toggle to login mode if isLoading is true in handleLogin" duration="371"/>
    <testCase name="LoginComponent should call authService.signup and navigate on successful signup via handleSignup" duration="499"/>
    <testCase name="LoginComponent should reset form on failed signup via handleSignup" duration="462"/>
    <testCase name="LoginComponent should toggle to signup mode if not in signup mode in handleSignup" duration="369"/>
    <testCase name="LoginComponent should toggle to signup mode if form is invalid in handleSignup" duration="429"/>
    <testCase name="LoginComponent should toggle to signup mode if isLoading is true in handleSignup" duration="557"/>
    <testCase name="LoginComponent should call onLogin and navigate on successful login" duration="339"/>
    <testCase name="LoginComponent should not call onLogin if form is invalid" duration="396"/>
    <testCase name="LoginComponent should call onSignup and navigate on successful signup" duration="429"/>
    <testCase name="LoginComponent should not call onSignup if form is invalid" duration="301"/>
    <testCase name="LoginComponent should call login when clicking login button with valid form" duration="406"/>
    <testCase name="LoginComponent should call signup when clicking signup button with valid form" duration="639"/>
    <testCase name="LoginComponent should toggle to login mode when clicking login button in signup mode" duration="422"/>
    <testCase name="LoginComponent should toggle to signup mode when clicking signup button in login mode" duration="532"/>
    <testCase name="LoginComponent should not call login if form is invalid when clicking login button" duration="517"/>
    <testCase name="LoginComponent should not call signup if form is invalid when clicking signup button" duration="1122"/>
    <testCase name="LoginComponent should not call login if isLoading is true when clicking login button" duration="480"/>
    <testCase name="LoginComponent should not call signup if isLoading is true when clicking signup button" duration="491"/>
    <testCase name="LoginComponent should display error message when error exists" duration="370"/>
    <testCase name="LoginComponent should show loading state on login button when isLoading is true" duration="615"/>
    <testCase name="LoginComponent should show loading state on signup button when isLoading is true" duration="652"/>
    <testCase name="LoginComponent should render social login buttons" duration="635"/>
    <testCase name="LoginComponent should show name and confirm password fields in signup mode" duration="762"/>
    <testCase name="LoginComponent should not show name and confirm password fields in login mode" duration="482"/>
    <testCase name="LoginComponent should show remember me and forgot password in login mode" duration="500"/>
    <testCase name="LoginComponent should show agree terms checkbox in signup mode" duration="674"/>
    <testCase name="LoginComponent should update responsive breakpoints for all breakpoints" duration="562"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\app.routes.spec.ts">
    <testCase name="App Routes should define routes with correct configurations" duration="216"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\mat-components\user-dialog.component.spec.ts">
    <testCase name="UserDialogComponent should create the component" duration="2450"/>
    <testCase name="UserDialogComponent Initial State should initialize user with empty values for add dialog" duration="702"/>
    <testCase name="UserDialogComponent Initial State should initialize user with provided data for edit dialog" duration="837"/>
    <testCase name="UserDialogComponent Template Rendering should render dialog title as Add User for new user" duration="473"/>
    <testCase name="UserDialogComponent Template Rendering should render dialog title as Edit User for existing user" duration="959"/>
    <testCase name="UserDialogComponent Template Rendering should render form fields" duration="368"/>
    <testCase name="UserDialogComponent Template Rendering should render Cancel and Save buttons" duration="579"/>
    <testCase name="UserDialogComponent Form Validation should disable Save button when form is invalid" duration="490"/>
    <testCase name="UserDialogComponent Form Validation should enable Save button when form is valid" duration="491"/>
    <testCase name="UserDialogComponent Form Validation should show error messages for empty fields" duration="452"/>
    <testCase name="UserDialogComponent User Actions should close dialog with user data on save" duration="489"/>
    <testCase name="UserDialogComponent User Actions should close dialog without data on cancel" duration="357"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\dashboard\dashboard.component.spec.ts">
    <testCase name="DashboardComponent should create" duration="952"/>
    <testCase name="DashboardComponent should initialize form and countries" duration="398"/>
    <testCase name="DashboardComponent should set language from localStorage on init" duration="226"/>
    <testCase name="DashboardComponent should set default language to en if no lang in localStorage" duration="197"/>
    <testCase name="DashboardComponent should update responsiveClass based on breakpoint" duration="271"/>
    <testCase name="DashboardComponent should load service providers from localStorage" duration="233"/>
    <testCase name="DashboardComponent should handle null service providers in localStorage" duration="268"/>
    <testCase name="DashboardComponent should handle localStorage error in loadFromLocalStorage" duration="205"/>
    <testCase name="DashboardComponent should create service provider form group" duration="311"/>
    <testCase name="DashboardComponent should delete service provider" duration="254"/>
    <testCase name="DashboardComponent should handle error in deleteServiceProvider" duration="294"/>
    <testCase name="DashboardComponent should submit valid form" duration="298"/>
    <testCase name="DashboardComponent should handle invalid form submission" duration="260"/>
    <testCase name="DashboardComponent should handle specific form validation errors" duration="257"/>
    <testCase name="DashboardComponent should handle localStorage error in onSubmit" duration="240"/>
    <testCase name="DashboardComponent should enable edit mode" duration="252"/>
    <testCase name="DashboardComponent should cancel form" duration="279"/>
    <testCase name="DashboardComponent should save to localStorage" duration="208"/>
    <testCase name="DashboardComponent should handle error in saveToLocalStorage" duration="270"/>
    <testCase name="DashboardComponent should track by provider id" duration="217"/>
    <testCase name="DashboardComponent should get serviceProvidersArray" duration="302"/>
    <testCase name="DashboardComponent should handle empty service providers in loadFromLocalStorage" duration="288"/>
    <testCase name="DashboardComponent should handle duplicate service providers in loadFromLocalStorage" duration="283"/>
    <testCase name="DashboardComponent should handle invalid JSON in loadFromLocalStorage" duration="188"/>
    <testCase name="DashboardComponent should handle null provider in createServiceProviderFormGroup" duration="206"/>
    <testCase name="DashboardComponent should handle missing businessForm in loadFromLocalStorage" duration="199"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\users\users.component.spec.ts">
    <testCase name="UsersComponent should create the component" duration="1616"/>
    <testCase name="UsersComponent should initialize dataSource and set up effect in constructor" duration="794"/>
    <testCase name="UsersComponent should handle error in effect when store.error is set" duration="606"/>
    <testCase name="UsersComponent should log warning when paginator is not initialized in effect" duration="489"/>
    <testCase name="UsersComponent should set paginator when initialized in effect" duration="646"/>
    <testCase name="UsersComponent should call loadUsers and set filterPredicate in ngOnInit" duration="212"/>
    <testCase name="UsersComponent should log message in ngOnDestroy" duration="211"/>
    <testCase name="UsersComponent should call deleteUser in store when deleteUser is called" duration="261"/>
    <testCase name="UsersComponent should open dialog with correct config in openPopup" duration="223"/>
    <testCase name="UsersComponent should apply filter and reset paginator when applyFilter is called" duration="500"/>
    <testCase name="UsersComponent should not call firstPage when paginator is not set in applyFilter" duration="424"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\add-subcategories\add-subcategories.component.spec.ts">
    <testCase name="AddSubcategoriesComponent should create the component" duration="912"/>
    <testCase name="AddSubcategoriesComponent should initialize the form with required fields" duration="558"/>
    <testCase name="AddSubcategoriesComponent should not close dialog when form is invalid in saveSubcategory" duration="514"/>
    <testCase name="AddSubcategoriesComponent should close dialog with form value when form is valid" duration="464"/>
    <testCase name="AddSubcategoriesComponent should mark all controls as touched when form is invalid" duration="628"/>
    <testCase name="AddSubcategoriesComponent should close dialog when cancel is called" duration="598"/>
    <testCase name="AddSubcategoriesComponent should trigger saveSubcategory on form submission" duration="480"/>
    <testCase name="AddSubcategoriesComponent should disable save button when form is invalid" duration="463"/>
    <testCase name="AddSubcategoriesComponent should enable save button when form is valid" duration="767"/>
    <testCase name="AddSubcategoriesComponent should show validation errors for required fields when form is submitted" duration="601"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\dashboard\service-provider\service-provider.component.spec.ts">
    <testCase name="ServiceProviderComponent should create" duration="1034"/>
    <testCase name="ServiceProviderComponent should initialize form and countries" duration="346"/>
    <testCase name="ServiceProviderComponent should patch form with provider data" duration="470"/>
    <testCase name="ServiceProviderComponent should set language from localStorage on init" duration="378"/>
    <testCase name="ServiceProviderComponent should set default language to en if no lang in localStorage" duration="235"/>
    <testCase name="ServiceProviderComponent should update responsiveClass based on breakpoint" duration="397"/>
    <testCase name="ServiceProviderComponent should save valid new provider" duration="329"/>
    <testCase name="ServiceProviderComponent should save valid new provider with generated ID" duration="354"/>
    <testCase name="ServiceProviderComponent should handle invalid form in saveProvider" duration="273"/>
    <testCase name="ServiceProviderComponent should handle localStorage error in saveProvider" duration="318"/>
    <testCase name="ServiceProviderComponent should handle invalid localStorage data in saveProvider" duration="285"/>
    <testCase name="ServiceProviderComponent should update existing provider" duration="491"/>
    <testCase name="ServiceProviderComponent should handle provider ID not found" duration="307"/>
    <testCase name="ServiceProviderComponent should close popup" duration="336"/>
    <testCase name="ServiceProviderComponent should cancel form and close popup" duration="228"/>
    <testCase name="ServiceProviderComponent should cancel form without closing popup" duration="196"/>
    <testCase name="ServiceProviderComponent should initialize without provider data" duration="303"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\custom-sidenav-2\custom-sidenav-2.component.spec.ts">
    <testCase name="CustomSidenav2Component should create" duration="495"/>
    <testCase name="CustomSidenav2Component collapsed input setter should update sideNavCollapsed signal with true value" duration="173"/>
    <testCase name="CustomSidenav2Component collapsed input setter should update sideNavCollapsed signal with false value" duration="135"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should update menuItems when item has subItems" duration="170"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should not update menuItems when item has no subItems" duration="208"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should collapse other items when toggling one" duration="161"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should handle empty subItems array" duration="213"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should handle undefined subItems" duration="168"/>
    <testCase name="CustomSidenav2Component should initialize with correct menu items" duration="176"/>
    <testCase name="CustomSidenav2Component should hide labels when collapsed and not mobile" duration="203"/>
    <testCase name="CustomSidenav2Component should show labels when collapsed and mobile" duration="191"/>
    <testCase name="CustomSidenav2Component should not show sub-items when collapsed and not mobile" duration="245"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\users\add-user\add-user.component.spec.ts">
    <testCase name="AddUserComponent should create the component" duration="347"/>
    <testCase name="AddUserComponent should initialize form and set title to &quot;Add User&quot; when userId is 0" duration="190"/>
    <testCase name="AddUserComponent should initialize form and set title to &quot;Add User&quot; when data is undefined" duration="125"/>
    <testCase name="AddUserComponent should initialize form and set title to &quot;Add User&quot; when userId is undefined" duration="158"/>
    <testCase name="AddUserComponent should set edit mode and populate form when userId is provided and user exists" duration="127"/>
    <testCase name="AddUserComponent should show error and close dialog when userId is provided but user is not found" duration="148"/>
    <testCase name="AddUserComponent should show error when form is invalid in saveUser" duration="154"/>
    <testCase name="AddUserComponent should add user and show success toast when form is valid in add mode" duration="145"/>
    <testCase name="AddUserComponent should update user and show success toast when form is valid in edit mode" duration="126"/>
    <testCase name="AddUserComponent should show error toast and close dialog when addUser throws an error" duration="147"/>
    <testCase name="AddUserComponent should show error toast and close dialog when updateUser throws an error" duration="126"/>
    <testCase name="AddUserComponent should close dialog when closePopup is called" duration="116"/>
    <testCase name="AddUserComponent should trigger saveUser on form submission" duration="196"/>
    <testCase name="AddUserComponent should trigger closePopup on close button click" duration="140"/>
    <testCase name="AddUserComponent should apply dark-theme class when darkModeService.isDarkMode returns true" duration="154"/>
    <testCase name="AddUserComponent should not apply dark-theme class when darkModeService.isDarkMode returns false" duration="159"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\user\user.component.spec.ts">
    <testCase name="UserComponent should create the component" duration="534"/>
    <testCase name="UserComponent should initialize with correct default properties" duration="344"/>
    <testCase name="UserComponent should have correct constructor injections" duration="226"/>
    <testCase name="UserComponent should render avatar when showAvatar is true and avatar is set" duration="210"/>
    <testCase name="UserComponent should render icon when showAvatar is false" duration="201"/>
    <testCase name="UserComponent should render icon when user.avatar is falsy" duration="224"/>
    <testCase name="UserComponent should apply correct status class for online" duration="250"/>
    <testCase name="UserComponent should apply correct status class for away" duration="184"/>
    <testCase name="UserComponent should apply correct status class for busy" duration="293"/>
    <testCase name="UserComponent should apply correct status class for not-visible" duration="256"/>
    <testCase name="UserComponent should update user status to online" duration="315"/>
    <testCase name="UserComponent should update user status to away" duration="231"/>
    <testCase name="UserComponent should update user status to busy" duration="230"/>
    <testCase name="UserComponent should update user status to not-visible" duration="196"/>
    <testCase name="UserComponent should trigger updateUserStatus when status menu item is clicked" duration="292"/>
    <testCase name="UserComponent should call signOut and navigate to login via direct method call" duration="203"/>
    <testCase name="UserComponent should call signOut and navigate to login via menu click" duration="235"/>
    <testCase name="UserComponent should render divider" duration="195"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\custom-sidenav\custom-sidenav.component.spec.ts">
    <testCase name="CustomSidenavComponent should create the component" duration="885"/>
    <testCase name="CustomSidenavComponent should initialize with correct menu items" duration="170"/>
    <testCase name="CustomSidenavComponent should set collapsed input correctly" duration="404"/>
    <testCase name="CustomSidenavComponent should emit toggleSidenav event when toggle button is clicked" duration="299"/>
    <testCase name="CustomSidenavComponent should emit closeSidenav event when close button is clicked" duration="264"/>
    <testCase name="CustomSidenavComponent should toggle submenu and collapse others" duration="565"/>
    <testCase name="CustomSidenavComponent should render menu items without sub-items correctly" duration="219"/>
    <testCase name="CustomSidenavComponent should render menu items with sub-items and toggle them" duration="435"/>
    <testCase name="CustomSidenavComponent should apply dark mode styles when isDarkMode is true" duration="227"/>
    <testCase name="CustomSidenavComponent should apply light mode styles when isDarkMode is false" duration="292"/>
    <testCase name="CustomSidenavComponent should hide labels when collapsed and not mobile" duration="269"/>
    <testCase name="CustomSidenavComponent should show labels when collapsed and mobile" duration="292"/>
    <testCase name="CustomSidenavComponent should apply active styles when route is active" duration="334"/>
    <testCase name="CustomSidenavComponent should not show sub-items when collapsed and not mobile" duration="397"/>
    <testCase name="CustomSidenavComponent should show sub-items when collapsed and mobile" duration="301"/>
    <testCase name="CustomSidenavComponent should apply logo styles based on dark mode" duration="244"/>
    <testCase name="CustomSidenavComponent should show CODE BOOK label when not collapsed" duration="266"/>
    <testCase name="CustomSidenavComponent should stop propagation on expand/collapse icon click and toggle submenu" duration="322"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\pincodes.component.spec.ts">
    <testCase name="PincodesComponent should create the component" duration="2790"/>
    <testCase name="PincodesComponent ngOnInit should subscribe to responsive service and update displayed columns" duration="1050"/>
    <testCase name="PincodesComponent ngOnInit should set displayed columns for desktop" duration="952"/>
    <testCase name="PincodesComponent ngOnInit should set displayed columns for tablet" duration="727"/>
    <testCase name="PincodesComponent ngOnInit should set displayed columns for mobile" duration="793"/>
    <testCase name="PincodesComponent ngOnDestroy should unsubscribe from breakpoint subscription" duration="687"/>
    <testCase name="PincodesComponent ngOnDestroy should handle undefined subscription" duration="843"/>
    <testCase name="PincodesComponent updateDisplayedColumns should set columns for mobile" duration="806"/>
    <testCase name="PincodesComponent updateDisplayedColumns should set columns for tablet" duration="773"/>
    <testCase name="PincodesComponent updateDisplayedColumns should set columns for desktop" duration="779"/>
    <testCase name="PincodesComponent refreshTable should reset table state and reload data" duration="949"/>
    <testCase name="PincodesComponent openAddPincodeDialog should open dialog with correct width for mobile" duration="1081"/>
    <testCase name="PincodesComponent openAddPincodeDialog should open dialog with correct width for tablet" duration="889"/>
    <testCase name="PincodesComponent openAddPincodeDialog should open dialog with correct width for desktop" duration="828"/>
    <testCase name="PincodesComponent openAddPincodeDialog should add pincode after dialog closes with result" duration="903"/>
    <testCase name="PincodesComponent openAddPincodeDialog should not add pincode if dialog closes without result" duration="1152"/>
    <testCase name="PincodesComponent startEdit should open edit dialog with correct pincode and width" duration="1155"/>
    <testCase name="PincodesComponent startEdit should update pincode after dialog closes with result" duration="721"/>
    <testCase name="PincodesComponent startEdit should not update pincode if dialog closes without result" duration="542"/>
    <testCase name="PincodesComponent onSearchQueryChange should update search query" duration="638"/>
    <testCase name="PincodesComponent onPageChange should change page and clear selected pincodes" duration="567"/>
    <testCase name="PincodesComponent sortColumn should sort by field and direction" duration="684"/>
    <testCase name="PincodesComponent togglePincode should add pincode to selectedPincodes if not selected" duration="739"/>
    <testCase name="PincodesComponent togglePincode should remove pincode from selectedPincodes if selected" duration="573"/>
    <testCase name="PincodesComponent isSelected should return true if pincode is selected" duration="531"/>
    <testCase name="PincodesComponent isSelected should return false if pincode is not selected" duration="550"/>
    <testCase name="PincodesComponent toggleAllPincodes should select all pincodes if checked" duration="525"/>
    <testCase name="PincodesComponent toggleAllPincodes should clear selected pincodes if unchecked" duration="608"/>
    <testCase name="PincodesComponent isAllSelected should return true if all pincodes are selected" duration="583"/>
    <testCase name="PincodesComponent isAllSelected should return false if not all pincodes are selected" duration="581"/>
    <testCase name="PincodesComponent isAllSelected should return false if no pincodes are available" duration="871"/>
    <testCase name="PincodesComponent deleteSelectedPincodes should delete selected pincodes and clear selection" duration="503"/>
    <testCase name="PincodesComponent getPageNumbers should return page numbers for desktop" duration="476"/>
    <testCase name="PincodesComponent getPageNumbers should return page numbers for tablet" duration="532"/>
    <testCase name="PincodesComponent getPageNumbers should return page numbers for mobile" duration="681"/>
    <testCase name="PincodesComponent getPageNumbers should adjust start page when near end" duration="733"/>
    <testCase name="PincodesComponent getPageNumbers should return empty array if no pages" duration="431"/>
    <testCase name="PincodesComponent trackById should return pincode id" duration="734"/>
    <testCase name="PincodesComponent template coverage should render loading spinner when isLoading is true" duration="520"/>
    <testCase name="PincodesComponent template coverage should render error message when error exists" duration="657"/>
    <testCase name="PincodesComponent template coverage should disable delete button when no pincodes are selected" duration="701"/>
    <testCase name="PincodesComponent template coverage should enable delete button when pincodes are selected" duration="577"/>
    <testCase name="PincodesComponent template coverage should show indeterminate checkbox state" duration="612"/>
    <testCase name="PincodesComponent template coverage should show no pages message when no pages available" duration="644"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\add-categories\add-categories.component.spec.ts">
    <testCase name="AddCategoriesComponent should create the component" duration="846"/>
    <testCase name="AddCategoriesComponent should initialize the form with required fields" duration="372"/>
    <testCase name="AddCategoriesComponent should initialize categoryForm with empty values when no category is provided" duration="418"/>
    <testCase name="AddCategoriesComponent should initialize categoryForm with provided category data" duration="703"/>
    <testCase name="AddCategoriesComponent should not close dialog when form is invalid in saveCategory" duration="501"/>
    <testCase name="AddCategoriesComponent should close dialog with form value when form is valid" duration="441"/>
    <testCase name="AddCategoriesComponent should mark all controls as touched when form is invalid" duration="487"/>
    <testCase name="AddCategoriesComponent should close dialog when cancel is called" duration="391"/>
    <testCase name="AddCategoriesComponent should trigger saveCategory on form submission" duration="494"/>
    <testCase name="AddCategoriesComponent should disable save button when form is invalid" duration="504"/>
    <testCase name="AddCategoriesComponent should enable save button when form is valid" duration="503"/>
    <testCase name="AddCategoriesComponent should show validation errors for required fields when form is submitted" duration="409"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\categories.store.spec.ts">
    <testCase name="CategoryStore should initialize with correct initial state" duration="135"/>
    <testCase name="CategoryStore should load categories from localStorage on init" duration="54"/>
    <testCase name="CategoryStore should handle loadCategories error" duration="233"/>
    <testCase name="CategoryStore should handle loadCategories with empty localStorage" duration="37"/>
    <testCase name="CategoryStore should add a new category" duration="43"/>
    <testCase name="CategoryStore should handle addCategory error" duration="36"/>
    <testCase name="CategoryStore should update an existing category" duration="24"/>
    <testCase name="CategoryStore should handle updateCategory with no localStorage data" duration="29"/>
    <testCase name="CategoryStore should delete a category" duration="34"/>
    <testCase name="CategoryStore should handle deleteCategory with no localStorage data" duration="19"/>
    <testCase name="CategoryStore should set page" duration="20"/>
    <testCase name="CategoryStore should set page size and reset current page" duration="22"/>
    <testCase name="CategoryStore should set search query and reset current page" duration="19"/>
    <testCase name="CategoryStore should sort categories and reset current page" duration="24"/>
    <testCase name="CategoryStore should filter categories by search query" duration="43"/>
    <testCase name="CategoryStore should sort categories by name" duration="122"/>
    <testCase name="CategoryStore should sort categories by createdAt" duration="52"/>
    <testCase name="CategoryStore should sort categories by modifiedAt in descending order" duration="28"/>
    <testCase name="CategoryStore should paginate categories" duration="25"/>
    <testCase name="CategoryStore should return empty paginated categories when no data" duration="158"/>
    <testCase name="CategoryStore should filter categories by icon" duration="85"/>
    <testCase name="CategoryStore should filter categories by comments" duration="79"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\users\store\user-store.spec.ts">
    <testCase name="UserStore Initial State should initialize with default state" duration="288"/>
    <testCase name="UserStore Computed Properties should compute users correctly" duration="46"/>
    <testCase name="UserStore Computed Properties should compute isLoading correctly" duration="144"/>
    <testCase name="UserStore loadUsers should load users from local storage if available" duration="73"/>
    <testCase name="UserStore loadUsers should load users from API if local storage is empty" duration="51"/>
    <testCase name="UserStore loadUsers should handle API error" duration="216"/>
    <testCase name="UserStore addUser should add a new user" duration="21"/>
    <testCase name="UserStore addUser should handle error when adding user" duration="83"/>
    <testCase name="UserStore updateUser should update an existing user" duration="33"/>
    <testCase name="UserStore updateUser should handle error when updating user" duration="41"/>
    <testCase name="UserStore deleteUser should delete a user" duration="27"/>
    <testCase name="UserStore deleteUser should handle error when deleting user" duration="31"/>
    <testCase name="UserStore getUser should return a user by ID" duration="22"/>
    <testCase name="UserStore getUser should return undefined if user is not found" duration="21"/>
    <testCase name="UserStore getUser should handle error when fetching user" duration="23"/>
    <testCase name="UserStore onInit Hook should call loadUsers on initialization" duration="26"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\services\dark-mode.service.spec.ts">
    <testCase name="DarkModeService Initialization should initialize with system theme by default" duration="87"/>
    <testCase name="DarkModeService Initialization should initialize with saved theme from localStorage" duration="23"/>
    <testCase name="DarkModeService Initialization should set up event listener for system theme changes" duration="61"/>
    <testCase name="DarkModeService selectedTheme should return the correct theme object for light theme" duration="26"/>
    <testCase name="DarkModeService selectedTheme should return the correct theme object for dark theme" duration="29"/>
    <testCase name="DarkModeService selectedTheme should return the correct theme object for system theme" duration="28"/>
    <testCase name="DarkModeService isDarkMode should return false for light theme" duration="15"/>
    <testCase name="DarkModeService isDarkMode should return true for dark theme" duration="15"/>
    <testCase name="DarkModeService isDarkMode should return system preference for system theme (dark)" duration="15"/>
    <testCase name="DarkModeService isDarkMode should return system preference for system theme (light)" duration="20"/>
    <testCase name="DarkModeService isDarkMode should handle missing window.matchMedia for system theme" duration="14"/>
    <testCase name="DarkModeService setTheme should set light theme and update DOM" duration="18"/>
    <testCase name="DarkModeService setTheme should set dark theme and update DOM" duration="18"/>
    <testCase name="DarkModeService setTheme should set system theme and update DOM based on system preference (dark)" duration="12"/>
    <testCase name="DarkModeService setTheme should set system theme and update DOM based on system preference (light)" duration="13"/>
    <testCase name="DarkModeService getThemes should return the list of themes" duration="19"/>
    <testCase name="DarkModeService System Theme Change Listener should apply theme when system preference changes in system mode" duration="16"/>
    <testCase name="DarkModeService System Theme Change Listener should not apply theme when system preference changes in non-system mode" duration="14"/>
    <testCase name="DarkModeService applyTheme should apply dark theme classes and attributes" duration="16"/>
    <testCase name="DarkModeService applyTheme should apply light theme classes and attributes" duration="14"/>
    <testCase name="DarkModeService applyTheme should apply system theme based on dark preference" duration="15"/>
    <testCase name="DarkModeService applyTheme should apply system theme based on light preference" duration="30"/>
    <testCase name="DarkModeService isVisible should return true indicating theme toggle is visible" duration="20"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\add-pincodes\add-pincodes.component.spec.ts">
    <testCase name="AddPincodesComponent should create the component" duration="938"/>
    <testCase name="AddPincodesComponent should initialize formPincode with data.pincode if provided" duration="219"/>
    <testCase name="AddPincodesComponent should not close dialog if form is invalid in savePincode" duration="259"/>
    <testCase name="AddPincodesComponent should not close dialog if isFormInvalid returns true in savePincode" duration="168"/>
    <testCase name="AddPincodesComponent should close dialog with formPincode data if form is valid" duration="140"/>
    <testCase name="AddPincodesComponent should return true for isFormInvalid if any field is missing or invalid" duration="169"/>
    <testCase name="AddPincodesComponent should close dialog without data when cancel is called" duration="151"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\dashboard-selector\dashboard-selector.component.spec.ts">
    <testCase name="DashboardSelectorComponent should create" duration="418"/>
    <testCase name="DashboardSelectorComponent should navigate to main-dashboard when navigateToDashboard1 is called" duration="379"/>
    <testCase name="DashboardSelectorComponent should navigate to main-dashboard-2 when navigateToDashboard2 is called" duration="190"/>
    <testCase name="DashboardSelectorComponent should render the title correctly" duration="183"/>
    <testCase name="DashboardSelectorComponent should render two mat-card elements" duration="214"/>
    <testCase name="DashboardSelectorComponent should render Dashboard 1 card with correct content" duration="236"/>
    <testCase name="DashboardSelectorComponent should render Dashboard 2 card with correct content" duration="214"/>
    <testCase name="DashboardSelectorComponent should call navigateToDashboard1 when Dashboard 1 button is clicked" duration="129"/>
    <testCase name="DashboardSelectorComponent should call navigateToDashboard2 when Dashboard 2 button is clicked" duration="160"/>
    <testCase name="DashboardSelectorComponent should have correct classes on the container div" duration="134"/>
    <testCase name="DashboardSelectorComponent should have correct classes on the grid div" duration="157"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\business\list-businesses\list-businesses.component.spec.ts">
    <testCase name="ListBusinessesComponent should create the component" duration="585"/>
    <testCase name="ListBusinessesComponent Initial State should initialize with businesses from BusinessStore" duration="147"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should render table layout when isDesktop is true" duration="184"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should render table layout when isTablet is true" duration="204"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should display business data in table rows" duration="192"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should render delete button for each business" duration="149"/>
    <testCase name="ListBusinessesComponent Mobile View should render card layout when isMobile is true" duration="255"/>
    <testCase name="ListBusinessesComponent Mobile View should display business data in cards" duration="156"/>
    <testCase name="ListBusinessesComponent Mobile View should render delete button for each card" duration="148"/>
    <testCase name="ListBusinessesComponent deleteBusiness should call deleteBusiness on BusinessStore when confirmed" duration="117"/>
    <testCase name="ListBusinessesComponent deleteBusiness should not call deleteBusiness if confirmation is cancelled" duration="199"/>
    <testCase name="ListBusinessesComponent Dark Mode Integration should inject DarkModeService" duration="132"/>
    <testCase name="ListBusinessesComponent Dark Mode Integration should apply dark mode if enabled" duration="88"/>
    <testCase name="ListBusinessesComponent Responsive Behavior should not render table or cards when businesses is empty" duration="96"/>
    <testCase name="ListBusinessesComponent Responsive Behavior should render table when both isDesktop and isTablet are false but isMobile is false" duration="92"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\nav.component.spec.ts">
    <testCase name="NavComponent should create the component" duration="457"/>
    <testCase name="NavComponent should bind isAuthenticated to authService.getIsAuthenticated" duration="97"/>
    <testCase name="NavComponent should call authService.signout when signout is called" duration="117"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\subcategories.store.spec.ts">
    <testCase name="SubcategoryStore should initialize with correct initial state" duration="219"/>
    <testCase name="SubcategoryStore should load subcategories from localStorage on init" duration="99"/>
    <testCase name="SubcategoryStore should handle loadSubcategories error" duration="251"/>
    <testCase name="SubcategoryStore should add a new subcategory" duration="28"/>
    <testCase name="SubcategoryStore should handle addSubcategory error" duration="28"/>
    <testCase name="SubcategoryStore should update an existing subcategory" duration="22"/>
    <testCase name="SubcategoryStore should handle updateSubcategory error with undefined message" duration="41"/>
    <testCase name="SubcategoryStore should handle deleteSubcategory error with undefined message" duration="33"/>
    <testCase name="SubcategoryStore should delete a subcategory" duration="23"/>
    <testCase name="SubcategoryStore should handle deleteSubcategory error" duration="29"/>
    <testCase name="SubcategoryStore should set page" duration="30"/>
    <testCase name="SubcategoryStore should set page size and reset current page" duration="48"/>
    <testCase name="SubcategoryStore should set search query and reset current page" duration="35"/>
    <testCase name="SubcategoryStore should sort subcategories and reset current page" duration="37"/>
    <testCase name="SubcategoryStore should set selected category ID and reset current page" duration="24"/>
    <testCase name="SubcategoryStore should filter subcategories by search query" duration="50"/>
    <testCase name="SubcategoryStore should filter subcategories by category ID" duration="45"/>
    <testCase name="SubcategoryStore should sort subcategories by name" duration="151"/>
    <testCase name="SubcategoryStore should sort subcategories by createdAt" duration="46"/>
    <testCase name="SubcategoryStore should paginate subcategories" duration="50"/>
    <testCase name="SubcategoryStore should return empty paginated subcategories when no data" duration="29"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\login\auth.service.spec.ts">
    <testCase name="AuthService should be created" duration="69"/>
    <testCase name="AuthService login should call authStore.login with credentials" duration="41"/>
    <testCase name="AuthService login should handle different credentials" duration="23"/>
    <testCase name="AuthService signup should call authStore.signup with user data" duration="29"/>
    <testCase name="AuthService signup should handle different user data" duration="24"/>
    <testCase name="AuthService signout should call authStore.signout" duration="23"/>
    <testCase name="AuthService getUser should return authStore.user signal" duration="25"/>
    <testCase name="AuthService getIsAuthenticated should return authStore.isAuthenticated signal" duration="18"/>
    <testCase name="AuthService getIsLoading should return authStore.isLoading signal" duration="31"/>
    <testCase name="AuthService error should return authStore.error signal" duration="29"/>
    <testCase name="AuthService error should handle non-null error" duration="24"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\auth.guard.spec.ts">
    <testCase name="AuthGuard should be created" duration="40"/>
    <testCase name="AuthGuard should allow navigation when user is authenticated" duration="15"/>
    <testCase name="AuthGuard should redirect to login when user is not authenticated" duration="32"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\pincodes.store.spec.ts">
    <testCase name="PincodeStore should initialize with correct initial state" duration="90"/>
    <testCase name="PincodeStore should load pincodes from localStorage on init" duration="50"/>
    <testCase name="PincodeStore should load pincodes from API when localStorage is empty" duration="35"/>
    <testCase name="PincodeStore should handle loadPincodes error" duration="23"/>
    <testCase name="PincodeStore should add a new pincode" duration="25"/>
    <testCase name="PincodeStore should handle addPincode error" duration="34"/>
    <testCase name="PincodeStore should update an existing pincode" duration="29"/>
    <testCase name="PincodeStore should handle updatePincode error" duration="27"/>
    <testCase name="PincodeStore should handle updatePincode error with default message" duration="26"/>
    <testCase name="PincodeStore should update pincode when localStorage is empty" duration="50"/>
    <testCase name="PincodeStore should delete a pincode" duration="27"/>
    <testCase name="PincodeStore should handle deletePincode error" duration="21"/>
    <testCase name="PincodeStore should handle deletePincode error with default message" duration="38"/>
    <testCase name="PincodeStore should delete pincode when localStorage is empty" duration="37"/>
    <testCase name="PincodeStore should set page" duration="29"/>
    <testCase name="PincodeStore should set page size and reset current page" duration="55"/>
    <testCase name="PincodeStore should set search query and reset current page" duration="40"/>
    <testCase name="PincodeStore should sort pincodes and reset current page" duration="19"/>
    <testCase name="PincodeStore should filter pincodes by search query" duration="16"/>
    <testCase name="PincodeStore should filter pincodes by pincode" duration="23"/>
    <testCase name="PincodeStore should sort pincodes by officeName ascending" duration="90"/>
    <testCase name="PincodeStore should sort pincodes by officeName descending" duration="39"/>
    <testCase name="PincodeStore should paginate pincodes" duration="44"/>
    <testCase name="PincodeStore should return empty paginated pincodes when no data" duration="31"/>
    <testCase name="PincodeStore should handle null or undefined fields in pincode during filtering" duration="81"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\login\auth.store.spec.ts">
    <testCase name="AuthStore Initial State and Signals should initialize with default state" duration="69"/>
    <testCase name="AuthStore onInit Hook should load auth data from localStorage on init" duration="51"/>
    <testCase name="AuthStore onInit Hook should not update state if no auth data in localStorage" duration="43"/>
    <testCase name="AuthStore login Method should login successfully and update state" duration="39"/>
    <testCase name="AuthStore login Method should handle 401 error during login" duration="40"/>
    <testCase name="AuthStore login Method should handle error with error.error.message during login" duration="29"/>
    <testCase name="AuthStore login Method should handle generic error during login" duration="86"/>
    <testCase name="AuthStore login Method should handle error with no message during login" duration="175"/>
    <testCase name="AuthStore login Method should set isLoading to true before HTTP request" duration="21"/>
    <testCase name="AuthStore signup Method should signup successfully and update state" duration="106"/>
    <testCase name="AuthStore signup Method should handle error with error.error.message during signup" duration="14"/>
    <testCase name="AuthStore signup Method should handle error with error.message during signup" duration="14"/>
    <testCase name="AuthStore signup Method should handle default error during signup" duration="17"/>
    <testCase name="AuthStore signup Method should set isLoading to true before HTTP request" duration="16"/>
    <testCase name="AuthStore signout Method should sign out successfully and clear state" duration="18"/>
    <testCase name="AuthStore signout Method should handle error during signout" duration="556"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\pincodes.service.spec.ts">
    <testCase name="PincodesService should be created" duration="36"/>
    <testCase name="PincodesService signals should expose pincodes signal" duration="16"/>
    <testCase name="PincodesService signals should expose filteredPincodes signal" duration="12"/>
    <testCase name="PincodesService signals should expose paginatedPincodes signal" duration="13"/>
    <testCase name="PincodesService signals should expose totalPages signal" duration="17"/>
    <testCase name="PincodesService signals should expose currentPage signal" duration="14"/>
    <testCase name="PincodesService signals should expose pageSize signal" duration="11"/>
    <testCase name="PincodesService signals should expose isLoading signal" duration="17"/>
    <testCase name="PincodesService signals should expose error signal" duration="43"/>
    <testCase name="PincodesService getPincodes should call loadPincodes and update pincodes" duration="30"/>
    <testCase name="PincodesService getPincodes should load pincodes from localStorage if available" duration="23"/>
    <testCase name="PincodesService addPincode should add a pincode and return it" duration="20"/>
    <testCase name="PincodesService updatePincode should update a pincode" duration="14"/>
    <testCase name="PincodesService deletePincode should delete a pincode" duration="12"/>
    <testCase name="PincodesService setPage should set the current page" duration="13"/>
    <testCase name="PincodesService setPageSize should set page size" duration="14"/>
    <testCase name="PincodesService setSearchQuery should set search query" duration="20"/>
    <testCase name="PincodesService sortPincodes should sort pincodes by field in ascending order" duration="23"/>
    <testCase name="PincodesService sortPincodes should sort pincodes by field in descending order" duration="23"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\app.component.spec.ts">
    <testCase name="AppComponent should create the app" duration="94"/>
    <testCase name="AppComponent should have router-outlet in the template" duration="46"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\subcategories.service.spec.ts">
    <testCase name="SubcategoriesService should be created" duration="64"/>
    <testCase name="SubcategoriesService should initialize properties from subcategoryStore" duration="21"/>
    <testCase name="SubcategoriesService should call loadSubcategories on getSubcategories" duration="15"/>
    <testCase name="SubcategoriesService should call addSubcategory with subcategory data" duration="16"/>
    <testCase name="SubcategoriesService should call updateSubcategory with subcategory data" duration="18"/>
    <testCase name="SubcategoriesService should call deleteSubcategory with id" duration="17"/>
    <testCase name="SubcategoriesService should call setPage with page number" duration="15"/>
    <testCase name="SubcategoriesService should call setPageSize with page size" duration="19"/>
    <testCase name="SubcategoriesService should call setSearchQuery with query" duration="26"/>
    <testCase name="SubcategoriesService should call sortSubcategories with field and direction" duration="20"/>
    <testCase name="SubcategoriesService should call setSelectedCategoryId with categoryId" duration="26"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\services\responsive\responsive.service.spec.ts">
    <testCase name="ResponsiveService currentBreakpoint should return &quot;xsmall&quot; when XSmall breakpoint is matched" duration="215"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;small&quot; when Small breakpoint is matched" duration="49"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;medium&quot; when Medium breakpoint is matched" duration="29"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;large&quot; when Large breakpoint is matched" duration="40"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;xlarge&quot; when XLarge breakpoint is matched" duration="96"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;xlarge&quot; when no breakpoints are matched" duration="137"/>
    <testCase name="ResponsiveService isMobile should return true when XSmall breakpoint is matched" duration="44"/>
    <testCase name="ResponsiveService isMobile should return false when XSmall breakpoint is not matched" duration="66"/>
    <testCase name="ResponsiveService isTablet should return true when Small breakpoint is matched" duration="31"/>
    <testCase name="ResponsiveService isTablet should return true when Medium breakpoint is matched" duration="30"/>
    <testCase name="ResponsiveService isTablet should return false when neither Small nor Medium breakpoints are matched" duration="29"/>
    <testCase name="ResponsiveService isDesktop should return true when Large breakpoint is matched" duration="27"/>
    <testCase name="ResponsiveService isDesktop should return true when XLarge breakpoint is matched" duration="16"/>
    <testCase name="ResponsiveService isDesktop should return false when neither Large nor XLarge breakpoints are matched" duration="13"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\business\store\business.store.spec.ts">
    <testCase name="BusinessStore should be created" duration="214"/>
    <testCase name="BusinessStore initial state should have initial state" duration="67"/>
    <testCase name="BusinessStore loadBusinesses should load businesses from localStorage" duration="40"/>
    <testCase name="BusinessStore loadBusinesses should handle empty localStorage" duration="48"/>
    <testCase name="BusinessStore loadBusinesses should handle parsing error" duration="35"/>
    <testCase name="BusinessStore addBusiness should add a new business" duration="43"/>
    <testCase name="BusinessStore addBusiness should handle error when adding business" duration="79"/>
    <testCase name="BusinessStore updateBusiness should update an existing business" duration="68"/>
    <testCase name="BusinessStore updateBusiness should handle business not found" duration="52"/>
    <testCase name="BusinessStore updateBusiness should handle storage error" duration="50"/>
    <testCase name="BusinessStore deleteBusiness should delete a business" duration="34"/>
    <testCase name="BusinessStore deleteBusiness should handle storage error" duration="28"/>
    <testCase name="BusinessStore deleteBusiness should not fail when deleting non-existent business" duration="20"/>
    <testCase name="BusinessStore getBusiness should get a business by id" duration="14"/>
    <testCase name="BusinessStore getBusiness should return undefined for non-existent id" duration="25"/>
    <testCase name="BusinessStore getBusiness should set error if something goes wrong" duration="17"/>
    <testCase name="BusinessStore businessCount should return correct count of businesses" duration="23"/>
    <testCase name="BusinessStore onInit should load businesses on initialization" duration="19"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\services\theme\theme.service.spec.ts">
    <testCase name="ThemeService Initialization should initialize with deep-blue theme" duration="34"/>
    <testCase name="ThemeService Initialization should remove all theme classes during initialization" duration="16"/>
    <testCase name="ThemeService getThemes should return the list of themes" duration="23"/>
    <testCase name="ThemeService setTheme should set theme to green and apply light theme class when not in dark mode" duration="17"/>
    <testCase name="ThemeService setTheme should set theme to purple and apply dark theme class when in dark mode" duration="20"/>
    <testCase name="ThemeService setTheme should not change theme if themeId is invalid" duration="13"/>
    <testCase name="ThemeService applyCurrentTheme should apply light theme class when not in dark mode" duration="20"/>
    <testCase name="ThemeService applyCurrentTheme should apply dark theme class when in dark mode" duration="26"/>
    <testCase name="ThemeService Effect should reapply theme when dark mode changes" duration="37"/>
    <testCase name="ThemeService Effect should call applyCurrentTheme when effect is triggered" duration="21"/>
    <testCase name="ThemeService Effect should trigger applyCurrentTheme when theme changes" duration="12"/>
    <testCase name="ThemeService Local Storage should load theme from localStorage on initialization" duration="20"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\dashboard-1\dashboard-1.component.spec.ts">
    <testCase name="Dashboard1Component should create" duration="53"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\categories.service.spec.ts">
    <testCase name="CategoriesService should be created" duration="28"/>
    <testCase name="CategoriesService should return categories from store" duration="12"/>
    <testCase name="CategoriesService should return filteredCategories from store" duration="10"/>
    <testCase name="CategoriesService should return paginatedCategories from store" duration="11"/>
    <testCase name="CategoriesService should return totalPages from store" duration="12"/>
    <testCase name="CategoriesService should return currentPage from store" duration="21"/>
    <testCase name="CategoriesService should return pageSize from store" duration="10"/>
    <testCase name="CategoriesService should return isLoading from store" duration="10"/>
    <testCase name="CategoriesService should return error from store" duration="10"/>
    <testCase name="CategoriesService should call loadCategories on store" duration="11"/>
    <testCase name="CategoriesService should call addCategory on store and return result" duration="15"/>
    <testCase name="CategoriesService should handle addCategory error" duration="43"/>
    <testCase name="CategoriesService should call updateCategory on store" duration="11"/>
    <testCase name="CategoriesService should handle updateCategory error" duration="10"/>
    <testCase name="CategoriesService should call deleteCategory on store" duration="9"/>
    <testCase name="CategoriesService should handle deleteCategory error" duration="10"/>
    <testCase name="CategoriesService should call setPage on store" duration="8"/>
    <testCase name="CategoriesService should call setPageSize on store" duration="11"/>
    <testCase name="CategoriesService should call setSearchQuery on store" duration="9"/>
    <testCase name="CategoriesService should call sortCategories on store" duration="9"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\mat-components\mat-components.component.spec.ts">
    <testCase name="MatComponentsComponent should create the component" duration="2077"/>
    <testCase name="MatComponentsComponent Initial State should initialize filterValues with default values" duration="1575"/>
    <testCase name="MatComponentsComponent Initial State should initialize roles array" duration="1135"/>
    <testCase name="MatComponentsComponent Initial State should initialize displayedColumns" duration="1197"/>
    <testCase name="MatComponentsComponent Initial State should initialize dataSource as MatTableDataSource" duration="1385"/>
    <testCase name="MatComponentsComponent Initial State should initialize allEmails and filteredEmails" duration="1208"/>
    <testCase name="MatComponentsComponent Constructor and Effect should set up effect and update dataSource" duration="1233"/>
    <testCase name="MatComponentsComponent Constructor and Effect should not update paginator in effect if paginator is undefined" duration="1421"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when global filter does not match" duration="1086"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when firstName filter does not match" duration="1090"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when email filter does not match" duration="1116"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when role filter does not match" duration="1021"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when date range does not match" duration="1234"/>
    <testCase name="MatComponentsComponent createFilterPredicate should handle null fields in user data" duration="1039"/>
    <testCase name="MatComponentsComponent trackById should return user id" duration="1307"/>
    <testCase name="MatComponentsComponent Template Rendering should render toolbar with title and buttons" duration="1171"/>
    <testCase name="MatComponentsComponent Template Rendering should render error message when error exists" duration="1680"/>
    <testCase name="MatComponentsComponent Template Rendering should render loading spinner when isLoading is true" duration="1219"/>
    <testCase name="MatComponentsComponent Template Rendering should render filters when not loading" duration="2057"/>
    <testCase name="MatComponentsComponent Template Rendering should render table with correct columns and data" duration="1825"/>
    <testCase name="MatComponentsComponent Template Rendering should render paginator with correct options" duration="842"/>
    <testCase name="MatComponentsComponent Template Rendering should trigger refreshTable on refresh button click" duration="697"/>
    <testCase name="MatComponentsComponent Template Rendering should trigger deleteUser on delete button click" duration="738"/>
    <testCase name="MatComponentsComponent Template Rendering should update global filter and call applyFilter" duration="646"/>
    <testCase name="MatComponentsComponent Template Rendering should update firstName filter and call applyFilter" duration="776"/>
    <testCase name="MatComponentsComponent Template Rendering should update email filter and call applyFilter" duration="797"/>
    <testCase name="MatComponentsComponent Template Rendering should update role filter and call applyFilter" duration="513"/>
    <testCase name="MatComponentsComponent Template Rendering should update date range filter and call applyFilter" duration="459"/>
  </file>
</testExecutions>