<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\business\business.component.spec.ts">
    <testCase name="BusinessComponent should create the component" duration="2292"/>
    <testCase name="BusinessComponent Initial State should initialize business signal with empty values" duration="498"/>
    <testCase name="BusinessComponent Initial State should initialize categories and subCategories" duration="417"/>
    <testCase name="BusinessComponent Initial State should initialize isPublished as false" duration="459"/>
    <testCase name="BusinessComponent Initial State should initialize isEditing with all steps as false" duration="650"/>
    <testCase name="BusinessComponent Template Rendering should render the header with title and Create New Business button" duration="348"/>
    <testCase name="BusinessComponent Template Rendering should render the stepper with three steps" duration="433"/>
    <testCase name="BusinessComponent Template Rendering should render step 1 form when not published" duration="593"/>
    <testCase name="BusinessComponent Template Rendering should render published view when isPublished is true" duration="890"/>
    <testCase name="BusinessComponent Template Rendering should show success message when published" duration="588"/>
    <testCase name="BusinessComponent Form Validation should validate step 1 as invalid when name or country is empty" duration="631"/>
    <testCase name="BusinessComponent Form Validation should validate step 2 as invalid when category or subCategory is empty" duration="823"/>
    <testCase name="BusinessComponent Form Validation should validate step 3 as invalid when phone is empty" duration="514"/>
    <testCase name="BusinessComponent Form Validation should show validation errors for step 1 when fields are touched and invalid" duration="764"/>
    <testCase name="BusinessComponent Stepper Navigation should disable Next button in step 1 when form is invalid" duration="787"/>
    <testCase name="BusinessComponent Stepper Navigation should enable Next button in step 1 when form is valid" duration="372"/>
    <testCase name="BusinessComponent Stepper Navigation should navigate to step 2 when Next is clicked" duration="476"/>
    <testCase name="BusinessComponent Stepper Navigation should navigate back to step 1 from step 2" duration="469"/>
    <testCase name="BusinessComponent Publishing Business should call addBusiness and set isPublished to true on publish" duration="286"/>
    <testCase name="BusinessComponent Publishing Business should not publish if confirm is cancelled" duration="416"/>
    <testCase name="BusinessComponent Editing Business should toggle edit mode for step 1" duration="592"/>
    <testCase name="BusinessComponent Editing Business should render edit form for step 1" duration="834"/>
    <testCase name="BusinessComponent Editing Business should call updateBusiness on save" duration="497"/>
    <testCase name="BusinessComponent Editing Business should cancel edit mode without saving" duration="387"/>
    <testCase name="BusinessComponent Reset Form should reset the form and signals" duration="262"/>
    <testCase name="BusinessComponent Responsive Behavior should set stepper orientation to vertical on mobile" duration="552"/>
    <testCase name="BusinessComponent Responsive Behavior should set stepper orientation to horizontal on desktop" duration="240"/>
    <testCase name="BusinessComponent Dark Mode should apply dark-theme class when dark mode is enabled" duration="426"/>
    <testCase name="BusinessComponent Dark Mode should not apply dark-theme class when dark mode is disabled" duration="587"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\categories.component.spec.ts">
    <testCase name="CategoriesComponent should create the component" duration="2254"/>
    <testCase name="CategoriesComponent should initialize in ngOnInit and set up subscriptions" duration="2173"/>
    <testCase name="CategoriesComponent should unsubscribe in ngOnDestroy" duration="582"/>
    <testCase name="CategoriesComponent should not throw error if breakpointSubscription is undefined in ngOnDestroy" duration="742"/>
    <testCase name="CategoriesComponent should update displayed columns for mobile" duration="736"/>
    <testCase name="CategoriesComponent should update displayed columns for tablet" duration="936"/>
    <testCase name="CategoriesComponent should update displayed columns for desktop" duration="940"/>
    <testCase name="CategoriesComponent should refresh table" duration="643"/>
    <testCase name="CategoriesComponent should handle refresh table when search input is not found" duration="768"/>
    <testCase name="CategoriesComponent should handle search query change" duration="726"/>
    <testCase name="CategoriesComponent should handle page change" duration="608"/>
    <testCase name="CategoriesComponent should sort column" duration="503"/>
    <testCase name="CategoriesComponent should toggle category selection" duration="619"/>
    <testCase name="CategoriesComponent should check if category is selected" duration="369"/>
    <testCase name="CategoriesComponent should toggle all categories" duration="418"/>
    <testCase name="CategoriesComponent should check if all categories are selected" duration="291"/>
    <testCase name="CategoriesComponent should delete selected categories" duration="235"/>
    <testCase name="CategoriesComponent should get page numbers for pagination" duration="254"/>
    <testCase name="CategoriesComponent should handle pagination with single page" duration="299"/>
    <testCase name="CategoriesComponent should handle pagination with no pages" duration="219"/>
    <testCase name="CategoriesComponent should track categories by id" duration="294"/>
    <testCase name="CategoriesComponent should handle trackById with null category" duration="453"/>
    <testCase name="CategoriesComponent should display error message when service.error is truthy" duration="280"/>
    <testCase name="CategoriesComponent should display loading spinner when service.isLoading is true" duration="466"/>
    <testCase name="CategoriesComponent should apply dark-theme class when darkModeService.isDarkMode is true" duration="679"/>
    <testCase name="CategoriesComponent should handle search input change" duration="263"/>
    <testCase name="CategoriesComponent should display no pages message when no pages are available" duration="207"/>
    <testCase name="CategoriesComponent should handle empty category list" duration="336"/>
    <testCase name="CategoriesComponent should handle sort direction toggle" duration="447"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\subcategories.component.spec.ts">
    <testCase name="SubcategoriesComponent should create the component" duration="3371"/>
    <testCase name="SubcategoriesComponent should initialize in ngOnInit and set up subscriptions" duration="655"/>
    <testCase name="SubcategoriesComponent should unsubscribe in ngOnDestroy" duration="661"/>
    <testCase name="SubcategoriesComponent should not unsubscribe in ngOnDestroy if subscription is undefined" duration="1156"/>
    <testCase name="SubcategoriesComponent should update displayed columns for mobile" duration="897"/>
    <testCase name="SubcategoriesComponent should update displayed columns for tablet" duration="855"/>
    <testCase name="SubcategoriesComponent should update displayed columns for desktop" duration="847"/>
    <testCase name="SubcategoriesComponent should handle category change" duration="792"/>
    <testCase name="SubcategoriesComponent should handle null category change" duration="871"/>
    <testCase name="SubcategoriesComponent should refresh table" duration="676"/>
    <testCase name="SubcategoriesComponent should warn when opening add dialog with no category selected" duration="535"/>
    <testCase name="SubcategoriesComponent should warn when selected category is not found" duration="886"/>
    <testCase name="SubcategoriesComponent should handle search query change" duration="618"/>
    <testCase name="SubcategoriesComponent should delete a subcategory by id" duration="487"/>
    <testCase name="SubcategoriesComponent should handle page change" duration="486"/>
    <testCase name="SubcategoriesComponent should sort column" duration="437"/>
    <testCase name="SubcategoriesComponent should toggle subcategory selection" duration="503"/>
    <testCase name="SubcategoriesComponent should check if subcategory is selected" duration="646"/>
    <testCase name="SubcategoriesComponent should toggle all subcategories" duration="357"/>
    <testCase name="SubcategoriesComponent should check if all subcategories are selected" duration="626"/>
    <testCase name="SubcategoriesComponent should delete selected subcategories" duration="451"/>
    <testCase name="SubcategoriesComponent should get page numbers for pagination" duration="626"/>
    <testCase name="SubcategoriesComponent should track subcategories by id" duration="753"/>
    <testCase name="SubcategoriesComponent should display loading spinner when service.isLoading is true" duration="715"/>
    <testCase name="SubcategoriesComponent should apply dark-theme class when darkModeService.isDarkMode is true" duration="472"/>
    <testCase name="SubcategoriesComponent should handle search input change" duration="363"/>
    <testCase name="SubcategoriesComponent should handle delete selected button click" duration="684"/>
    <testCase name="SubcategoriesComponent should disable delete button when no subcategories are selected" duration="553"/>
    <testCase name="SubcategoriesComponent should handle previous page button" duration="458"/>
    <testCase name="SubcategoriesComponent should disable previous page button on first page" duration="479"/>
    <testCase name="SubcategoriesComponent should handle next page button" duration="359"/>
    <testCase name="SubcategoriesComponent should disable next page button on last page" duration="700"/>
    <testCase name="SubcategoriesComponent should handle page number button click" duration="901"/>
    <testCase name="SubcategoriesComponent should handle mobile page select" duration="1015"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\login\login\login.component.spec.ts">
    <testCase name="LoginComponent should create the component" duration="2204"/>
    <testCase name="LoginComponent should initialize the form with correct controls" duration="860"/>
    <testCase name="LoginComponent should set validators correctly in login mode" duration="832"/>
    <testCase name="LoginComponent should set validators correctly in signup mode" duration="991"/>
    <testCase name="LoginComponent should toggle to signup mode when handleSignup is called in login mode" duration="685"/>
    <testCase name="LoginComponent should toggle to login mode when handleLogin is called in signup mode" duration="414"/>
    <testCase name="LoginComponent should validate email field as required and valid email" duration="785"/>
    <testCase name="LoginComponent should validate password field as required and minimum length" duration="1069"/>
    <testCase name="LoginComponent should validate password match in signup mode" duration="1023"/>
    <testCase name="LoginComponent should validate name field as required in signup mode" duration="1377"/>
    <testCase name="LoginComponent should validate agreeTerms as required in signup mode" duration="885"/>
    <testCase name="LoginComponent should toggle password visibility" duration="1109"/>
    <testCase name="LoginComponent should toggle confirm password visibility" duration="661"/>
    <testCase name="LoginComponent should call authService.login and navigate on successful login via handleLogin" duration="665"/>
    <testCase name="LoginComponent should toggle to login mode if isSignupMode is true in handleLogin" duration="548"/>
    <testCase name="LoginComponent should toggle to login mode if form is invalid in handleLogin" duration="485"/>
    <testCase name="LoginComponent should toggle to login mode if isLoading is true in handleLogin" duration="270"/>
    <testCase name="LoginComponent should call authService.signup and navigate on successful signup via handleSignup" duration="680"/>
    <testCase name="LoginComponent should reset form on failed signup via handleSignup" duration="388"/>
    <testCase name="LoginComponent should toggle to signup mode if not in signup mode in handleSignup" duration="693"/>
    <testCase name="LoginComponent should toggle to signup mode if form is invalid in handleSignup" duration="385"/>
    <testCase name="LoginComponent should toggle to signup mode if isLoading is true in handleSignup" duration="527"/>
    <testCase name="LoginComponent should call onLogin and navigate on successful login" duration="560"/>
    <testCase name="LoginComponent should not call onLogin if form is invalid" duration="263"/>
    <testCase name="LoginComponent should call onSignup and navigate on successful signup" duration="521"/>
    <testCase name="LoginComponent should not call onSignup if form is invalid" duration="631"/>
    <testCase name="LoginComponent should call login when clicking login button with valid form" duration="851"/>
    <testCase name="LoginComponent should call signup when clicking signup button with valid form" duration="920"/>
    <testCase name="LoginComponent should toggle to login mode when clicking login button in signup mode" duration="570"/>
    <testCase name="LoginComponent should toggle to signup mode when clicking signup button in login mode" duration="684"/>
    <testCase name="LoginComponent should not call login if form is invalid when clicking login button" duration="444"/>
    <testCase name="LoginComponent should not call signup if form is invalid when clicking signup button" duration="678"/>
    <testCase name="LoginComponent should not call login if isLoading is true when clicking login button" duration="567"/>
    <testCase name="LoginComponent should not call signup if isLoading is true when clicking signup button" duration="812"/>
    <testCase name="LoginComponent should display error message when error exists" duration="326"/>
    <testCase name="LoginComponent should show loading state on login button when isLoading is true" duration="560"/>
    <testCase name="LoginComponent should show loading state on signup button when isLoading is true" duration="1069"/>
    <testCase name="LoginComponent should render social login buttons" duration="332"/>
    <testCase name="LoginComponent should show name and confirm password fields in signup mode" duration="460"/>
    <testCase name="LoginComponent should not show name and confirm password fields in login mode" duration="466"/>
    <testCase name="LoginComponent should show remember me and forgot password in login mode" duration="548"/>
    <testCase name="LoginComponent should show agree terms checkbox in signup mode" duration="554"/>
    <testCase name="LoginComponent should update responsive breakpoints for all breakpoints" duration="339"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\users\users.component.spec.ts">
    <testCase name="UsersComponent should create the component" duration="2014"/>
    <testCase name="UsersComponent should initialize dataSource and set up effect in constructor" duration="1081"/>
    <testCase name="UsersComponent should handle error in effect when store.error is set" duration="591"/>
    <testCase name="UsersComponent should log warning when paginator is not initialized in effect" duration="566"/>
    <testCase name="UsersComponent should set paginator when initialized in effect" duration="377"/>
    <testCase name="UsersComponent should call loadUsers and set filterPredicate in ngOnInit" duration="287"/>
    <testCase name="UsersComponent should log message in ngOnDestroy" duration="232"/>
    <testCase name="UsersComponent should call deleteUser in store when deleteUser is called" duration="152"/>
    <testCase name="UsersComponent should open dialog with correct config in openPopup" duration="266"/>
    <testCase name="UsersComponent should apply filter and reset paginator when applyFilter is called" duration="921"/>
    <testCase name="UsersComponent should not call firstPage when paginator is not set in applyFilter" duration="537"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\main-dashboard-2\main-dashboard-2.component.spec.ts">
    <testCase name="MainDashboard2Component should create" duration="3247"/>
    <testCase name="MainDashboard2Component should initialize with correct title" duration="1087"/>
    <testCase name="MainDashboard2Component should initialize collapsed signal as false" duration="1396"/>
    <testCase name="MainDashboard2Component should initialize currentLanguage signal as English" duration="1432"/>
    <testCase name="MainDashboard2Component should initialize darkModeValue signal from DarkModeService" duration="1796"/>
    <testCase name="MainDashboard2Component should add languages in constructor" duration="1573"/>
    <testCase name="MainDashboard2Component should initialize with default language from localStorage (en)" duration="812"/>
    <testCase name="MainDashboard2Component should change language to French" duration="1246"/>
    <testCase name="MainDashboard2Component should change language to English" duration="627"/>
    <testCase name="MainDashboard2Component should return correct theme aria label" duration="415"/>
    <testCase name="MainDashboard2Component should return correct color theme aria label" duration="1021"/>
    <testCase name="MainDashboard2Component should toggle fullscreen when not in fullscreen" duration="563"/>
    <testCase name="MainDashboard2Component should exit fullscreen when in fullscreen" duration="619"/>
    <testCase name="MainDashboard2Component should handle fullscreen error" duration="746"/>
    <testCase name="MainDashboard2Component should compute sidenavWidth for mobile" duration="1099"/>
    <testCase name="MainDashboard2Component should compute sidenavWidth for non-mobile collapsed" duration="1368"/>
    <testCase name="MainDashboard2Component should compute sidenavWidth for non-mobile non-collapsed" duration="797"/>
    <testCase name="MainDashboard2Component should compute sidenavMode for mobile" duration="385"/>
    <testCase name="MainDashboard2Component should compute sidenavMode for non-mobile" duration="492"/>
    <testCase name="MainDashboard2Component should compute sidenavOpened for mobile and collapsed" duration="539"/>
    <testCase name="MainDashboard2Component should compute sidenavOpened for mobile and non-collapsed" duration="351"/>
    <testCase name="MainDashboard2Component should compute sidenavOpened for non-mobile" duration="681"/>
    <testCase name="MainDashboard2Component should toggle sidenav collapsed state" duration="691"/>
    <testCase name="MainDashboard2Component should toggle sidenav when clicking the menu button" duration="878"/>
    <testCase name="MainDashboard2Component should close sidenav on mobile when clicking content area" duration="939"/>
    <testCase name="MainDashboard2Component should not close sidenav on non-mobile when clicking content area" duration="1096"/>
    <testCase name="MainDashboard2Component should open mobile menu when clicking mobile menu button" duration="612"/>
    <testCase name="MainDashboard2Component should toggle dark mode via button toggle group" duration="623"/>
    <testCase name="MainDashboard2Component should select dark theme from dark mode menu" duration="2110"/>
    <testCase name="MainDashboard2Component should select color theme from color theme menu" duration="1017"/>
    <testCase name="MainDashboard2Component should toggle fullscreen from mobile menu" duration="833"/>
    <testCase name="MainDashboard2Component should select light mode from mobile menu" duration="663"/>
    <testCase name="MainDashboard2Component should select dark mode from mobile menu" duration="707"/>
    <testCase name="MainDashboard2Component should open theme menu from mobile menu" duration="545"/>
    <testCase name="MainDashboard2Component should open color theme menu from mobile menu" duration="769"/>
    <testCase name="MainDashboard2Component should open language menu from mobile menu" duration="723"/>
    <testCase name="MainDashboard2Component should handle invalid auth data in localStorage" duration="1037"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\mat-components\user-dialog.component.spec.ts">
    <testCase name="UserDialogComponent should create the component" duration="1650"/>
    <testCase name="UserDialogComponent Initial State should initialize user with empty values for add dialog" duration="635"/>
    <testCase name="UserDialogComponent Initial State should initialize user with provided data for edit dialog" duration="864"/>
    <testCase name="UserDialogComponent Template Rendering should render dialog title as Add User for new user" duration="571"/>
    <testCase name="UserDialogComponent Template Rendering should render dialog title as Edit User for existing user" duration="1163"/>
    <testCase name="UserDialogComponent Template Rendering should render form fields" duration="415"/>
    <testCase name="UserDialogComponent Template Rendering should render Cancel and Save buttons" duration="389"/>
    <testCase name="UserDialogComponent Form Validation should disable Save button when form is invalid" duration="681"/>
    <testCase name="UserDialogComponent Form Validation should enable Save button when form is valid" duration="423"/>
    <testCase name="UserDialogComponent Form Validation should show error messages for empty fields" duration="627"/>
    <testCase name="UserDialogComponent User Actions should close dialog with user data on save" duration="627"/>
    <testCase name="UserDialogComponent User Actions should close dialog without data on cancel" duration="367"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\custom-sidenav\custom-sidenav.component.spec.ts">
    <testCase name="CustomSidenavComponent should create the component" duration="750"/>
    <testCase name="CustomSidenavComponent should initialize with correct menu items" duration="152"/>
    <testCase name="CustomSidenavComponent should set collapsed input correctly" duration="279"/>
    <testCase name="CustomSidenavComponent should emit toggleSidenav event when toggle button is clicked" duration="204"/>
    <testCase name="CustomSidenavComponent should emit closeSidenav event when close button is clicked" duration="271"/>
    <testCase name="CustomSidenavComponent should toggle submenu and collapse others" duration="730"/>
    <testCase name="CustomSidenavComponent should render menu items without sub-items correctly" duration="272"/>
    <testCase name="CustomSidenavComponent should render menu items with sub-items and toggle them" duration="419"/>
    <testCase name="CustomSidenavComponent should apply dark mode styles when isDarkMode is true" duration="166"/>
    <testCase name="CustomSidenavComponent should apply light mode styles when isDarkMode is false" duration="306"/>
    <testCase name="CustomSidenavComponent should hide labels when collapsed and not mobile" duration="248"/>
    <testCase name="CustomSidenavComponent should show labels when collapsed and mobile" duration="218"/>
    <testCase name="CustomSidenavComponent should apply active styles when route is active" duration="340"/>
    <testCase name="CustomSidenavComponent should not show sub-items when collapsed and not mobile" duration="210"/>
    <testCase name="CustomSidenavComponent should show sub-items when collapsed and mobile" duration="319"/>
    <testCase name="CustomSidenavComponent should apply logo styles based on dark mode" duration="299"/>
    <testCase name="CustomSidenavComponent should show CODE BOOK label when not collapsed" duration="156"/>
    <testCase name="CustomSidenavComponent should stop propagation on expand/collapse icon click and toggle submenu" duration="490"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\dashboard\dashboard.component.spec.ts">
    <testCase name="DashboardComponent should create" duration="942"/>
    <testCase name="DashboardComponent should initialize form and countries" duration="475"/>
    <testCase name="DashboardComponent should set language from localStorage on init" duration="309"/>
    <testCase name="DashboardComponent should set default language to en if no lang in localStorage" duration="240"/>
    <testCase name="DashboardComponent should update responsiveClass based on breakpoint" duration="358"/>
    <testCase name="DashboardComponent should load service providers from localStorage" duration="303"/>
    <testCase name="DashboardComponent should handle null service providers in localStorage" duration="317"/>
    <testCase name="DashboardComponent should create service provider form group" duration="301"/>
    <testCase name="DashboardComponent should delete service provider" duration="162"/>
    <testCase name="DashboardComponent should handle error in deleteServiceProvider" duration="287"/>
    <testCase name="DashboardComponent should submit valid form" duration="227"/>
    <testCase name="DashboardComponent should handle invalid form submission" duration="192"/>
    <testCase name="DashboardComponent should handle specific form validation errors" duration="192"/>
    <testCase name="DashboardComponent should handle localStorage error in onSubmit" duration="336"/>
    <testCase name="DashboardComponent should enable edit mode" duration="252"/>
    <testCase name="DashboardComponent should cancel form" duration="358"/>
    <testCase name="DashboardComponent should save to localStorage" duration="220"/>
    <testCase name="DashboardComponent should handle error in saveToLocalStorage" duration="278"/>
    <testCase name="DashboardComponent should track by provider id" duration="201"/>
    <testCase name="DashboardComponent should get serviceProvidersArray" duration="283"/>
    <testCase name="DashboardComponent should handle empty service providers in loadFromLocalStorage" duration="160"/>
    <testCase name="DashboardComponent should handle invalid JSON in loadFromLocalStorage" duration="149"/>
    <testCase name="DashboardComponent should handle null provider in createServiceProviderFormGroup" duration="293"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\main-dashboard\main-dashboard.component.spec.ts">
    <testCase name="MainDashboardComponent should create" duration="1572"/>
    <testCase name="MainDashboardComponent should initialize with correct title" duration="459"/>
    <testCase name="MainDashboardComponent should initialize with default language from localStorage (en)" duration="981"/>
    <testCase name="MainDashboardComponent should initialize with French language from localStorage" duration="820"/>
    <testCase name="MainDashboardComponent should initialize with default language when localStorage is empty" duration="1580"/>
    <testCase name="MainDashboardComponent should change language to French" duration="820"/>
    <testCase name="MainDashboardComponent should change language to English" duration="582"/>
    <testCase name="MainDashboardComponent should toggle sidenav" duration="770"/>
    <testCase name="MainDashboardComponent should close sidenav" duration="619"/>
    <testCase name="MainDashboardComponent should compute sidenav width for desktop when not collapsed" duration="728"/>
    <testCase name="MainDashboardComponent should compute sidenav width for desktop when collapsed" duration="1037"/>
    <testCase name="MainDashboardComponent should compute sidenav width for mobile" duration="540"/>
    <testCase name="MainDashboardComponent should compute sidenav mode for mobile" duration="622"/>
    <testCase name="MainDashboardComponent should compute sidenav mode for desktop" duration="670"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for mobile when not collapsed" duration="526"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for mobile when collapsed" duration="680"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for desktop when collapsed" duration="553"/>
    <testCase name="MainDashboardComponent should compute sidenav opened state for desktop when not collapsed" duration="400"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for light theme" duration="320"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for dark theme" duration="162"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for system theme" duration="252"/>
    <testCase name="MainDashboardComponent should return correct theme aria label for unknown theme" duration="436"/>
    <testCase name="MainDashboardComponent should return correct color theme aria label for Deep-Blue" duration="320"/>
    <testCase name="MainDashboardComponent should return correct color theme aria label for Green" duration="250"/>
    <testCase name="MainDashboardComponent should toggle fullscreen mode when not in fullscreen" duration="425"/>
    <testCase name="MainDashboardComponent should exit fullscreen mode when in fullscreen" duration="488"/>
    <testCase name="MainDashboardComponent should handle fullscreen error" duration="570"/>
    <testCase name="MainDashboardComponent should not attempt to exit fullscreen if exitFullscreen is not available" duration="591"/>
    <testCase name="MainDashboardComponent should handle invalid language code" duration="578"/>
    <testCase name="MainDashboardComponent should initialize services in constructor" duration="165"/>
    <testCase name="MainDashboardComponent should handle null responsiveService in error cases" duration="454"/>
    <testCase name="MainDashboardComponent should initialize sidenav" duration="607"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\mat-components\mat-components.component.spec.ts">
    <testCase name="MatComponentsComponent should create the component" duration="4112"/>
    <testCase name="MatComponentsComponent Initial State should initialize filterValues with default values" duration="2766"/>
    <testCase name="MatComponentsComponent Initial State should initialize roles array" duration="2530"/>
    <testCase name="MatComponentsComponent Initial State should initialize displayedColumns" duration="1928"/>
    <testCase name="MatComponentsComponent Initial State should initialize dataSource as MatTableDataSource" duration="1932"/>
    <testCase name="MatComponentsComponent Initial State should initialize allEmails and filteredEmails" duration="1383"/>
    <testCase name="MatComponentsComponent Constructor and Effect should set up effect and update dataSource" duration="1474"/>
    <testCase name="MatComponentsComponent Constructor and Effect should not update paginator in effect if paginator is undefined" duration="1876"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when global filter does not match" duration="1374"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when firstName filter does not match" duration="1356"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when email filter does not match" duration="2425"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when role filter does not match" duration="1084"/>
    <testCase name="MatComponentsComponent createFilterPredicate should return false when date range does not match" duration="1285"/>
    <testCase name="MatComponentsComponent createFilterPredicate should handle null fields in user data" duration="1034"/>
    <testCase name="MatComponentsComponent trackById should return user id" duration="1263"/>
    <testCase name="MatComponentsComponent Template Rendering should render toolbar with title and buttons" duration="1537"/>
    <testCase name="MatComponentsComponent Template Rendering should render error message when error exists" duration="1571"/>
    <testCase name="MatComponentsComponent Template Rendering should render loading spinner when isLoading is true" duration="1360"/>
    <testCase name="MatComponentsComponent Template Rendering should render filters when not loading" duration="1492"/>
    <testCase name="MatComponentsComponent Template Rendering should render table with correct columns and data" duration="1124"/>
    <testCase name="MatComponentsComponent Template Rendering should render paginator with correct options" duration="1275"/>
    <testCase name="MatComponentsComponent Template Rendering should trigger refreshTable on refresh button click" duration="1067"/>
    <testCase name="MatComponentsComponent Template Rendering should trigger deleteUser on delete button click" duration="1123"/>
    <testCase name="MatComponentsComponent Template Rendering should update global filter and call applyFilter" duration="929"/>
    <testCase name="MatComponentsComponent Template Rendering should update firstName filter and call applyFilter" duration="1305"/>
    <testCase name="MatComponentsComponent Template Rendering should update email filter and call applyFilter" duration="1001"/>
    <testCase name="MatComponentsComponent Template Rendering should update role filter and call applyFilter" duration="993"/>
    <testCase name="MatComponentsComponent Template Rendering should update date range filter and call applyFilter" duration="1279"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\pincodes.component.spec.ts">
    <testCase name="PincodesComponent should create the component" duration="3408"/>
    <testCase name="PincodesComponent ngOnInit should subscribe to responsive service and update displayed columns" duration="1025"/>
    <testCase name="PincodesComponent ngOnInit should set displayed columns for desktop" duration="1195"/>
    <testCase name="PincodesComponent ngOnInit should set displayed columns for tablet" duration="818"/>
    <testCase name="PincodesComponent ngOnInit should set displayed columns for mobile" duration="878"/>
    <testCase name="PincodesComponent ngOnDestroy should unsubscribe from breakpoint subscription" duration="1286"/>
    <testCase name="PincodesComponent ngOnDestroy should handle undefined subscription" duration="1021"/>
    <testCase name="PincodesComponent updateDisplayedColumns should set columns for mobile" duration="526"/>
    <testCase name="PincodesComponent updateDisplayedColumns should set columns for tablet" duration="960"/>
    <testCase name="PincodesComponent updateDisplayedColumns should set columns for desktop" duration="885"/>
    <testCase name="PincodesComponent refreshTable should reset table state and reload data" duration="1544"/>
    <testCase name="PincodesComponent openAddPincodeDialog should open dialog with correct width for mobile" duration="1494"/>
    <testCase name="PincodesComponent openAddPincodeDialog should open dialog with correct width for tablet" duration="704"/>
    <testCase name="PincodesComponent openAddPincodeDialog should open dialog with correct width for desktop" duration="566"/>
    <testCase name="PincodesComponent openAddPincodeDialog should add pincode after dialog closes with result" duration="537"/>
    <testCase name="PincodesComponent openAddPincodeDialog should not add pincode if dialog closes without result" duration="640"/>
    <testCase name="PincodesComponent startEdit should open edit dialog with correct pincode and width" duration="682"/>
    <testCase name="PincodesComponent startEdit should update pincode after dialog closes with result" duration="727"/>
    <testCase name="PincodesComponent startEdit should not update pincode if dialog closes without result" duration="989"/>
    <testCase name="PincodesComponent onSearchQueryChange should update search query" duration="705"/>
    <testCase name="PincodesComponent onPageChange should change page and clear selected pincodes" duration="540"/>
    <testCase name="PincodesComponent sortColumn should sort by field and direction" duration="449"/>
    <testCase name="PincodesComponent togglePincode should add pincode to selectedPincodes if not selected" duration="720"/>
    <testCase name="PincodesComponent togglePincode should remove pincode from selectedPincodes if selected" duration="580"/>
    <testCase name="PincodesComponent isSelected should return true if pincode is selected" duration="849"/>
    <testCase name="PincodesComponent isSelected should return false if pincode is not selected" duration="737"/>
    <testCase name="PincodesComponent toggleAllPincodes should select all pincodes if checked" duration="806"/>
    <testCase name="PincodesComponent toggleAllPincodes should clear selected pincodes if unchecked" duration="723"/>
    <testCase name="PincodesComponent isAllSelected should return true if all pincodes are selected" duration="427"/>
    <testCase name="PincodesComponent isAllSelected should return false if not all pincodes are selected" duration="671"/>
    <testCase name="PincodesComponent isAllSelected should return false if no pincodes are available" duration="740"/>
    <testCase name="PincodesComponent deleteSelectedPincodes should delete selected pincodes and clear selection" duration="401"/>
    <testCase name="PincodesComponent getPageNumbers should return page numbers for desktop" duration="442"/>
    <testCase name="PincodesComponent getPageNumbers should return page numbers for tablet" duration="580"/>
    <testCase name="PincodesComponent getPageNumbers should return page numbers for mobile" duration="582"/>
    <testCase name="PincodesComponent getPageNumbers should adjust start page when near end" duration="574"/>
    <testCase name="PincodesComponent getPageNumbers should return empty array if no pages" duration="653"/>
    <testCase name="PincodesComponent trackById should return pincode id" duration="512"/>
    <testCase name="PincodesComponent template coverage should render loading spinner when isLoading is true" duration="522"/>
    <testCase name="PincodesComponent template coverage should render error message when error exists" duration="710"/>
    <testCase name="PincodesComponent template coverage should disable delete button when no pincodes are selected" duration="704"/>
    <testCase name="PincodesComponent template coverage should enable delete button when pincodes are selected" duration="474"/>
    <testCase name="PincodesComponent template coverage should show indeterminate checkbox state" duration="1015"/>
    <testCase name="PincodesComponent template coverage should show no pages message when no pages available" duration="473"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\app.config.spec.ts">
    <testCase name="AppConfig HttpLoaderFactory should return a TranslateHttpLoader instance" duration="5"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\dashboard\service-provider\service-provider.component.spec.ts">
    <testCase name="ServiceProviderComponent should create" duration="932"/>
    <testCase name="ServiceProviderComponent should initialize form and countries" duration="510"/>
    <testCase name="ServiceProviderComponent should patch form with provider data" duration="539"/>
    <testCase name="ServiceProviderComponent should set language from localStorage on init" duration="271"/>
    <testCase name="ServiceProviderComponent should set default language to en if no lang in localStorage" duration="304"/>
    <testCase name="ServiceProviderComponent should update responsiveClass based on breakpoint" duration="163"/>
    <testCase name="ServiceProviderComponent should save valid new provider" duration="517"/>
    <testCase name="ServiceProviderComponent should save valid new provider with generated ID" duration="610"/>
    <testCase name="ServiceProviderComponent should handle invalid form in saveProvider" duration="210"/>
    <testCase name="ServiceProviderComponent should handle localStorage error in saveProvider" duration="439"/>
    <testCase name="ServiceProviderComponent should handle invalid localStorage data in saveProvider" duration="174"/>
    <testCase name="ServiceProviderComponent should update existing provider" duration="284"/>
    <testCase name="ServiceProviderComponent should handle provider ID not found" duration="378"/>
    <testCase name="ServiceProviderComponent should close popup" duration="338"/>
    <testCase name="ServiceProviderComponent should cancel form and close popup" duration="259"/>
    <testCase name="ServiceProviderComponent should cancel form without closing popup" duration="259"/>
    <testCase name="ServiceProviderComponent should initialize without provider data" duration="237"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\add-subcategories\add-subcategories.component.spec.ts">
    <testCase name="AddSubcategoriesComponent should create the component" duration="659"/>
    <testCase name="AddSubcategoriesComponent should initialize the form with required fields" duration="668"/>
    <testCase name="AddSubcategoriesComponent should not close dialog when form is invalid in saveSubcategory" duration="618"/>
    <testCase name="AddSubcategoriesComponent should close dialog with form value when form is valid" duration="825"/>
    <testCase name="AddSubcategoriesComponent should mark all controls as touched when form is invalid" duration="544"/>
    <testCase name="AddSubcategoriesComponent should close dialog when cancel is called" duration="436"/>
    <testCase name="AddSubcategoriesComponent should trigger saveSubcategory on form submission" duration="477"/>
    <testCase name="AddSubcategoriesComponent should disable save button when form is invalid" duration="620"/>
    <testCase name="AddSubcategoriesComponent should enable save button when form is valid" duration="445"/>
    <testCase name="AddSubcategoriesComponent should show validation errors for required fields when form is submitted" duration="587"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\app.routes.spec.ts">
    <testCase name="App Routes should define routes with correct configurations" duration="94"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\user\user.component.spec.ts">
    <testCase name="UserComponent should create the component" duration="699"/>
    <testCase name="UserComponent should initialize with correct default properties" duration="314"/>
    <testCase name="UserComponent should have correct constructor injections" duration="332"/>
    <testCase name="UserComponent should render avatar when showAvatar is true and avatar is set" duration="168"/>
    <testCase name="UserComponent should render icon when showAvatar is false" duration="219"/>
    <testCase name="UserComponent should render icon when user.avatar is falsy" duration="233"/>
    <testCase name="UserComponent should apply correct status class for online" duration="277"/>
    <testCase name="UserComponent should apply correct status class for away" duration="255"/>
    <testCase name="UserComponent should apply correct status class for busy" duration="285"/>
    <testCase name="UserComponent should apply correct status class for not-visible" duration="231"/>
    <testCase name="UserComponent should update user status to online" duration="454"/>
    <testCase name="UserComponent should update user status to away" duration="345"/>
    <testCase name="UserComponent should update user status to busy" duration="248"/>
    <testCase name="UserComponent should update user status to not-visible" duration="234"/>
    <testCase name="UserComponent should trigger updateUserStatus when status menu item is clicked" duration="166"/>
    <testCase name="UserComponent should call signOut and navigate to login via direct method call" duration="176"/>
    <testCase name="UserComponent should call signOut and navigate to login via menu click" duration="325"/>
    <testCase name="UserComponent should render divider" duration="286"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\add-categories\add-categories.component.spec.ts">
    <testCase name="AddCategoriesComponent should create the component" duration="921"/>
    <testCase name="AddCategoriesComponent should initialize the form with required fields" duration="514"/>
    <testCase name="AddCategoriesComponent should initialize categoryForm with empty values when no category is provided" duration="335"/>
    <testCase name="AddCategoriesComponent should initialize categoryForm with provided category data" duration="525"/>
    <testCase name="AddCategoriesComponent should not close dialog when form is invalid in saveCategory" duration="385"/>
    <testCase name="AddCategoriesComponent should close dialog with form value when form is valid" duration="427"/>
    <testCase name="AddCategoriesComponent should mark all controls as touched when form is invalid" duration="260"/>
    <testCase name="AddCategoriesComponent should close dialog when cancel is called" duration="410"/>
    <testCase name="AddCategoriesComponent should trigger saveCategory on form submission" duration="541"/>
    <testCase name="AddCategoriesComponent should disable save button when form is invalid" duration="347"/>
    <testCase name="AddCategoriesComponent should enable save button when form is valid" duration="576"/>
    <testCase name="AddCategoriesComponent should show validation errors for required fields when form is submitted" duration="682"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\custom-sidenav-2\custom-sidenav-2.component.spec.ts">
    <testCase name="CustomSidenav2Component should create" duration="354"/>
    <testCase name="CustomSidenav2Component collapsed input setter should update sideNavCollapsed signal with true value" duration="148"/>
    <testCase name="CustomSidenav2Component collapsed input setter should update sideNavCollapsed signal with false value" duration="147"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should update menuItems when item has subItems" duration="91"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should not update menuItems when item has no subItems" duration="92"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should collapse other items when toggling one" duration="127"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should handle empty subItems array" duration="179"/>
    <testCase name="CustomSidenav2Component toggleSubMenu should handle undefined subItems" duration="146"/>
    <testCase name="CustomSidenav2Component should initialize with correct menu items" duration="166"/>
    <testCase name="CustomSidenav2Component should hide labels when collapsed and not mobile" duration="173"/>
    <testCase name="CustomSidenav2Component should show labels when collapsed and mobile" duration="231"/>
    <testCase name="CustomSidenav2Component should not show sub-items when collapsed and not mobile" duration="360"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\users\add-user\add-user.component.spec.ts">
    <testCase name="AddUserComponent should create the component" duration="470"/>
    <testCase name="AddUserComponent should initialize form and set title to &quot;Add User&quot; when userId is 0" duration="111"/>
    <testCase name="AddUserComponent should initialize form and set title to &quot;Add User&quot; when data is undefined" duration="119"/>
    <testCase name="AddUserComponent should initialize form and set title to &quot;Add User&quot; when userId is undefined" duration="172"/>
    <testCase name="AddUserComponent should set edit mode and populate form when userId is provided and user exists" duration="130"/>
    <testCase name="AddUserComponent should show error and close dialog when userId is provided but user is not found" duration="136"/>
    <testCase name="AddUserComponent should show error when form is invalid in saveUser" duration="111"/>
    <testCase name="AddUserComponent should add user and show success toast when form is valid in add mode" duration="77"/>
    <testCase name="AddUserComponent should update user and show success toast when form is valid in edit mode" duration="137"/>
    <testCase name="AddUserComponent should show error toast and close dialog when addUser throws an error" duration="133"/>
    <testCase name="AddUserComponent should show error toast and close dialog when updateUser throws an error" duration="103"/>
    <testCase name="AddUserComponent should close dialog when closePopup is called" duration="113"/>
    <testCase name="AddUserComponent should trigger saveUser on form submission" duration="219"/>
    <testCase name="AddUserComponent should trigger closePopup on close button click" duration="147"/>
    <testCase name="AddUserComponent should apply dark-theme class when darkModeService.isDarkMode returns true" duration="230"/>
    <testCase name="AddUserComponent should not apply dark-theme class when darkModeService.isDarkMode returns false" duration="238"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\add-pincodes\add-pincodes.component.spec.ts">
    <testCase name="AddPincodesComponent should create the component" duration="639"/>
    <testCase name="AddPincodesComponent should initialize formPincode with data.pincode if provided" duration="193"/>
    <testCase name="AddPincodesComponent should not close dialog if form is invalid in savePincode" duration="263"/>
    <testCase name="AddPincodesComponent should not close dialog if isFormInvalid returns true in savePincode" duration="224"/>
    <testCase name="AddPincodesComponent should close dialog with formPincode data if form is valid" duration="229"/>
    <testCase name="AddPincodesComponent should return true for isFormInvalid if any field is missing or invalid" duration="231"/>
    <testCase name="AddPincodesComponent should close dialog without data when cancel is called" duration="202"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\app.component.spec.ts">
    <testCase name="AppComponent should create the app" duration="107"/>
    <testCase name="AppComponent should have router-outlet in the template" duration="36"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\login\auth.store.spec.ts">
    <testCase name="AuthStore Initial State and Signals should initialize with default state" duration="84"/>
    <testCase name="AuthStore onInit Hook should load auth data from localStorage on init" duration="47"/>
    <testCase name="AuthStore onInit Hook should not update state if no auth data in localStorage" duration="42"/>
    <testCase name="AuthStore login Method should login successfully and update state" duration="19"/>
    <testCase name="AuthStore login Method should handle 401 error during login" duration="21"/>
    <testCase name="AuthStore login Method should handle error with error.error.message during login" duration="14"/>
    <testCase name="AuthStore login Method should handle generic error during login" duration="15"/>
    <testCase name="AuthStore login Method should handle error with no message during login" duration="29"/>
    <testCase name="AuthStore login Method should set isLoading to true before HTTP request" duration="13"/>
    <testCase name="AuthStore signup Method should signup successfully and update state" duration="21"/>
    <testCase name="AuthStore signup Method should handle error with error.error.message during signup" duration="28"/>
    <testCase name="AuthStore signup Method should handle error with error.message during signup" duration="26"/>
    <testCase name="AuthStore signup Method should handle default error during signup" duration="15"/>
    <testCase name="AuthStore signup Method should set isLoading to true before HTTP request" duration="17"/>
    <testCase name="AuthStore signout Method should sign out successfully and clear state" duration="28"/>
    <testCase name="AuthStore signout Method should handle error during signout" duration="121"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\dashboard-selector\dashboard-selector.component.spec.ts">
    <testCase name="DashboardSelectorComponent should create" duration="466"/>
    <testCase name="DashboardSelectorComponent should navigate to main-dashboard when navigateToDashboard1 is called" duration="152"/>
    <testCase name="DashboardSelectorComponent should navigate to main-dashboard-2 when navigateToDashboard2 is called" duration="208"/>
    <testCase name="DashboardSelectorComponent should render the title correctly" duration="136"/>
    <testCase name="DashboardSelectorComponent should render two mat-card elements" duration="108"/>
    <testCase name="DashboardSelectorComponent should render Dashboard 1 card with correct content" duration="133"/>
    <testCase name="DashboardSelectorComponent should render Dashboard 2 card with correct content" duration="221"/>
    <testCase name="DashboardSelectorComponent should call navigateToDashboard1 when Dashboard 1 button is clicked" duration="133"/>
    <testCase name="DashboardSelectorComponent should call navigateToDashboard2 when Dashboard 2 button is clicked" duration="153"/>
    <testCase name="DashboardSelectorComponent should have correct classes on the container div" duration="167"/>
    <testCase name="DashboardSelectorComponent should have correct classes on the grid div" duration="164"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\business\list-businesses\list-businesses.component.spec.ts">
    <testCase name="ListBusinessesComponent should create the component" duration="354"/>
    <testCase name="ListBusinessesComponent Initial State should initialize with businesses from BusinessStore" duration="113"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should render table layout when isDesktop is true" duration="205"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should render table layout when isTablet is true" duration="107"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should display business data in table rows" duration="125"/>
    <testCase name="ListBusinessesComponent Desktop and Tablet View should render delete button for each business" duration="98"/>
    <testCase name="ListBusinessesComponent Mobile View should render card layout when isMobile is true" duration="252"/>
    <testCase name="ListBusinessesComponent Mobile View should display business data in cards" duration="205"/>
    <testCase name="ListBusinessesComponent Mobile View should render delete button for each card" duration="175"/>
    <testCase name="ListBusinessesComponent deleteBusiness should call deleteBusiness on BusinessStore when confirmed" duration="89"/>
    <testCase name="ListBusinessesComponent deleteBusiness should not call deleteBusiness if confirmation is cancelled" duration="80"/>
    <testCase name="ListBusinessesComponent Dark Mode Integration should inject DarkModeService" duration="167"/>
    <testCase name="ListBusinessesComponent Dark Mode Integration should apply dark mode if enabled" duration="137"/>
    <testCase name="ListBusinessesComponent Responsive Behavior should not render table or cards when businesses is empty" duration="161"/>
    <testCase name="ListBusinessesComponent Responsive Behavior should render table when both isDesktop and isTablet are false but isMobile is false" duration="115"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\login\auth.service.spec.ts">
    <testCase name="AuthService should be created" duration="53"/>
    <testCase name="AuthService login should call authStore.login with credentials" duration="38"/>
    <testCase name="AuthService login should handle different credentials" duration="23"/>
    <testCase name="AuthService signup should call authStore.signup with user data" duration="24"/>
    <testCase name="AuthService signup should handle different user data" duration="23"/>
    <testCase name="AuthService signout should call authStore.signout" duration="34"/>
    <testCase name="AuthService getUser should return authStore.user signal" duration="27"/>
    <testCase name="AuthService getIsAuthenticated should return authStore.isAuthenticated signal" duration="21"/>
    <testCase name="AuthService getIsLoading should return authStore.isLoading signal" duration="28"/>
    <testCase name="AuthService error should return authStore.error signal" duration="23"/>
    <testCase name="AuthService error should handle non-null error" duration="48"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\categories.service.spec.ts">
    <testCase name="CategoriesService should be created" duration="43"/>
    <testCase name="CategoriesService should return categories from store" duration="22"/>
    <testCase name="CategoriesService should return filteredCategories from store" duration="17"/>
    <testCase name="CategoriesService should return paginatedCategories from store" duration="20"/>
    <testCase name="CategoriesService should return totalPages from store" duration="18"/>
    <testCase name="CategoriesService should return currentPage from store" duration="14"/>
    <testCase name="CategoriesService should return pageSize from store" duration="21"/>
    <testCase name="CategoriesService should return isLoading from store" duration="24"/>
    <testCase name="CategoriesService should return error from store" duration="29"/>
    <testCase name="CategoriesService should call loadCategories on store" duration="40"/>
    <testCase name="CategoriesService should call addCategory on store and return result" duration="21"/>
    <testCase name="CategoriesService should handle addCategory error" duration="85"/>
    <testCase name="CategoriesService should call updateCategory on store" duration="33"/>
    <testCase name="CategoriesService should handle updateCategory error" duration="32"/>
    <testCase name="CategoriesService should call deleteCategory on store" duration="15"/>
    <testCase name="CategoriesService should handle deleteCategory error" duration="21"/>
    <testCase name="CategoriesService should call setPage on store" duration="14"/>
    <testCase name="CategoriesService should call setPageSize on store" duration="24"/>
    <testCase name="CategoriesService should call setSearchQuery on store" duration="25"/>
    <testCase name="CategoriesService should call sortCategories on store" duration="17"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\business\store\business.store.spec.ts">
    <testCase name="BusinessStore should be created" duration="82"/>
    <testCase name="BusinessStore initial state should have initial state" duration="33"/>
    <testCase name="BusinessStore loadBusinesses should load businesses from localStorage" duration="29"/>
    <testCase name="BusinessStore loadBusinesses should handle empty localStorage" duration="19"/>
    <testCase name="BusinessStore loadBusinesses should handle parsing error" duration="18"/>
    <testCase name="BusinessStore addBusiness should add a new business" duration="18"/>
    <testCase name="BusinessStore addBusiness should handle error when adding business" duration="35"/>
    <testCase name="BusinessStore updateBusiness should update an existing business" duration="22"/>
    <testCase name="BusinessStore updateBusiness should handle business not found" duration="37"/>
    <testCase name="BusinessStore updateBusiness should handle storage error" duration="34"/>
    <testCase name="BusinessStore deleteBusiness should delete a business" duration="42"/>
    <testCase name="BusinessStore deleteBusiness should handle storage error" duration="20"/>
    <testCase name="BusinessStore deleteBusiness should not fail when deleting non-existent business" duration="15"/>
    <testCase name="BusinessStore getBusiness should get a business by id" duration="15"/>
    <testCase name="BusinessStore getBusiness should return undefined for non-existent id" duration="18"/>
    <testCase name="BusinessStore getBusiness should set error if something goes wrong" duration="17"/>
    <testCase name="BusinessStore businessCount should return correct count of businesses" duration="32"/>
    <testCase name="BusinessStore onInit should load businesses on initialization" duration="44"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\services\dark-mode.service.spec.ts">
    <testCase name="DarkModeService Initialization should initialize with system theme by default" duration="36"/>
    <testCase name="DarkModeService Initialization should initialize with saved theme from localStorage" duration="20"/>
    <testCase name="DarkModeService Initialization should set up event listener for system theme changes" duration="44"/>
    <testCase name="DarkModeService selectedTheme should return the correct theme object for light theme" duration="22"/>
    <testCase name="DarkModeService selectedTheme should return the correct theme object for dark theme" duration="14"/>
    <testCase name="DarkModeService selectedTheme should return the correct theme object for system theme" duration="17"/>
    <testCase name="DarkModeService isDarkMode should return false for light theme" duration="13"/>
    <testCase name="DarkModeService isDarkMode should return true for dark theme" duration="19"/>
    <testCase name="DarkModeService isDarkMode should return system preference for system theme (dark)" duration="14"/>
    <testCase name="DarkModeService isDarkMode should return system preference for system theme (light)" duration="19"/>
    <testCase name="DarkModeService isDarkMode should handle missing window.matchMedia for system theme" duration="20"/>
    <testCase name="DarkModeService setTheme should set light theme and update DOM" duration="14"/>
    <testCase name="DarkModeService setTheme should set dark theme and update DOM" duration="19"/>
    <testCase name="DarkModeService setTheme should set system theme and update DOM based on system preference (dark)" duration="18"/>
    <testCase name="DarkModeService setTheme should set system theme and update DOM based on system preference (light)" duration="24"/>
    <testCase name="DarkModeService getThemes should return the list of themes" duration="10"/>
    <testCase name="DarkModeService System Theme Change Listener should apply theme when system preference changes in system mode" duration="21"/>
    <testCase name="DarkModeService System Theme Change Listener should not apply theme when system preference changes in non-system mode" duration="19"/>
    <testCase name="DarkModeService applyTheme should apply dark theme classes and attributes" duration="18"/>
    <testCase name="DarkModeService applyTheme should apply light theme classes and attributes" duration="19"/>
    <testCase name="DarkModeService applyTheme should apply system theme based on dark preference" duration="24"/>
    <testCase name="DarkModeService applyTheme should apply system theme based on light preference" duration="26"/>
    <testCase name="DarkModeService isVisible should return true indicating theme toggle is visible" duration="19"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\mat-components\mat-components.store.spec.ts">
    <testCase name="UserStore should be created" duration="265"/>
    <testCase name="UserStore initial state should initialize with default state" duration="65"/>
    <testCase name="UserStore loadUsers should load users from localStorage if available" duration="42"/>
    <testCase name="UserStore loadUsers should load users from API if localStorage is empty" duration="31"/>
    <testCase name="UserStore loadUsers should handle API error" duration="218"/>
    <testCase name="UserStore addUser should add a new user" duration="25"/>
    <testCase name="UserStore addUser should handle error when adding user" duration="37"/>
    <testCase name="UserStore addUser should handle null/undefined fields when adding user" duration="38"/>
    <testCase name="UserStore updateUser should update an existing user" duration="40"/>
    <testCase name="UserStore updateUser should handle error when updating user" duration="58"/>
    <testCase name="UserStore updateUser should handle null/undefined fields when updating user" duration="33"/>
    <testCase name="UserStore deleteUser should delete a user" duration="32"/>
    <testCase name="UserStore deleteUser should handle error when deleting user" duration="21"/>
    <testCase name="UserStore Computed Signals should filter users based on search query" duration="20"/>
    <testCase name="UserStore Computed Signals should sort users by firstName" duration="175"/>
    <testCase name="UserStore Computed Signals should sort users by createdDate" duration="32"/>
    <testCase name="UserStore Computed Signals should compute unique first names" duration="36"/>
    <testCase name="UserStore Computed Signals should compute unique emails" duration="46"/>
    <testCase name="UserStore Computed Signals should compute total records" duration="22"/>
    <testCase name="UserStore Computed Signals should compute total pages" duration="31"/>
    <testCase name="UserStore Computed Signals should compute paginated users" duration="22"/>
    <testCase name="UserStore Pagination and Sorting Methods should set page" duration="27"/>
    <testCase name="UserStore Pagination and Sorting Methods should set page size and reset current page" duration="39"/>
    <testCase name="UserStore Pagination and Sorting Methods should set search query and reset current page" duration="46"/>
    <testCase name="UserStore Pagination and Sorting Methods should sort users and reset current page" duration="41"/>
    <testCase name="UserStore Edge Cases should handle empty user list in computed signals" duration="38"/>
    <testCase name="UserStore Edge Cases should handle invalid sort field" duration="29"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\subcategories.store.spec.ts">
    <testCase name="SubcategoryStore should initialize with correct initial state" duration="160"/>
    <testCase name="SubcategoryStore should load subcategories from localStorage on init" duration="31"/>
    <testCase name="SubcategoryStore should handle loadSubcategories error" duration="144"/>
    <testCase name="SubcategoryStore should add a new subcategory" duration="40"/>
    <testCase name="SubcategoryStore should handle addSubcategory error" duration="32"/>
    <testCase name="SubcategoryStore should update an existing subcategory" duration="25"/>
    <testCase name="SubcategoryStore should handle updateSubcategory error with undefined message" duration="31"/>
    <testCase name="SubcategoryStore should handle deleteSubcategory error with undefined message" duration="38"/>
    <testCase name="SubcategoryStore should delete a subcategory" duration="31"/>
    <testCase name="SubcategoryStore should handle deleteSubcategory error" duration="43"/>
    <testCase name="SubcategoryStore should set page" duration="21"/>
    <testCase name="SubcategoryStore should set page size and reset current page" duration="26"/>
    <testCase name="SubcategoryStore should set search query and reset current page" duration="29"/>
    <testCase name="SubcategoryStore should sort subcategories and reset current page" duration="27"/>
    <testCase name="SubcategoryStore should set selected category ID and reset current page" duration="36"/>
    <testCase name="SubcategoryStore should filter subcategories by search query" duration="27"/>
    <testCase name="SubcategoryStore should filter subcategories by category ID" duration="40"/>
    <testCase name="SubcategoryStore should sort subcategories by name" duration="111"/>
    <testCase name="SubcategoryStore should sort subcategories by createdAt" duration="25"/>
    <testCase name="SubcategoryStore should paginate subcategories" duration="24"/>
    <testCase name="SubcategoryStore should return empty paginated subcategories when no data" duration="31"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\categories\categories.store.spec.ts">
    <testCase name="CategoryStore should initialize with correct initial state" duration="256"/>
    <testCase name="CategoryStore should load categories from localStorage on init" duration="47"/>
    <testCase name="CategoryStore should handle loadCategories error" duration="176"/>
    <testCase name="CategoryStore should handle loadCategories with empty localStorage" duration="22"/>
    <testCase name="CategoryStore should add a new category" duration="51"/>
    <testCase name="CategoryStore should handle addCategory error" duration="37"/>
    <testCase name="CategoryStore should update an existing category" duration="46"/>
    <testCase name="CategoryStore should handle updateCategory with no localStorage data" duration="20"/>
    <testCase name="CategoryStore should delete a category" duration="24"/>
    <testCase name="CategoryStore should handle deleteCategory with no localStorage data" duration="16"/>
    <testCase name="CategoryStore should set page" duration="27"/>
    <testCase name="CategoryStore should set page size and reset current page" duration="45"/>
    <testCase name="CategoryStore should set search query and reset current page" duration="28"/>
    <testCase name="CategoryStore should sort categories and reset current page" duration="19"/>
    <testCase name="CategoryStore should filter categories by search query" duration="41"/>
    <testCase name="CategoryStore should sort categories by name" duration="239"/>
    <testCase name="CategoryStore should sort categories by createdAt" duration="90"/>
    <testCase name="CategoryStore should sort categories by modifiedAt in descending order" duration="56"/>
    <testCase name="CategoryStore should paginate categories" duration="16"/>
    <testCase name="CategoryStore should return empty paginated categories when no data" duration="18"/>
    <testCase name="CategoryStore should filter categories by icon" duration="29"/>
    <testCase name="CategoryStore should filter categories by comments" duration="28"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\nav.component.spec.ts">
    <testCase name="NavComponent should create the component" duration="744"/>
    <testCase name="NavComponent should bind isAuthenticated to authService.getIsAuthenticated" duration="168"/>
    <testCase name="NavComponent should call authService.signout when signout is called" duration="122"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\services\theme\theme.service.spec.ts">
    <testCase name="ThemeService Initialization should initialize with deep-blue theme" duration="155"/>
    <testCase name="ThemeService Initialization should remove all theme classes during initialization" duration="129"/>
    <testCase name="ThemeService getThemes should return the list of themes" duration="145"/>
    <testCase name="ThemeService setTheme should set theme to green and apply light theme class when not in dark mode" duration="34"/>
    <testCase name="ThemeService setTheme should set theme to purple and apply dark theme class when in dark mode" duration="46"/>
    <testCase name="ThemeService setTheme should not change theme if themeId is invalid" duration="25"/>
    <testCase name="ThemeService applyCurrentTheme should apply light theme class when not in dark mode" duration="44"/>
    <testCase name="ThemeService applyCurrentTheme should apply dark theme class when in dark mode" duration="30"/>
    <testCase name="ThemeService Effect should reapply theme when dark mode changes" duration="38"/>
    <testCase name="ThemeService Effect should call applyCurrentTheme when effect is triggered" duration="69"/>
    <testCase name="ThemeService Effect should trigger applyCurrentTheme when theme changes" duration="26"/>
    <testCase name="ThemeService Local Storage should load theme from localStorage on initialization" duration="68"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\pincodes.store.spec.ts">
    <testCase name="PincodeStore should initialize with correct initial state" duration="125"/>
    <testCase name="PincodeStore should load pincodes from localStorage on init" duration="35"/>
    <testCase name="PincodeStore should load pincodes from API when localStorage is empty" duration="23"/>
    <testCase name="PincodeStore should handle loadPincodes error" duration="13"/>
    <testCase name="PincodeStore should add a new pincode" duration="24"/>
    <testCase name="PincodeStore should handle addPincode error" duration="58"/>
    <testCase name="PincodeStore should update an existing pincode" duration="32"/>
    <testCase name="PincodeStore should handle updatePincode error" duration="28"/>
    <testCase name="PincodeStore should handle updatePincode error with default message" duration="48"/>
    <testCase name="PincodeStore should update pincode when localStorage is empty" duration="52"/>
    <testCase name="PincodeStore should delete a pincode" duration="21"/>
    <testCase name="PincodeStore should handle deletePincode error" duration="16"/>
    <testCase name="PincodeStore should handle deletePincode error with default message" duration="16"/>
    <testCase name="PincodeStore should delete pincode when localStorage is empty" duration="21"/>
    <testCase name="PincodeStore should set page" duration="19"/>
    <testCase name="PincodeStore should set page size and reset current page" duration="15"/>
    <testCase name="PincodeStore should set search query and reset current page" duration="16"/>
    <testCase name="PincodeStore should sort pincodes and reset current page" duration="28"/>
    <testCase name="PincodeStore should filter pincodes by search query" duration="19"/>
    <testCase name="PincodeStore should filter pincodes by pincode" duration="12"/>
    <testCase name="PincodeStore should sort pincodes by officeName ascending" duration="75"/>
    <testCase name="PincodeStore should sort pincodes by officeName descending" duration="16"/>
    <testCase name="PincodeStore should paginate pincodes" duration="17"/>
    <testCase name="PincodeStore should return empty paginated pincodes when no data" duration="20"/>
    <testCase name="PincodeStore should handle null or undefined fields in pincode during filtering" duration="16"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\users\store\user-store.spec.ts">
    <testCase name="UserStore Initial State should initialize with default state" duration="676"/>
    <testCase name="UserStore Computed Properties should compute users correctly" duration="42"/>
    <testCase name="UserStore Computed Properties should compute isLoading correctly" duration="41"/>
    <testCase name="UserStore loadUsers should load users from local storage if available" duration="78"/>
    <testCase name="UserStore loadUsers should load users from API if local storage is empty" duration="79"/>
    <testCase name="UserStore loadUsers should handle API error" duration="209"/>
    <testCase name="UserStore addUser should add a new user" duration="26"/>
    <testCase name="UserStore addUser should handle error when adding user" duration="34"/>
    <testCase name="UserStore updateUser should update an existing user" duration="21"/>
    <testCase name="UserStore updateUser should handle error when updating user" duration="44"/>
    <testCase name="UserStore deleteUser should delete a user" duration="21"/>
    <testCase name="UserStore deleteUser should handle error when deleting user" duration="34"/>
    <testCase name="UserStore getUser should return a user by ID" duration="66"/>
    <testCase name="UserStore getUser should return undefined if user is not found" duration="40"/>
    <testCase name="UserStore getUser should handle error when fetching user" duration="24"/>
    <testCase name="UserStore onInit Hook should call loadUsers on initialization" duration="41"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\pincodes\pincodes.service.spec.ts">
    <testCase name="PincodesService should be created" duration="31"/>
    <testCase name="PincodesService signals should expose pincodes signal" duration="14"/>
    <testCase name="PincodesService signals should expose filteredPincodes signal" duration="13"/>
    <testCase name="PincodesService signals should expose paginatedPincodes signal" duration="11"/>
    <testCase name="PincodesService signals should expose totalPages signal" duration="13"/>
    <testCase name="PincodesService signals should expose currentPage signal" duration="23"/>
    <testCase name="PincodesService signals should expose pageSize signal" duration="21"/>
    <testCase name="PincodesService signals should expose isLoading signal" duration="49"/>
    <testCase name="PincodesService signals should expose error signal" duration="13"/>
    <testCase name="PincodesService getPincodes should call loadPincodes and update pincodes" duration="24"/>
    <testCase name="PincodesService getPincodes should load pincodes from localStorage if available" duration="70"/>
    <testCase name="PincodesService addPincode should add a pincode and return it" duration="34"/>
    <testCase name="PincodesService updatePincode should update a pincode" duration="21"/>
    <testCase name="PincodesService deletePincode should delete a pincode" duration="19"/>
    <testCase name="PincodesService setPage should set the current page" duration="28"/>
    <testCase name="PincodesService setPageSize should set page size" duration="12"/>
    <testCase name="PincodesService setSearchQuery should set search query" duration="32"/>
    <testCase name="PincodesService sortPincodes should sort pincodes by field in ascending order" duration="29"/>
    <testCase name="PincodesService sortPincodes should sort pincodes by field in descending order" duration="27"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\auth.guard.spec.ts">
    <testCase name="AuthGuard should be created" duration="37"/>
    <testCase name="AuthGuard should allow navigation when user is authenticated" duration="19"/>
    <testCase name="AuthGuard should redirect to login when user is not authenticated" duration="18"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\services\responsive\responsive.service.spec.ts">
    <testCase name="ResponsiveService currentBreakpoint should return &quot;xsmall&quot; when XSmall breakpoint is matched" duration="63"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;small&quot; when Small breakpoint is matched" duration="13"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;medium&quot; when Medium breakpoint is matched" duration="12"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;large&quot; when Large breakpoint is matched" duration="10"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;xlarge&quot; when XLarge breakpoint is matched" duration="12"/>
    <testCase name="ResponsiveService currentBreakpoint should return &quot;xlarge&quot; when no breakpoints are matched" duration="11"/>
    <testCase name="ResponsiveService isMobile should return true when XSmall breakpoint is matched" duration="14"/>
    <testCase name="ResponsiveService isMobile should return false when XSmall breakpoint is not matched" duration="16"/>
    <testCase name="ResponsiveService isTablet should return true when Small breakpoint is matched" duration="9"/>
    <testCase name="ResponsiveService isTablet should return true when Medium breakpoint is matched" duration="12"/>
    <testCase name="ResponsiveService isTablet should return false when neither Small nor Medium breakpoints are matched" duration="9"/>
    <testCase name="ResponsiveService isDesktop should return true when Large breakpoint is matched" duration="10"/>
    <testCase name="ResponsiveService isDesktop should return true when XLarge breakpoint is matched" duration="10"/>
    <testCase name="ResponsiveService isDesktop should return false when neither Large nor XLarge breakpoints are matched" duration="25"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\dashboard-1\dashboard-1.component.spec.ts">
    <testCase name="Dashboard1Component should create" duration="133"/>
  </file>
  <file path="C:\Angular project-2\code-book-playwright\src\app\pages\subcategories\subcategories.service.spec.ts">
    <testCase name="SubcategoriesService should be created" duration="28"/>
    <testCase name="SubcategoriesService should initialize properties from subcategoryStore" duration="15"/>
    <testCase name="SubcategoriesService should call loadSubcategories on getSubcategories" duration="28"/>
    <testCase name="SubcategoriesService should call addSubcategory with subcategory data" duration="24"/>
    <testCase name="SubcategoriesService should call updateSubcategory with subcategory data" duration="21"/>
    <testCase name="SubcategoriesService should call deleteSubcategory with id" duration="11"/>
    <testCase name="SubcategoriesService should call setPage with page number" duration="15"/>
    <testCase name="SubcategoriesService should call setPageSize with page size" duration="9"/>
    <testCase name="SubcategoriesService should call setSearchQuery with query" duration="42"/>
    <testCase name="SubcategoriesService should call sortSubcategories with field and direction" duration="16"/>
    <testCase name="SubcategoriesService should call setSelectedCategoryId with categoryId" duration="17"/>
  </file>
</testExecutions>