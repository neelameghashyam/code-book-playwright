{
  "version": 3,
  "sources": ["src/app/pages/subcategories/subcategories.store.ts", "src/app/pages/subcategories/subcategories.service.ts", "src/app/pages/subcategories/add-subcategories/add-subcategories.component.ts", "src/app/pages/subcategories/add-subcategories/add-subcategories.component.html", "src/app/pages/subcategories/subcategories.component.ts", "src/app/pages/subcategories/subcategories.component.html"],
  "sourcesContent": ["import { patchState, signalStore, withComputed, withHooks, withMethods, withState } from '@ngrx/signals';\r\nimport { computed } from '@angular/core';\r\nimport { Subcategory } from './subcategories';\r\n\r\ninterface SubcategoryState {\r\n  subcategories: Subcategory[];\r\n  initialized: boolean;\r\n  error: string | null;\r\n  currentPage: number;\r\n  pageSize: number;\r\n  searchQuery: string;\r\n  isLoading: boolean;\r\n  sortField: string | null;\r\n  sortDirection: 'asc' | 'desc';\r\n  selectedCategoryId: number | null;\r\n}\r\n\r\nconst initialState: SubcategoryState = {\r\n  subcategories: [],\r\n  initialized: false,\r\n  error: null,\r\n  currentPage: 1,\r\n  pageSize: 10,\r\n  searchQuery: '',\r\n  isLoading: false,\r\n  sortField: null,\r\n  sortDirection: 'asc',\r\n  selectedCategoryId: null,\r\n};\r\n\r\nexport const SubcategoryStore = signalStore(\r\n  { providedIn: 'root' },\r\n  withState(initialState),\r\n  withComputed(({ subcategories, searchQuery, currentPage, pageSize, isLoading, error, sortField, sortDirection, selectedCategoryId }) => {\r\n    const filteredSubcategories = computed(() => {\r\n      let filtered = subcategories().filter(s =>\r\n        (selectedCategoryId() === null || s.categoryId === selectedCategoryId()) &&\r\n        ((String(s.name || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n         (String(s.icon || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n         (String(s.comments || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n         (String(s.CategoryName || '').toLowerCase().includes(searchQuery().toLowerCase())))\r\n      );\r\n\r\n      if (sortField()) {\r\n        filtered = filtered.sort((a, b) => {\r\n          const field = sortField() as keyof Subcategory;\r\n          if (field === 'createdAt' || field === 'modifiedAt') {\r\n            const dateA = new Date(a[field] || '').getTime();\r\n            const dateB = new Date(b[field] || '').getTime();\r\n            return sortDirection() === 'asc' ? dateA - dateB : dateB - dateA;\r\n          } else {\r\n            const valueA = String(a[field] || '').toLowerCase();\r\n            const valueB = String(b[field] || '').toLowerCase();\r\n            return sortDirection() === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\r\n          }\r\n        });\r\n      }\r\n\r\n      return filtered;\r\n    });\r\n\r\n    return {\r\n      subcategories: computed(() => subcategories()),\r\n      filteredSubcategories,\r\n      paginatedSubcategories: computed(() => {\r\n        const start = (currentPage() - 1) * pageSize();\r\n        return filteredSubcategories().slice(start, start + pageSize());\r\n      }),\r\n      totalPages: computed(() => Math.ceil(filteredSubcategories().length / pageSize())),\r\n      currentPage: computed(() => currentPage()),\r\n      pageSize: computed(() => pageSize()),\r\n      isLoading: computed(() => isLoading()),\r\n      error: computed(() => error()),\r\n      selectedCategoryId: computed(() => selectedCategoryId()),\r\n    };\r\n  }),\r\n  withMethods((store) => ({\r\n    loadSubcategories() {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('subcategories');\r\n        let subcategories: Subcategory[] = [];\r\n        if (localData) {\r\n          subcategories = JSON.parse(localData).map((s: Subcategory) => ({\r\n            ...s,\r\n            name: String(s.name || ''),\r\n            icon: String(s.icon || ''),\r\n            imageUrl: String(s.imageUrl || ''),\r\n            createdAt: String(s.createdAt || new Date().toISOString()),\r\n            modifiedAt: String(s.modifiedAt || new Date().toISOString()),\r\n            comments: String(s.comments || ''),\r\n            CategoryName: String(s.CategoryName || ''),\r\n            categoryId: Number(s.categoryId || 0),\r\n          }));\r\n        }\r\n        patchState(store, { subcategories, initialized: true, isLoading: false, error: null });\r\n      } catch (error: any) {\r\n        const errorMessage = error.message || 'Failed to load subcategories';\r\n        patchState(store, { error: errorMessage, isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    addSubcategory(subcategory: Omit<Subcategory, 'id' | 'createdAt' | 'modifiedAt'>) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const newSubcategory: Subcategory = {\r\n          ...subcategory,\r\n          id: Date.now(),\r\n          createdAt: new Date().toISOString(),\r\n          modifiedAt: new Date().toISOString(),\r\n          name: String(subcategory.name || ''),\r\n          icon: String(subcategory.icon || ''),\r\n          imageUrl: String(subcategory.imageUrl || ''),\r\n          comments: String(subcategory.comments || ''),\r\n          CategoryName: String(subcategory.CategoryName || ''),\r\n          categoryId: Number(subcategory.categoryId || 0),\r\n        };\r\n        const localData = localStorage.getItem('subcategories');\r\n        const subcategories = localData ? JSON.parse(localData) : [];\r\n        subcategories.push(newSubcategory);\r\n        localStorage.setItem('subcategories', JSON.stringify(subcategories));\r\n        patchState(store, {\r\n          subcategories: [...store.subcategories(), newSubcategory],\r\n          isLoading: false,\r\n          error: null,\r\n        });\r\n        return newSubcategory;\r\n      } catch (error: any) {\r\n        const errorMessage = error.message || 'Failed to add subcategory';\r\n        patchState(store, { error: errorMessage, isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    updateSubcategory(subcategory: Subcategory) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('subcategories');\r\n        if (localData) {\r\n          const subcategories = JSON.parse(localData);\r\n          const updatedSubcategories = subcategories.map((s: Subcategory) =>\r\n            s.id === subcategory.id\r\n              ? {\r\n                  ...subcategory,\r\n                  modifiedAt: new Date().toISOString(),\r\n                  name: String(subcategory.name || ''),\r\n                  icon: String(subcategory.icon || ''),\r\n                  imageUrl: String(subcategory.imageUrl || ''),\r\n                  comments: String(subcategory.comments || ''),\r\n                  CategoryName: String(subcategory.CategoryName || ''),\r\n                  categoryId: Number(subcategory.categoryId || 0),\r\n                }\r\n              : s\r\n          );\r\n          localStorage.setItem('subcategories', JSON.stringify(updatedSubcategories));\r\n          patchState(store, {\r\n            subcategories: store.subcategories().map(s =>\r\n              s.id === subcategory.id\r\n                ? {\r\n                    ...subcategory,\r\n                    modifiedAt: new Date().toISOString(),\r\n                    name: String(subcategory.name || ''),\r\n                    icon: String(subcategory.icon || ''),\r\n                    imageUrl: String(subcategory.imageUrl || ''),\r\n                    comments: String(subcategory.comments || ''),\r\n                    CategoryName: String(subcategory.CategoryName || ''),\r\n                    categoryId: Number(subcategory.categoryId || 0),\r\n                  }\r\n                : s\r\n            ),\r\n            isLoading: false,\r\n            error: null,\r\n          });\r\n        }\r\n      } catch (error: any) {\r\n        const errorMessage = error.message || 'Failed to update subcategory';\r\n        patchState(store, { error: errorMessage, isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    deleteSubcategory(id: number) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('subcategories');\r\n        if (localData) {\r\n          const subcategories = JSON.parse(localData);\r\n          const updatedSubcategories = subcategories.filter((s: Subcategory) => s.id !== id);\r\n          localStorage.setItem('subcategories', JSON.stringify(updatedSubcategories));\r\n          patchState(store, {\r\n            subcategories: store.subcategories().filter(s => s.id !== id),\r\n            isLoading: false,\r\n            error: null,\r\n          });\r\n        }\r\n      } catch (error: any) {\r\n        const errorMessage = error.message || 'Failed to delete subcategory';\r\n        patchState(store, { error: errorMessage, isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    setPage(page: number) {\r\n      patchState(store, { currentPage: page });\r\n    },\r\n    setPageSize(pageSize: number) {\r\n      patchState(store, { pageSize, currentPage: 1 });\r\n    },\r\n    setSearchQuery(query: string) {\r\n      patchState(store, { searchQuery: query, currentPage: 1 });\r\n    },\r\n    sortSubcategories(field: string | null, direction: 'asc' | 'desc') {\r\n      patchState(store, { sortField: field, sortDirection: direction, currentPage: 1 });\r\n    },\r\n    setSelectedCategoryId(categoryId: number | null) {\r\n      patchState(store, { selectedCategoryId: categoryId, currentPage: 1 });\r\n    },\r\n  })),\r\n  withHooks({\r\n    onInit(store) {\r\n      store.loadSubcategories();\r\n    },\r\n  })\r\n);", "import { Injectable, inject } from '@angular/core';\r\nimport { SubcategoryStore } from './subcategories.store';\r\nimport { Subcategory } from './subcategories';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class SubcategoriesService {\r\n  private subcategoryStore = inject(SubcategoryStore);\r\n\r\n  subcategories = this.subcategoryStore.subcategories;\r\n  filteredSubcategories = this.subcategoryStore.filteredSubcategories;\r\n  paginatedSubcategories = this.subcategoryStore.paginatedSubcategories;\r\n  totalPages = this.subcategoryStore.totalPages;\r\n  currentPage = this.subcategoryStore.currentPage;\r\n  pageSize = this.subcategoryStore.pageSize;\r\n  isLoading = this.subcategoryStore.isLoading;\r\n  error = this.subcategoryStore.error;\r\n  selectedCategoryId = this.subcategoryStore.selectedCategoryId;\r\n\r\n  getSubcategories() {\r\n    return this.subcategoryStore.loadSubcategories();\r\n  }\r\n\r\n  addSubcategory(subcategory: Omit<Subcategory, 'id' | 'createdAt' | 'modifiedAt'>) {\r\n    return this.subcategoryStore.addSubcategory(subcategory);\r\n  }\r\n\r\n  updateSubcategory(subcategory: Subcategory) {\r\n    return this.subcategoryStore.updateSubcategory(subcategory);\r\n  }\r\n\r\n  deleteSubcategory(id: number) {\r\n    return this.subcategoryStore.deleteSubcategory(id);\r\n  }\r\n\r\n  setPage(page: number) {\r\n    this.subcategoryStore.setPage(page);\r\n  }\r\n\r\n  setPageSize(pageSize: number) {\r\n    this.subcategoryStore.setPageSize(pageSize);\r\n  }\r\n\r\n  setSearchQuery(query: string) {\r\n    this.subcategoryStore.setSearchQuery(query);\r\n  }\r\n\r\n  sortSubcategories(field: string | null, direction: 'asc' | 'desc') {\r\n    this.subcategoryStore.sortSubcategories(field, direction);\r\n  }\r\n\r\n  setSelectedCategoryId(categoryId: number | null) {\r\n    this.subcategoryStore.setSelectedCategoryId(categoryId);\r\n  }\r\n}", "import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon'; // Fixed import\r\nimport { MAT_DIALOG_DATA, MatDialogRef } from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Subcategory } from '../subcategories';\r\n\r\n@Component({\r\n  selector: 'app-add-subcategories',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule, // Use ReactiveFormsModule instead of FormsModule\r\n    MatButtonModule,\r\n    MatIconModule, // Correct module for MatIcon\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n  ],\r\n  templateUrl: './add-subcategories.component.html',\r\n  styleUrls: ['./add-subcategories.component.scss'],\r\n})\r\nexport class AddSubcategoriesComponent implements OnInit {\r\n  subcategoryForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder, // Standard injection\r\n    public dialogRef: MatDialogRef<AddSubcategoriesComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { subcategory?: Subcategory; categoryId?: number; CategoryName?: string } = {}\r\n  ) {\r\n    this.subcategoryForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      icon: ['', Validators.required],\r\n      imageUrl: ['', Validators.required],\r\n      comments: [''],\r\n      categoryId: [this.data?.categoryId || 0, Validators.required],\r\n      CategoryName: [this.data?.CategoryName || '']\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.data?.subcategory) {\r\n      this.subcategoryForm.patchValue(this.data.subcategory);\r\n    }\r\n  }\r\n\r\n  saveSubcategory() {\r\n    if (this.subcategoryForm.invalid) {\r\n      this.subcategoryForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.dialogRef.close(this.subcategoryForm.value);\r\n  }\r\n\r\n  cancel() {\r\n    this.dialogRef.close();\r\n  }\r\n}", "<mat-card class=\"p-6 bg-white dark:bg-gray-800 shadow-3xl rounded-lg\">\r\n  <mat-card-header>\r\n    <button (click)=\"cancel()\" class=\"absolute top-0 right-0 flex justify-center items-center p-2 rounded-full hover:bg-gray-100\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-card-title class=\"flex justify-between items-center\">\r\n      <h2 class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\" style=\"font-family: 'Roboto, sans-serif';\">\r\n        {{ data?.subcategory ? 'Edit Subcategory' : 'Add Subcategory' }}\r\n      </h2>\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <form [formGroup]=\"subcategoryForm\" (ngSubmit)=\"saveSubcategory()\">\r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Category</mat-label>\r\n            <input matInput [value]=\"data?.CategoryName || ''\" disabled placeholder=\"Category Name\">\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Name</mat-label>\r\n            <input matInput formControlName=\"name\" required placeholder=\"Subcategory Name\">\r\n            <mat-error *ngIf=\"subcategoryForm.get('name')?.hasError('required') && subcategoryForm.get('name')?.touched\">\r\n              Subcategory Name is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Icon</mat-label>\r\n            <input matInput formControlName=\"icon\" required placeholder=\"Material Icon Name (e.g., star)\">\r\n            <mat-error *ngIf=\"subcategoryForm.get('icon')?.hasError('required') && subcategoryForm.get('icon')?.touched\">\r\n              Icon is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Image URL</mat-label>\r\n            <input matInput formControlName=\"imageUrl\" required placeholder=\"Image URL\">\r\n            <mat-error *ngIf=\"subcategoryForm.get('imageUrl')?.hasError('required') && subcategoryForm.get('imageUrl')?.touched\">\r\n              Image URL is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem] col-span-2\">\r\n          <mat-form-field>\r\n            <mat-label>Comments</mat-label>\r\n            <input matInput formControlName=\"comments\" placeholder=\"Comments\">\r\n          </mat-form-field>\r\n        </div>\r\n        <input type=\"hidden\" formControlName=\"categoryId\">\r\n        <input type=\"hidden\" formControlName=\"CategoryName\">\r\n      </div>\r\n      <div class=\"mt-4 flex justify-end gap-2\">\r\n        <button\r\n          mat-button\r\n          type=\"button\"\r\n          (click)=\"cancel()\"\r\n          class=\"bg-gray-300 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-400 transition\"\r\n          style=\"font-family: 'Roboto, sans-serif';\"\r\n          aria-label=\"Cancel subcategory form\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"subcategoryForm.invalid\"\r\n          class=\"hover:bg-blue-700 transition\"\r\n          style=\"font-family: 'Roboto, sans-serif';\"\r\n          [attr.aria-label]=\"data?.subcategory ? 'Update subcategory' : 'Save subcategory'\"\r\n        >\r\n          {{ data?.subcategory ? 'Update' : 'Save' }}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>", "import { Component, inject, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { SubcategoriesService } from './subcategories.service';\r\nimport { Subcategory } from './subcategories';\r\nimport { CategoriesService } from '../categories/categories.service';\r\nimport { Category } from '../categories/category';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AddSubcategoriesComponent } from './add-subcategories/add-subcategories.component';\r\nimport { DarkModeService } from '../../services/dark-mode.service';\r\nimport { ResponsiveService } from '../../services/responsive/responsive.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-subcategories',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatIcon,\r\n    MatDialogModule,\r\n    MatProgressSpinnerModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatSelectModule,\r\n  ],\r\n  templateUrl: './subcategories.component.html',\r\n  styleUrls: ['./subcategories.component.scss'],\r\n})\r\nexport class SubcategoriesComponent implements OnInit, OnDestroy {\r\n  service = inject(SubcategoriesService);\r\n  categoryService = inject(CategoriesService);\r\n  dialog = inject(MatDialog);\r\n  responsive = inject(ResponsiveService);\r\n  darkModeService = inject(DarkModeService);\r\n\r\n  editingSubcategory: Subcategory | null = null;\r\n  selectedSubcategories: Subcategory[] = [];\r\n  displayedColumns: string[] = [];\r\n  sortField: string | null = null;\r\n  sortDirection: 'asc' | 'desc' = 'asc';\r\n  isMobile: boolean = false;\r\n  isTablet: boolean = false;\r\n  breakpointSubscription: Subscription | undefined;\r\n  categories: Category[] = [];\r\n  selectedCategoryId: number | null = null;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.breakpointSubscription = this.responsive.currentBreakpoint().subscribe(breakpoint => {\r\n      this.isMobile = breakpoint === 'xsmall';\r\n      this.isTablet = breakpoint === 'small' || breakpoint === 'medium';\r\n      this.updateDisplayedColumns();\r\n    });\r\n    this.darkModeService.applyTheme();\r\n    this.categoryService.getCategories();\r\n    this.categories = this.categoryService.categories();\r\n    this.service.getSubcategories();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.breakpointSubscription?.unsubscribe();\r\n  }\r\n\r\n  updateDisplayedColumns() {\r\n    if (this.isMobile) {\r\n      this.displayedColumns = ['name', 'icon', 'actions'];\r\n    } else if (this.isTablet) {\r\n      this.displayedColumns = ['select', 'name', 'icon', 'imageUrl', 'CategoryName', 'actions'];\r\n    } else {\r\n      this.displayedColumns = ['select', 'name', 'icon', 'imageUrl', 'CategoryName', 'createdAt', 'modifiedAt', 'comments', 'actions'];\r\n    }\r\n  }\r\n\r\n  onCategoryChange(categoryId: number | null) {\r\n    this.selectedCategoryId = categoryId;\r\n    this.service.setSelectedCategoryId(categoryId);\r\n    this.selectedSubcategories = [];\r\n  }\r\n\r\n  refreshTable() {\r\n    this.sortField = null;\r\n    this.sortDirection = 'asc';\r\n    this.service.sortSubcategories(null, 'asc');\r\n    this.service.setPage(1);\r\n    this.service.setSearchQuery('');\r\n    this.selectedSubcategories = [];\r\n    const searchInput = document.getElementById('searchSubcategories') as HTMLInputElement;\r\n    if (searchInput) {\r\n      searchInput.value = '';\r\n    }\r\n    this.service.getSubcategories();\r\n  }\r\n\r\n openAddSubcategoryDialog() {\r\n  if (!this.selectedCategoryId || !this.categories.find(c => c.id === this.selectedCategoryId)) {\r\n    console.warn('Please select a valid category.');\r\n    return;\r\n  }\r\n  const dialogWidth = this.isMobile ? '90vw' : this.isTablet ? '80vw' : '800px';\r\n  const category = this.categories.find(c => c.id === this.selectedCategoryId)!;\r\n  this.dialog.open(AddSubcategoriesComponent, {\r\n    width: dialogWidth,\r\n    maxWidth: '100vw',\r\n    data: { categoryId: this.selectedCategoryId, CategoryName: category.name }\r\n  }).afterClosed().subscribe(result => result && this.service.addSubcategory(result));\r\n}\r\n\r\nstartEdit(subcategory: Subcategory) {\r\n  this.editingSubcategory = { ...subcategory };\r\n  const dialogWidth = this.isMobile ? '90vw' : this.isTablet ? '80vw' : '800px';\r\n  this.dialog.open(AddSubcategoriesComponent, {\r\n    width: dialogWidth,\r\n    maxWidth: '100vw',\r\n    data: { subcategory: this.editingSubcategory, categoryId: subcategory.categoryId, CategoryName: subcategory.CategoryName }\r\n  }).afterClosed().subscribe(result => {\r\n    if (result) this.service.updateSubcategory(result as Subcategory);\r\n    this.editingSubcategory = null;\r\n  });\r\n}\r\n\r\n  onSearchQueryChange(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    this.service.setSearchQuery(inputElement.value);\r\n  }\r\n\r\n  onPageChange(event: any) {\r\n    this.service.setPage(event.page + 1);\r\n    this.selectedSubcategories = [];\r\n  }\r\n\r\n  sortColumn(field: string, direction: 'asc' | 'desc') {\r\n    this.sortField = field;\r\n    this.sortDirection = direction;\r\n    this.service.sortSubcategories(this.sortField, this.sortDirection);\r\n  }\r\n\r\n  toggleSubcategory(subcategory: Subcategory) {\r\n    const index = this.selectedSubcategories.findIndex(s => s.id === subcategory.id);\r\n    if (index === -1) {\r\n      this.selectedSubcategories.push(subcategory);\r\n    } else {\r\n      this.selectedSubcategories.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  isSelected(subcategory: Subcategory): boolean {\r\n    return this.selectedSubcategories.some(s => s.id === subcategory.id);\r\n  }\r\n\r\n  toggleAllSubcategories(checked: boolean) {\r\n    if (checked) {\r\n      this.selectedSubcategories = [...this.service.paginatedSubcategories()];\r\n    } else {\r\n      this.selectedSubcategories = [];\r\n    }\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    return this.service.paginatedSubcategories().length > 0 &&\r\n           this.service.paginatedSubcategories().every(subcategory => this.isSelected(subcategory));\r\n  }\r\n\r\n  deleteSelectedSubcategories() {\r\n    this.selectedSubcategories.forEach(subcategory => this.deleteSubcategory(subcategory.id));\r\n    this.selectedSubcategories = [];\r\n  }\r\n\r\n  deleteSubcategory(subcategoryId: number) {\r\n    this.service.deleteSubcategory(subcategoryId);\r\n  }\r\n\r\n  getPageNumbers(): number[] {\r\n    const totalPages = this.service.totalPages();\r\n    const currentPage = this.service.currentPage();\r\n    const maxPagesToShow = this.isMobile ? 3 : this.isTablet ? 4 : 5;\r\n    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n    if (endPage - startPage + 1 < maxPagesToShow) {\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    if (totalPages > 0) {\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pages.push(i);\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  trackById(index: number, subcategory: Subcategory): number {\r\n    return subcategory.id;\r\n  }\r\n}", "<mat-card class=\"shadow-3xl rounded-8\" style=\"font-family: 'Roboto, sans-serif';\">\r\n     <mat-form-field class=\"w-64 mx-auto block p-4\">\r\n  <mat-label>Category</mat-label>\r\n  <mat-select [(ngModel)]=\"selectedCategoryId\" (ngModelChange)=\"onCategoryChange($event)\" aria-label=\"Category\">\r\n    <mat-option [value]=\"null\">All</mat-option>\r\n    <mat-option *ngFor=\"let category of categories\" [value]=\"category.id\">{{ category.name }}</mat-option>\r\n  </mat-select>\r\n</mat-form-field>\r\n  <mat-card-header class=\"relative flex items-center justify-between flex-col md:flex-row gap-4\" style=\"background-color: #2c3e50; color: #f7f7f7; font-family: 'Roboto, sans-serif'; padding: 16px;\">\r\n    <mat-card-title class=\"flex items-center\">\r\n      <h2 class=\"text-20 font-semibold m-0\" style=\"font-family: 'Roboto, sans-serif';\">Subcategories</h2>\r\n    </mat-card-title>\r\n\r\n    <div class=\"flex items-center w-full md:w-1/3 gap-2\">\r\n     \r\n      <input\r\n        id=\"searchSubcategories\"\r\n        type=\"text\"\r\n        (input)=\"onSearchQueryChange($event)\"\r\n        placeholder=\"Search subcategories...\"\r\n        class=\"p-2 border rounded text-sm w-full focus:outline-none h-9\"\r\n        style=\"font-family: 'Roboto, sans-serif'; border-color: #ced4da; background-color: #fff;\"\r\n        aria-label=\"Search subcategories\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"flex gap-2\">\r\n      <button\r\n        mat-raised-button\r\n        class=\"px-4 py-2 text-14 flex items-center\"\r\n        (click)=\"deleteSelectedSubcategories()\"\r\n        [disabled]=\"!selectedSubcategories.length\"\r\n        aria-label=\"Delete selected subcategories\"\r\n        style=\"background-color: #dc3545; color: white; font-family: 'Roboto, sans-serif';\"\r\n      >\r\n        <mat-icon [style.color]=\"'#FFFFFF'\">delete</mat-icon> Delete\r\n      </button>\r\n      <button\r\n        mat-raised-button\r\n        class=\"px-4 py-2 text-14 flex items-center\"\r\n        (click)=\"openAddSubcategoryDialog()\"\r\n        aria-label=\"Add new subcategory\"\r\n        style=\"background-color: #28a745; color: white; font-family: 'Roboto, sans-serif';\"\r\n      >\r\n        <mat-icon [style.color]=\"'#FFFFFF'\">add</mat-icon> Add Subcategory\r\n      </button>\r\n    </div>\r\n  </mat-card-header>\r\n\r\n  <mat-card-content class=\"relative\" style=\"font-family: 'Roboto, sans-serif';\">\r\n    <div\r\n      *ngIf=\"service.error()\"\r\n      class=\"mb-16 p-16 rounded-8\"\r\n      style=\"color: var(--mat-sys-error); background-color: color-mix(in srgb, var(--mat-sys-error), transparent 90%); font-family: 'Roboto, sans-serif';\"\r\n      role=\"alert\"\r\n    >\r\n      Error: {{ service.error() }}. Please try again or contact support.\r\n    </div>\r\n\r\n    <div *ngIf=\"service.isLoading()\" class=\"text-center mb-16\">\r\n      <mat-spinner diameter=\"40\" style=\"color: var(--mat-sys-on-surface);\"></mat-spinner>\r\n    </div>\r\n\r\n    <div *ngIf=\"!service.isLoading()\" class=\"table-container\" [class.dark-theme]=\"darkModeService.isDarkMode()\">\r\n      <mat-table [dataSource]=\"service.paginatedSubcategories()\" role=\"grid\" class=\"w-full\">\r\n        <ng-container matColumnDef=\"select\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8\" data-label=\"Select\">\r\n            <mat-checkbox\r\n              (change)=\"toggleAllSubcategories($event.checked)\"\r\n              [checked]=\"isAllSelected()\"\r\n              [indeterminate]=\"selectedSubcategories.length > 0 && !isAllSelected()\"\r\n              aria-label=\"Select all subcategories\"\r\n            ></mat-checkbox>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8\" data-label=\"Select\">\r\n            <mat-checkbox\r\n              (change)=\"toggleSubcategory(subcategory)\"\r\n              [checked]=\"isSelected(subcategory)\"\r\n              aria-label=\"Select subcategory\"\r\n            ></mat-checkbox>\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Name\">\r\n            Name\r\n            <button mat-icon-button [matMenuTriggerFor]=\"nameSortMenu\" *ngIf=\"sortField === 'name'\" aria-label=\"Sort name\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"nameSortMenu\" *ngIf=\"sortField !== 'name'\" aria-label=\"Sort name\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #nameSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('name', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('name', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Name\">{{ subcategory.name }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"icon\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Icon\">Icon</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Icon\">\r\n            <mat-icon>{{ subcategory.icon }}</mat-icon>\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"imageUrl\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Image\">Image</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Image\">\r\n            <img [src]=\"subcategory.imageUrl\" alt=\"Subcategory Image\" class=\"w-24 h-24 object-cover rounded\" *ngIf=\"subcategory.imageUrl\">\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"CategoryName\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Category\">\r\n            Category\r\n            <button mat-icon-button [matMenuTriggerFor]=\"categorySortMenu\" *ngIf=\"sortField === 'CategoryName'\" aria-label=\"Sort category\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"categorySortMenu\" *ngIf=\"sortField !== 'CategoryName'\" aria-label=\"Sort category\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #categorySortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('CategoryName', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('CategoryName', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Category\">{{ subcategory.CategoryName }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"createdAt\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Created At\">\r\n            Created At\r\n            <button mat-icon-button [matMenuTriggerFor]=\"createdAtSortMenu\" *ngIf=\"sortField === 'createdAt'\" aria-label=\"Sort created at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"createdAtSortMenu\" *ngIf=\"sortField !== 'createdAt'\" aria-label=\"Sort created at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #createdAtSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('createdAt', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('createdAt', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Created At\">{{ subcategory.createdAt | date:'short' }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"modifiedAt\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Modified At\">\r\n            Updated At\r\n            <button mat-icon-button [matMenuTriggerFor]=\"modifiedAtSortMenu\" *ngIf=\"sortField === 'modifiedAt'\" aria-label=\"Sort modified at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"modifiedAtSortMenu\" *ngIf=\"sortField !== 'modifiedAt'\" aria-label=\"Sort modified at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #modifiedAtSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('modifiedAt', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('modifiedAt', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Modified At\">{{ subcategory.modifiedAt | date:'short' }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"comments\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Comments\">Comments</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Comments\">{{ subcategory.comments }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"actions\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Actions\">\r\n            Actions\r\n            <button mat-icon-button (click)=\"refreshTable()\" aria-label=\"Refresh table\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">refresh</mat-icon>\r\n            </button>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let subcategory\" class=\"p-8\" data-label=\"Actions\">\r\n            <ng-container *ngIf=\"!isMobile; else mobileActions\">\r\n              <button\r\n                mat-icon-button\r\n                (click)=\"startEdit(subcategory)\"\r\n                aria-label=\"Edit subcategory\"\r\n                class=\"edit-button\"\r\n              >\r\n                <mat-icon>edit</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                (click)=\"service.deleteSubcategory(subcategory.id)\"\r\n                aria-label=\"Delete subcategory\"\r\n                class=\"delete-button\"\r\n              >\r\n                <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </ng-container>\r\n            <ng-template #mobileActions>\r\n              <button mat-icon-button [matMenuTriggerFor]=\"actionMenu\" aria-label=\"Subcategory actions\">\r\n                <mat-icon>more_vert</mat-icon>\r\n              </button>\r\n              <mat-menu #actionMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"startEdit(subcategory)\" aria-label=\"Edit subcategory\">\r\n                  <mat-icon>edit</mat-icon> Edit\r\n                </button>\r\n                <button mat-menu-item (click)=\"service.deleteSubcategory(subcategory.id)\" aria-label=\"Delete subcategory\">\r\n                  <mat-icon>delete</mat-icon> Delete\r\n                </button>\r\n              </mat-menu>\r\n            </ng-template>\r\n          </mat-cell>\r\n        </ng-container>\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\" class=\"divide-y table-header\"></mat-header-row>\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"divide-y table-row\" [attr.aria-label]=\"'Subcategory row ' + row.id\"></mat-row>\r\n      </mat-table>\r\n\r\n      <div class=\"flex justify-between items-center p-4 pagination-container\" style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\">\r\n        <span class=\"text-12\">\r\n          Showing {{ (service.currentPage() - 1) * service.pageSize() + 1 }} to \r\n          {{ (service.currentPage() - 1) * service.pageSize() + service.paginatedSubcategories().length }} of {{ service.filteredSubcategories().length }} entries\r\n        </span>\r\n        <div class=\"flex gap-4 items-center\">\r\n          <button\r\n            mat-button\r\n            (click)=\"onPageChange({ page: service.currentPage() - 1 })\"\r\n            [disabled]=\"service.currentPage() === 1\"\r\n            class=\"px-4 py-2 rounded-4 pagination-button\"\r\n            style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\"\r\n            aria-label=\"Previous page\"\r\n          >\r\n            Previous\r\n          </button>\r\n          <ng-container *ngIf=\"!isMobile; else mobilePagination\">\r\n            <ng-container *ngIf=\"getPageNumbers().length > 0; else noPages\">\r\n              <button\r\n                *ngFor=\"let page of getPageNumbers()\"\r\n                mat-button\r\n                (click)=\"onPageChange({ page: page })\"\r\n                [class.bg-blue-600]=\"service.currentPage() === page\"\r\n                class=\"px-4 py-2 rounded-4 pagination-button\"\r\n                [style.color]=\"service.currentPage() === page ? 'var(--mat-sys-on-primary)' : 'var(--mat-sys-on-surface)'\"\r\n                [style.background-color]=\"service.currentPage() === page ? 'var(--mat-sys-primary)' : 'transparent'\"\r\n                [attr.aria-label]=\"'Page ' + page\"\r\n              >\r\n                {{ page }}\r\n              </button>\r\n            </ng-container>\r\n            <ng-template #noPages>\r\n              <span class=\"text-sm\">No pages available</span>\r\n            </ng-template>\r\n          </ng-container>\r\n          <ng-template #mobilePagination>\r\n            <mat-select\r\n              (selectionChange)=\"onPageChange({ page: $event.value })\"\r\n              [value]=\"service.currentPage()\"\r\n              class=\"w-20 p-auto\"\r\n              aria-label=\"Select page\"\r\n            >\r\n              <mat-option *ngFor=\"let page of getPageNumbers()\" [value]=\"page\">\r\n                {{ page }}\r\n              </mat-option>\r\n              <mat-option *ngIf=\"getPageNumbers().length === 0\" disabled>No pages available</mat-option>\r\n            </mat-select>\r\n          </ng-template>\r\n          <button\r\n            mat-button\r\n            (click)=\"onPageChange({ page: service.currentPage() + 1 })\"\r\n            [disabled]=\"service.currentPage() === service.totalPages() || service.totalPages() === 0\"\r\n            class=\"px-4 py-2 rounded-4 pagination-button\"\r\n            style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\"\r\n            aria-label=\"Next page\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>"],
  "mappings": "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",
  "names": ["initialState", "subcategories", "initialized", "error", "currentPage", "pageSize", "searchQuery", "isLoading", "sortField", "sortDirection", "selectedCategoryId", "SubcategoryStore", "signalStore", "providedIn", "withState", "withComputed", "filteredSubcategories", "computed", "filtered", "filter", "s", "categoryId", "String", "name", "toLowerCase", "includes", "icon", "comments", "CategoryName", "sort", "a", "b", "field", "dateA", "Date", "getTime", "dateB", "valueA", "valueB", "localeCompare", "paginatedSubcategories", "start", "slice", "totalPages", "Math", "ceil", "length", "withMethods", "store", "loadSubcategories", "patchState", "localData", "localStorage", "getItem", "JSON", "parse", "map", "__spreadProps", "__spreadValues", "imageUrl", "createdAt", "toISOString", "modifiedAt", "Number", "errorMessage", "message", "addSubcategory", "subcategory", "newSubcategory", "id", "now", "push", "setItem", "stringify", "updateSubcategory", "updatedSubcategories", "deleteSubcategory", "setPage", "page", "setPageSize", "setSearchQuery", "query", "sortSubcategories", "direction", "setSelectedCategoryId", "withHooks", "onInit", "SubcategoriesService", "subcategoryStore", "inject", "SubcategoryStore", "subcategories", "filteredSubcategories", "paginatedSubcategories", "totalPages", "currentPage", "pageSize", "isLoading", "error", "selectedCategoryId", "getSubcategories", "loadSubcategories", "addSubcategory", "subcategory", "updateSubcategory", "deleteSubcategory", "id", "setPage", "page", "setPageSize", "setSearchQuery", "query", "sortSubcategories", "field", "direction", "setSelectedCategoryId", "categoryId", "factory", "\u0275fac", "providedIn", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "AddSubcategoriesComponent", "fb", "dialogRef", "data", "subcategoryForm", "constructor", "group", "name", "Validators", "required", "icon", "imageUrl", "comments", "categoryId", "CategoryName", "ngOnInit", "subcategory", "patchValue", "saveSubcategory", "invalid", "markAllAsTouched", "close", "value", "cancel", "\u0275\u0275directiveInject", "FormBuilder", "MatDialogRef", "MAT_DIALOG_DATA", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275template", "AddSubcategoriesComponent_mat_error_21_Template", "AddSubcategoriesComponent_mat_error_27_Template", "AddSubcategoriesComponent_mat_error_33_Template", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275property", "tmp_3_0", "get", "hasError", "touched", "tmp_4_0", "tmp_5_0", "CommonModule", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "FormGroupDirective", "FormControlName", "MatButtonModule", "MatButton", "MatIconModule", "MatIcon", "MatFormFieldModule", "MatFormField", "MatLabel", "MatError", "MatInputModule", "MatInput", "MatCardModule", "MatCard", "MatCardContent", "MatCardHeader", "MatCardTitle", "encapsulation", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275property", "category_r1", "id", "\u0275\u0275advance", "\u0275\u0275textInterpolate", "name", "\u0275\u0275textInterpolate1", "ctx_r1", "service", "error", "\u0275\u0275element", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r4", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleAllSubcategories", "checked", "isAllSelected", "selectedSubcategories", "length", "subcategory_r6", "_r5", "$implicit", "toggleSubcategory", "isSelected", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "SubcategoriesComponent_div_26_ng_container_2_mat_header_cell_1_Template", "SubcategoriesComponent_div_26_ng_container_2_mat_cell_2_Template", "nameSortMenu_r8", "SubcategoriesComponent_div_26_mat_header_cell_4_button_2_Template", "SubcategoriesComponent_div_26_mat_header_cell_4_button_3_Template", "_r7", "sortColumn", "sortField", "subcategory_r9", "subcategory_r10", "icon", "subcategory_r11", "imageUrl", "\u0275\u0275sanitizeUrl", "SubcategoriesComponent_div_26_ng_container_9_mat_cell_2_img_1_Template", "SubcategoriesComponent_div_26_ng_container_9_mat_header_cell_1_Template", "SubcategoriesComponent_div_26_ng_container_9_mat_cell_2_Template", "categorySortMenu_r13", "SubcategoriesComponent_div_26_ng_container_10_mat_header_cell_1_button_2_Template", "SubcategoriesComponent_div_26_ng_container_10_mat_header_cell_1_button_3_Template", "_r12", "subcategory_r14", "CategoryName", "SubcategoriesComponent_div_26_ng_container_10_mat_header_cell_1_Template", "SubcategoriesComponent_div_26_ng_container_10_mat_cell_2_Template", "createdAtSortMenu_r16", "SubcategoriesComponent_div_26_ng_container_11_mat_header_cell_1_button_2_Template", "SubcategoriesComponent_div_26_ng_container_11_mat_header_cell_1_button_3_Template", "_r15", "\u0275\u0275pipeBind2", "subcategory_r17", "createdAt", "SubcategoriesComponent_div_26_ng_container_11_mat_header_cell_1_Template", "SubcategoriesComponent_div_26_ng_container_11_mat_cell_2_Template", "modifiedAtSortMenu_r19", "SubcategoriesComponent_div_26_ng_container_12_mat_header_cell_1_button_2_Template", "SubcategoriesComponent_div_26_ng_container_12_mat_header_cell_1_button_3_Template", "_r18", "subcategory_r20", "modifiedAt", "SubcategoriesComponent_div_26_ng_container_12_mat_header_cell_1_Template", "SubcategoriesComponent_div_26_ng_container_12_mat_cell_2_Template", "subcategory_r21", "comments", "SubcategoriesComponent_div_26_ng_container_13_mat_header_cell_1_Template", "SubcategoriesComponent_div_26_ng_container_13_mat_cell_2_Template", "_r22", "refreshTable", "_r23", "subcategory_r24", "startEdit", "deleteSubcategory", "_r25", "actionMenu_r26", "SubcategoriesComponent_div_26_mat_cell_16_ng_container_1_Template", "SubcategoriesComponent_div_26_mat_cell_16_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "isMobile", "mobileActions_r27", "page_r30", "_r29", "onPageChange", "page", "\u0275\u0275styleProp", "currentPage", "\u0275\u0275classProp", "SubcategoriesComponent_div_26_ng_container_25_ng_container_1_button_1_Template", "getPageNumbers", "SubcategoriesComponent_div_26_ng_container_25_ng_container_1_Template", "SubcategoriesComponent_div_26_ng_container_25_ng_template_2_Template", "noPages_r31", "page_r33", "_r32", "value", "SubcategoriesComponent_div_26_ng_template_26_mat_option_1_Template", "SubcategoriesComponent_div_26_ng_template_26_mat_option_2_Template", "SubcategoriesComponent_div_26_ng_container_2_Template", "SubcategoriesComponent_div_26_mat_header_cell_4_Template", "SubcategoriesComponent_div_26_mat_cell_5_Template", "SubcategoriesComponent_div_26_mat_header_cell_7_Template", "SubcategoriesComponent_div_26_mat_cell_8_Template", "SubcategoriesComponent_div_26_ng_container_9_Template", "SubcategoriesComponent_div_26_ng_container_10_Template", "SubcategoriesComponent_div_26_ng_container_11_Template", "SubcategoriesComponent_div_26_ng_container_12_Template", "SubcategoriesComponent_div_26_ng_container_13_Template", "SubcategoriesComponent_div_26_mat_header_cell_15_Template", "SubcategoriesComponent_div_26_mat_cell_16_Template", "SubcategoriesComponent_div_26_mat_header_row_17_Template", "SubcategoriesComponent_div_26_mat_row_18_Template", "_r3", "SubcategoriesComponent_div_26_ng_container_25_Template", "SubcategoriesComponent_div_26_ng_template_26_Template", "darkModeService", "isDarkMode", "paginatedSubcategories", "responsive", "isDesktop", "displayedColumns", "\u0275\u0275textInterpolate3", "pageSize", "filteredSubcategories", "mobilePagination_r34", "totalPages", "SubcategoriesComponent", "inject", "SubcategoriesService", "categoryService", "CategoriesService", "dialog", "MatDialog", "ResponsiveService", "DarkModeService", "editingSubcategory", "sortDirection", "isTablet", "breakpointSubscription", "categories", "selectedCategoryId", "paginator", "ngOnInit", "currentBreakpoint", "subscribe", "breakpoint", "updateDisplayedColumns", "applyTheme", "getCategories", "getSubcategories", "ngOnDestroy", "unsubscribe", "onCategoryChange", "categoryId", "setSelectedCategoryId", "sortSubcategories", "setPage", "setSearchQuery", "searchInput", "document", "getElementById", "openAddSubcategoryDialog", "find", "c", "console", "warn", "dialogWidth", "category", "open", "AddSubcategoriesComponent", "width", "maxWidth", "data", "afterClosed", "result", "addSubcategory", "subcategory", "__spreadValues", "updateSubcategory", "onSearchQueryChange", "event", "inputElement", "target", "field", "direction", "index", "findIndex", "s", "push", "splice", "some", "every", "deleteSelectedSubcategories", "forEach", "subcategoryId", "maxPagesToShow", "startPage", "Math", "max", "floor", "endPage", "min", "pages", "i", "trackById", "selectors", "viewQuery", "rf", "ctx", "MatPaginator", "\u0275\u0275twoWayListener", "i0", "\u0275\u0275twoWayBindingSet", "SubcategoriesComponent_mat_option_7_Template", "SubcategoriesComponent_div_24_Template", "SubcategoriesComponent_div_25_Template", "SubcategoriesComponent_div_26_Template", "\u0275\u0275twoWayProperty", "isLoading", "CommonModule", "NgForOf", "NgIf", "DatePipe", "FormsModule", "NgControlStatus", "NgModel", "MatTableModule", "MatTable", "MatHeaderCellDef", "MatHeaderRowDef", "MatColumnDef", "MatCellDef", "MatRowDef", "MatHeaderCell", "MatCell", "MatHeaderRow", "MatRow", "MatButtonModule", "MatButton", "MatIconButton", "MatFormFieldModule", "MatFormField", "MatLabel", "MatInputModule", "MatPaginatorModule", "MatIcon", "MatDialogModule", "MatProgressSpinnerModule", "MatProgressSpinner", "MatCardModule", "MatCard", "MatCardContent", "MatCardHeader", "MatCardTitle", "MatCheckboxModule", "MatCheckbox", "MatMenuModule", "MatMenu", "MatMenuItem", "MatMenuTrigger", "MatSelectModule", "MatSelect", "MatOption", "encapsulation"]
}
