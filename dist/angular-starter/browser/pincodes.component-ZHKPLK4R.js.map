{
  "version": 3,
  "sources": ["src/app/pages/pincodes/pincodes.store.ts", "src/app/pages/pincodes/pincodes.service.ts", "src/app/pages/pincodes/add-pincodes/add-pincodes.component.ts", "src/app/pages/pincodes/add-pincodes/add-pincodes.component.html", "src/app/pages/pincodes/pincodes.component.ts", "src/app/pages/pincodes/pincodes.component.html"],
  "sourcesContent": ["import { patchState, signalStore, withComputed, withHooks, withMethods, withState } from '@ngrx/signals';\r\nimport { computed, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { Pincode } from './pincode';\r\n\r\ninterface PincodeState {\r\n  pincodes: Pincode[];\r\n  initialized: boolean;\r\n  error: string | null;\r\n  currentPage: number;\r\n  pageSize: number;\r\n  searchQuery: string;\r\n  isLoading: boolean;\r\n  sortField: string | null;\r\n  sortDirection: 'asc' | 'desc';\r\n}\r\n\r\nconst initialState: PincodeState = {\r\n  pincodes: [],\r\n  initialized: false,\r\n  error: null,\r\n  currentPage: 1,\r\n  pageSize: 10,\r\n  searchQuery: '',\r\n  isLoading: false,\r\n  sortField: null,\r\n  sortDirection: 'asc',\r\n};\r\n\r\nconst apiUrl = 'https://dbapiservice.onrender.com/dbapis/v1/pincodes';\r\n\r\nexport const PincodeStore = signalStore(\r\n  { providedIn: 'root' },\r\n  withState(initialState),\r\n  withComputed(({ pincodes, searchQuery, currentPage, pageSize, sortField, sortDirection }) => {\r\n    const filteredPincodes = computed(() => {\r\n      let filtered = pincodes().filter(p =>\r\n        (String(p.officeName || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(p.pincode || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(p.districtName || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(p.taluk || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(p.stateName || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(p.city || '').toLowerCase().includes(searchQuery().toLowerCase()))\r\n      );\r\n\r\n      if (sortField()) {\r\n        filtered = filtered.sort((a, b) => {\r\n          const field = sortField() as keyof Pincode;\r\n          const valueA = String(a[field] || '').toLowerCase();\r\n          const valueB = String(b[field] || '').toLowerCase();\r\n          return sortDirection() === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\r\n        });\r\n      }\r\n\r\n      return filtered;\r\n    });\r\n\r\n    return {\r\n      filteredPincodes,\r\n      paginatedPincodes: computed(() => {\r\n        const start = (currentPage() - 1) * pageSize();\r\n        return filteredPincodes().slice(start, start + pageSize());\r\n      }),\r\n      totalPages: computed(() => Math.ceil(filteredPincodes().length / pageSize())),\r\n    };\r\n  }),\r\n  withMethods((store, http = inject(HttpClient)) => ({\r\n    async loadPincodes() {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('pincodes');\r\n        let pincodes: Pincode[] = [];\r\n        if (localData) {\r\n          pincodes = JSON.parse(localData).map((p: Pincode) => ({\r\n            ...p,\r\n            pincode: String(p.pincode || ''),\r\n            officeName: String(p.officeName || ''),\r\n            districtName: String(p.districtName || ''),\r\n            taluk: String(p.taluk || ''),\r\n            stateName: String(p.stateName || ''),\r\n            city: String(p.city || ''),\r\n          }));\r\n        } else {\r\n          pincodes = await lastValueFrom(http.get<Pincode[]>(apiUrl));\r\n          pincodes = pincodes.map(p => ({\r\n            ...p,\r\n            pincode: String(p.pincode || ''),\r\n            officeName: String(p.officeName || ''),\r\n            districtName: String(p.districtName || ''),\r\n            taluk: String(p.taluk || ''),\r\n            stateName: String(p.stateName || ''),\r\n            city: String(p.city || ''),\r\n          }));\r\n          localStorage.setItem('pincodes', JSON.stringify(pincodes));\r\n        }\r\n        patchState(store, { pincodes, initialized: true, isLoading: false, error: null });\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to load pincodes', isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    async addPincode(pincode: Omit<Pincode, 'id'>) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const newPincode: Pincode = {\r\n          ...pincode,\r\n          id: Date.now(),\r\n          pincode: String(pincode.pincode || ''),\r\n          officeName: String(pincode.officeName || ''),\r\n          districtName: String(pincode.districtName || ''),\r\n          taluk: String(pincode.taluk || ''),\r\n          stateName: String(pincode.stateName || ''),\r\n          city: String(pincode.city || ''),\r\n        };\r\n        const localData = localStorage.getItem('pincodes');\r\n        const pincodes = localData ? JSON.parse(localData) : [];\r\n        pincodes.push(newPincode);\r\n        localStorage.setItem('pincodes', JSON.stringify(pincodes));\r\n        patchState(store, { pincodes: [...store.pincodes(), newPincode], isLoading: false, error: null });\r\n        return newPincode;\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to add pincode', isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    async updatePincode(pincode: Pincode) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('pincodes');\r\n        if (localData) {\r\n          const pincodes = JSON.parse(localData);\r\n          const updatedPincodes = pincodes.map((p: Pincode) =>\r\n            p.id === pincode.id\r\n              ? {\r\n                  ...pincode,\r\n                  pincode: String(pincode.pincode || ''),\r\n                  officeName: String(pincode.officeName || ''),\r\n                  districtName: String(pincode.districtName || ''),\r\n                  taluk: String(pincode.taluk || ''),\r\n                  stateName: String(pincode.stateName || ''),\r\n                  city: String(pincode.city || ''),\r\n                }\r\n              : p\r\n          );\r\n          localStorage.setItem('pincodes', JSON.stringify(updatedPincodes));\r\n          patchState(store, {\r\n            pincodes: store.pincodes().map(p =>\r\n              p.id === pincode.id\r\n                ? {\r\n                    ...pincode,\r\n                    pincode: String(pincode.pincode || ''),\r\n                    officeName: String(pincode.officeName || ''),\r\n                    districtName: String(pincode.districtName || ''),\r\n                    taluk: String(pincode.taluk || ''),\r\n                    stateName: String(pincode.stateName || ''),\r\n                    city: String(pincode.city || ''),\r\n                  }\r\n                : p\r\n            ),\r\n            isLoading: false,\r\n            error: null,\r\n          });\r\n        } else {\r\n          patchState(store, { isLoading: false, error: null });\r\n        }\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to update pincode', isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    async deletePincode(id: number) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('pincodes');\r\n        if (localData) {\r\n          const pincodes = JSON.parse(localData);\r\n          const updatedPincodes = pincodes.filter((p: Pincode) => p.id !== id);\r\n          localStorage.setItem('pincodes', JSON.stringify(updatedPincodes));\r\n          patchState(store, { pincodes: store.pincodes().filter(p => p.id !== id), isLoading: false, error: null });\r\n        } else {\r\n          patchState(store, { isLoading: false, error: null });\r\n        }\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to delete pincode', isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    setPage(page: number) {\r\n      patchState(store, { currentPage: page });\r\n    },\r\n    setPageSize(pageSize: number) {\r\n      patchState(store, { pageSize, currentPage: 1 });\r\n    },\r\n    setSearchQuery(query: string) {\r\n      patchState(store, { searchQuery: query, currentPage: 1 });\r\n    },\r\n    sortPincodes(field: string, direction: 'asc' | 'desc') {\r\n      patchState(store, { sortField: field, sortDirection: direction, currentPage: 1 });\r\n    },\r\n  })),\r\n  withHooks({\r\n    onInit(store) {\r\n      store.loadPincodes();\r\n    },\r\n  })\r\n);", "import { Injectable, inject } from '@angular/core';\r\nimport { PincodeStore } from './pincodes.store';\r\nimport { Pincode } from './pincode';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class PincodesService {\r\n  private pincodeStore = inject(PincodeStore);\r\n\r\n  pincodes = this.pincodeStore.pincodes;\r\n  filteredPincodes = this.pincodeStore.filteredPincodes;\r\n  paginatedPincodes = this.pincodeStore.paginatedPincodes;\r\n  totalPages = this.pincodeStore.totalPages;\r\n  currentPage = this.pincodeStore.currentPage;\r\n  pageSize = this.pincodeStore.pageSize;\r\n  isLoading = this.pincodeStore.isLoading;\r\n  error = this.pincodeStore.error;\r\n\r\n  getPincodes() {\r\n    return this.pincodeStore.loadPincodes();\r\n  }\r\n\r\n  addPincode(pincode: Omit<Pincode, 'id'>) {\r\n    return this.pincodeStore.addPincode(pincode);\r\n  }\r\n\r\n  updatePincode(pincode: Pincode) {\r\n    return this.pincodeStore.updatePincode(pincode);\r\n  }\r\n\r\n  deletePincode(id: number) {\r\n    return this.pincodeStore.deletePincode(id);\r\n  }\r\n\r\n  setPage(page: number) {\r\n    this.pincodeStore.setPage(page);\r\n  }\r\n\r\n  setPageSize(pageSize: number) {\r\n    this.pincodeStore.setPageSize(pageSize);\r\n  }\r\n\r\n  setSearchQuery(query: string) {\r\n    this.pincodeStore.setSearchQuery(query);\r\n  }\r\n\r\n  sortPincodes(field: string, direction: 'asc' | 'desc') {\r\n    this.pincodeStore.sortPincodes(field, direction);\r\n  } \r\n}", "import { Component, Inject } from '@angular/core';\r\nimport { FormsModule, NgForm } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common'; // Add this\r\nimport { Pincode } from '../pincode';\r\nimport { MatIcon } from '@angular/material/icon';\r\n\r\n@Component({\r\n  selector: 'app-add-pincodes',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule, // Add this\r\n    FormsModule,\r\n    MatButtonModule,\r\n    MatIcon,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n  ],\r\n  templateUrl: './add-pincodes.component.html',\r\n})\r\nexport class AddPincodesComponent {\r\n  formPincode: Pincode | Omit<Pincode, 'id'> = {\r\n    officeName: '',\r\n    pincode: '',\r\n    districtName: '',\r\n    taluk: '',\r\n    stateName: '',\r\n    city: '',\r\n  };\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<AddPincodesComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { pincode?: Pincode | null } = {}\r\n  ) {\r\n    if (data?.pincode) {\r\n      this.formPincode = { ...data.pincode, pincode: String(data.pincode.pincode) };\r\n    }\r\n  }\r\n\r\n  savePincode(form: NgForm) {\r\n    if (form.invalid || this.isFormInvalid()) {\r\n      return;\r\n    }\r\n    this.dialogRef.close({ ...this.formPincode, pincode: String(this.formPincode.pincode) });\r\n  }\r\n\r\n  isFormInvalid(): boolean {\r\n    return (\r\n      !this.formPincode.officeName ||\r\n      !this.formPincode.pincode ||\r\n      String(this.formPincode.pincode).length !== 6 ||\r\n      !/^[0-9]{6}$/.test(String(this.formPincode.pincode)) ||\r\n      !this.formPincode.districtName ||\r\n      !this.formPincode.taluk ||\r\n      !this.formPincode.stateName ||\r\n      !this.formPincode.city\r\n    );\r\n  }\r\n\r\n  cancel() {\r\n    this.dialogRef.close();\r\n  }\r\n}", "<mat-card class=\"p-6 bg-white dark:bg-gray-800 shadow-3xl rounded-lg\">\r\n  <mat-card-header>\r\n     <button (click)=\"cancel()\" class=\"absolute top-0 right-0 flex justify-center items-center p-2 rounded-full hover:bg-gray-100\" >\r\n        <mat-icon>close</mat-icon>\r\n      </button>\r\n    <mat-card-title class=\"flex justify-between items-center\">\r\n      <h2 class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\"style=\"font-family: 'Roboto, sans-serif';\">\r\n        {{ data?.pincode ? 'Edit Pincode' : 'Add Pincode' }}\r\n      </h2>\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <form #pincodeForm=\"ngForm\" (ngSubmit)=\"savePincode(pincodeForm)\">\r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <!-- Office Name -->\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <label for=\"officeName\" class=\"text-sm font-bold text-gray-700 dark:text-gray-200\">Office Name</label>\r\n          <input\r\n            id=\"officeName\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"formPincode.officeName\"\r\n            name=\"officeName\"\r\n            required\r\n            placeholder=\"Office Name\"\r\n            class=\"p-2 border rounded text-sm w-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 h-10\"\r\n            [ngClass]=\"{\r\n              'border-[#D7373C] dark:border-[#F87171]': pincodeForm.controls['officeName']?.hasError('required') && pincodeForm.submitted,\r\n              'bg-gray-100 dark:bg-gray-700': false\r\n            }\"\r\n            aria-required=\"true\"\r\n            [attr.aria-invalid]=\"pincodeForm.controls['officeName']?.hasError('required') && pincodeForm.submitted\"\r\n            aria-describedby=\"officeNameError\"\r\n          />\r\n          <small\r\n            id=\"officeNameError\"\r\n            class=\"text-xs text-[#D7373C] dark:text-[#F87171] mt-1 error-message\"\r\n            [ngClass]=\"{\r\n              'visible opacity-100': pincodeForm.controls['officeName']?.hasError('required') && pincodeForm.submitted,\r\n              'invisible opacity-0': !(pincodeForm.controls['officeName']?.hasError('required') && pincodeForm.submitted)\r\n            }\"\r\n          >\r\n            Office Name is required\r\n          </small>\r\n        </div>\r\n\r\n        <!-- Pincode -->\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <label for=\"pincode\" class=\"text-sm font-bold text-gray-700 dark:text-gray-200\">Pincode</label>\r\n          <input\r\n            id=\"pincode\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"formPincode.pincode\"\r\n            name=\"pincode\"\r\n            required\r\n            pattern=\"[0-9]{6}\"\r\n            placeholder=\"Pincode\"\r\n            class=\"p-2 border rounded text-sm w-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 h-10\"\r\n            [ngClass]=\"{\r\n              'border-[#D7373C] dark:border-[#F87171]': (pincodeForm.controls['pincode']?.hasError('required') || pincodeForm.controls['pincode']?.hasError('pattern')) && pincodeForm.submitted,\r\n              'bg-gray-100 dark:bg-gray-700': false\r\n            }\"\r\n            aria-required=\"true\"\r\n            [attr.aria-invalid]=\"(pincodeForm.controls['pincode']?.hasError('required') || pincodeForm.controls['pincode']?.hasError('pattern')) && pincodeForm.submitted\"\r\n            aria-describedby=\"pincodeError\"\r\n          />\r\n          <small\r\n            id=\"pincodeError\"\r\n            class=\"text-xs text-[#D7373C] dark:text-[#F87171] mt-1 error-message\"\r\n            [ngClass]=\"{\r\n              'visible opacity-100': (pincodeForm.controls['pincode']?.hasError('required') || pincodeForm.controls['pincode']?.hasError('pattern')) && pincodeForm.submitted,\r\n              'invisible opacity-0': !((pincodeForm.controls['pincode']?.hasError('required') || pincodeForm.controls['pincode']?.hasError('pattern')) && pincodeForm.submitted)\r\n            }\"\r\n          >\r\n            {{ pincodeForm.controls['pincode']?.hasError('required') ? 'Pincode is required' : 'Pincode must be 6 digits' }}\r\n          </small>\r\n        </div>\r\n\r\n        <!-- District Name -->\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <label for=\"districtName\" class=\"text-sm font-bold text-gray-700 dark:text-gray-200\">District Name</label>\r\n          <input\r\n            id=\"districtName\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"formPincode.districtName\"\r\n            name=\"districtName\"\r\n            required\r\n            placeholder=\"District Name\"\r\n            class=\"p-2 border rounded text-sm w-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 h-10\"\r\n            [ngClass]=\"{\r\n              'border-[#D7373C] dark:border-[#F87171]': pincodeForm.controls['districtName']?.hasError('required') && pincodeForm.submitted,\r\n              'bg-gray-100 dark:bg-gray-700': false\r\n            }\"\r\n            aria-required=\"true\"\r\n            [attr.aria-invalid]=\"pincodeForm.controls['districtName']?.hasError('required') && pincodeForm.submitted\"\r\n            aria-describedby=\"districtNameError\"\r\n          />\r\n          <small\r\n            id=\"districtNameError\"\r\n            class=\"text-xs text-[#D7373C] dark:text-[#F87171] mt-1 error-message\"\r\n            [ngClass]=\"{\r\n              'visible opacity-100': pincodeForm.controls['districtName']?.hasError('required') && pincodeForm.submitted,\r\n              'invisible opacity-0': !(pincodeForm.controls['districtName']?.hasError('required') && pincodeForm.submitted)\r\n            }\"\r\n          >\r\n            District Name is required\r\n          </small>\r\n        </div>\r\n\r\n        <!-- Taluk -->\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <label for=\"taluk\" class=\"text-sm font-bold text-gray-700 dark:text-gray-200\">Taluk</label>\r\n          <input\r\n            id=\"taluk\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"formPincode.taluk\"\r\n            name=\"taluk\"\r\n            required\r\n            placeholder=\"Taluk\"\r\n            class=\"p-2 border rounded text-sm w-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 h-10\"\r\n            [ngClass]=\"{\r\n              'border-[#D7373C] dark:border-[#F87171]': pincodeForm.controls['taluk']?.hasError('required') && pincodeForm.submitted,\r\n              'bg-gray-100 dark:bg-gray-700': false\r\n            }\"\r\n            aria-required=\"true\"\r\n            [attr.aria-invalid]=\"pincodeForm.controls['taluk']?.hasError('required') && pincodeForm.submitted\"\r\n            aria-describedby=\"talukError\"\r\n          />\r\n          <small\r\n            id=\"talukError\"\r\n            class=\"text-xs text-[#D7373C] dark:text-[#F87171] mt-1 error-message\"\r\n            [ngClass]=\"{\r\n              'visible opacity-100': pincodeForm.controls['taluk']?.hasError('required') && pincodeForm.submitted,\r\n              'invisible opacity-0': !(pincodeForm.controls['taluk']?.hasError('required') && pincodeForm.submitted)\r\n            }\"\r\n          >\r\n            Taluk is required\r\n          </small>\r\n        </div>\r\n\r\n        <!-- State Name -->\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <label for=\"stateName\" class=\"text-sm font-bold text-gray-700 dark:text-gray-200\">State Name</label>\r\n          <input\r\n            id=\"stateName\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"formPincode.stateName\"\r\n            name=\"stateName\"\r\n            required\r\n            placeholder=\"State Name\"\r\n            class=\"p-2 border rounded text-sm w-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 h-10\"\r\n            [ngClass]=\"{\r\n              'border-[#D7373C] dark:border-[#F87171]': pincodeForm.controls['stateName']?.hasError('required') && pincodeForm.submitted,\r\n              'bg-gray-100 dark:bg-gray-700': false\r\n            }\"\r\n            aria-required=\"true\"\r\n            [attr.aria-invalid]=\"pincodeForm.controls['stateName']?.hasError('required') && pincodeForm.submitted\"\r\n            aria-describedby=\"stateNameError\"\r\n          />\r\n          <small\r\n            id=\"stateNameError\"\r\n            class=\"text-xs text-[#D7373C] dark:text-[#F87171] mt-1 error-message\"\r\n            [ngClass]=\"{\r\n              'visible opacity-100': pincodeForm.controls['stateName']?.hasError('required') && pincodeForm.submitted,\r\n              'invisible opacity-0': !(pincodeForm.controls['stateName']?.hasError('required') && pincodeForm.submitted)\r\n            }\"\r\n          >\r\n            State Name is required\r\n          </small>\r\n        </div>\r\n\r\n        <!-- City -->\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <label for=\"city\" class=\"text-sm font-bold text-gray-700 dark:text-gray-200\">City</label>\r\n          <input\r\n            id=\"city\"\r\n            type=\"text\"\r\n            [(ngModel)]=\"formPincode.city\"\r\n            name=\"city\"\r\n            required\r\n            placeholder=\"City\"\r\n            class=\"p-2 border rounded text-sm w-full focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-gray-100 dark:placeholder-gray-400 h-10\"\r\n            [ngClass]=\"{\r\n              'border-[#D7373C] dark:border-[#F87171]': pincodeForm.controls['city']?.hasError('required') && pincodeForm.submitted,\r\n              'bg-gray-100 dark:bg-gray-700': false\r\n            }\"\r\n            aria-required=\"true\"\r\n            [attr.aria-invalid]=\"pincodeForm.controls['city']?.hasError('required') && pincodeForm.submitted\"\r\n            aria-describedby=\"cityError\"\r\n          />\r\n          <small\r\n            id=\"cityError\"\r\n            class=\"text-xs text-[#D7373C] dark:text-[#F87171] mt-1 error-message\"\r\n            [ngClass]=\"{\r\n              'visible opacity-100': pincodeForm.controls['city']?.hasError('required') && pincodeForm.submitted,\r\n              'invisible opacity-0': !(pincodeForm.controls['city']?.hasError('required') && pincodeForm.submitted)\r\n            }\"\r\n          >\r\n            City is required\r\n          </small>\r\n        </div>\r\n      </div>\r\n      <div class=\"mt-4 flex justify-end gap-2\">\r\n        <button \r\n          mat-button\r\n          type=\"button\"\r\n          (click)=\"cancel()\"\r\n          class=\"bg-gray-300 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-400 transition\"\r\n          style=\"font-family: 'Roboto, sans-serif';\"\r\n          aria-label=\"Cancel pincode form\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button \r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"isFormInvalid()\"\r\n          class=\"hover:bg-blue-700 transition\"\r\n          style=\"font-family: 'Roboto, sans-serif';\"\r\n          [attr.aria-label]=\"data?.pincode ? 'Update pincode' : 'Save pincode'\"\r\n        >\r\n          {{ data?.pincode ? 'Update' : 'Save' }}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>", "import { Component, inject, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { PincodesService } from './pincodes.service';\r\nimport { Pincode } from './pincode';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AddPincodesComponent } from './add-pincodes/add-pincodes.component';\r\nimport { DarkModeService } from '../../services/dark-mode.service';\r\nimport { ResponsiveService } from '../../services/responsive/responsive.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-pincodes',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatIcon,\r\n    MatDialogModule,\r\n    MatProgressSpinnerModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatSelectModule,\r\n  ],\r\n  templateUrl: './pincodes.component.html',\r\n  styleUrls: ['./pincodes.component.scss']\r\n})\r\nexport class PincodesComponent implements OnInit, OnDestroy {\r\n  service = inject(PincodesService);\r\n  dialog = inject(MatDialog);\r\n  responsive = inject(ResponsiveService);\r\n  darkModeService = inject(DarkModeService);\r\n\r\n  editingPincode: Pincode | null = null;\r\n  selectedPincodes: Pincode[] = [];\r\n  displayedColumns: string[] = [];\r\n  sortField: string | null = null;\r\n  sortDirection: 'asc' | 'desc' = 'asc';\r\n  isMobile: boolean = false;\r\n  isTablet: boolean = false;\r\n  breakpointSubscription: Subscription | undefined;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.breakpointSubscription = this.responsive.currentBreakpoint().subscribe(breakpoint => {\r\n      this.isMobile = breakpoint === 'xsmall';\r\n      this.isTablet = breakpoint === 'small' || breakpoint === 'medium';\r\n      this.updateDisplayedColumns();\r\n    });\r\n    this.darkModeService.applyTheme();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.breakpointSubscription?.unsubscribe();\r\n  }\r\n\r\n  updateDisplayedColumns() {\r\n    if (this.isMobile) {\r\n      this.displayedColumns = ['pincode', 'city', 'actions'];\r\n    } else if (this.isTablet) {\r\n      this.displayedColumns = ['select', 'officeName', 'pincode', 'city', 'districtName', 'actions'];\r\n    } else {\r\n      this.displayedColumns = ['select', 'officeName', 'pincode', 'districtName', 'taluk', 'stateName', 'city', 'actions'];\r\n    }\r\n  }\r\n\r\n  refreshTable() {\r\n    this.sortField = null;\r\n    this.sortDirection = 'asc';\r\n    this.service.sortPincodes(null, 'asc');\r\n    this.service.setPage(1);\r\n    this.service.setSearchQuery('');\r\n    this.selectedPincodes = [];\r\n    const searchInput = document.getElementById('searchPincodes') as HTMLInputElement;\r\n    if (searchInput) {\r\n      searchInput.value = '';\r\n    }\r\n    this.service.getPincodes();\r\n    console.log('Table refreshed: sort, pagination, search reset, and data reloaded');\r\n  }\r\n\r\n  private openPincodeDialog(data: any, onResult: (result: Pincode) => void) {\r\n  this.dialog.open(AddPincodesComponent, {\r\n    width: this.isMobile ? '90vw' : this.isTablet ? '80vw' : '800px',\r\n    maxWidth: '100vw',\r\n    data\r\n  }).afterClosed().subscribe(result => result && onResult(result));\r\n}\r\n\r\nopenAddPincodeDialog = () => this.openPincodeDialog({}, result => this.service.addPincode(result));\r\n\r\nstartEdit = (pincode: Pincode) => {\r\n  this.editingPincode = { ...pincode };\r\n  this.openPincodeDialog({ pincode: this.editingPincode }, result => {\r\n    this.service.updatePincode(result);\r\n    this.editingPincode = null;\r\n  });\r\n}\r\n\r\n  onSearchQueryChange(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    this.service.setSearchQuery(inputElement.value);\r\n  }\r\n\r\n  onPageChange(event: any) {\r\n    this.service.setPage(event.pageIndex + 1);\r\n    this.selectedPincodes = [];\r\n    console.log('Page Changed to:', event.pageIndex + 1);\r\n  }\r\n\r\n  sortColumn(field: string, direction: 'asc' | 'desc') {\r\n    this.sortField = field;\r\n    this.sortDirection = direction;\r\n    this.service.sortPincodes(this.sortField, this.sortDirection);\r\n  }\r\n\r\n  togglePincode(pincode: Pincode) {\r\n    const index = this.selectedPincodes.findIndex(p => p.id === pincode.id);\r\n    if (index === -1) {\r\n      this.selectedPincodes.push(pincode);\r\n    } else {\r\n      this.selectedPincodes.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  isSelected(pincode: Pincode): boolean {\r\n    return this.selectedPincodes.some(p => p.id === pincode.id);\r\n  }\r\n\r\n  toggleAllPincodes(checked: boolean) {\r\n    if (checked) {\r\n      this.selectedPincodes = [...this.service.paginatedPincodes()];\r\n    } else {\r\n      this.selectedPincodes = [];\r\n    }\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    return this.service.paginatedPincodes().length > 0 &&\r\n           this.service.paginatedPincodes().every(pincode => this.isSelected(pincode));\r\n  }\r\n\r\n  deleteSelectedPincodes() {\r\n    this.selectedPincodes.forEach(pincode => this.service.deletePincode(pincode.id));\r\n    this.selectedPincodes = [];\r\n  }\r\n\r\n  getPageNumbers(): number[] {\r\n    const totalPages = this.service.totalPages();\r\n    const currentPage = this.service.currentPage();\r\n    const maxPagesToShow = this.isMobile ? 3 : this.isTablet ? 4 : 5;\r\n    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n    if (endPage - startPage + 1 < maxPagesToShow) {\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    if (totalPages > 0) {\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pages.push(i);\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  trackById(index: number, pincode: Pincode): number {\r\n    return pincode.id;\r\n  }\r\n}", "<mat-card class=\"shadow-3xl rounded-8\" style=\"font-family: 'Roboto, sans-serif';\">\r\n  <mat-card-header class=\"relative flex items-center justify-between flex-col md:flex-row gap-4\" style=\"background-color: #2c3e50; color: #f7f7f7; font-family: 'Roboto, sans-serif'; padding: 16px;\">\r\n    <!-- Title -->\r\n    <mat-card-title class=\"flex items-center\">\r\n      <h2 class=\"text-20 font-semibold m-0\" style=\"font-family: 'Roboto, sans-serif';\">Pincodes</h2>\r\n    </mat-card-title>\r\n\r\n    <!-- Search -->\r\n    <div class=\"flex items-center w-full md:w-1/3\">\r\n      <input\r\n        id=\"searchPincodes\"\r\n        type=\"text\"\r\n        (input)=\"onSearchQueryChange($event)\"\r\n        placeholder=\"Search pincodes...\"\r\n        class=\"p-2 border rounded text-sm w-full focus:outline-none h-9\"\r\n        style=\"font-family: 'Roboto, sans-serif'; border-color: #ced4da; background-color: #fff;\"\r\n        aria-label=\"Search pincodes\"\r\n      />\r\n    </div>\r\n\r\n    <!-- Action Buttons -->\r\n    <div class=\"flex gap-2\">\r\n      <button\r\n        mat-raised-button\r\n        class=\"px-4 py-2 text-14 flex items-center\"\r\n        (click)=\"deleteSelectedPincodes()\"\r\n        [disabled]=\"!selectedPincodes.length\"\r\n        aria-label=\"Delete selected pincodes\"\r\n        style=\"background-color: #dc3545; color: white; font-family: 'Roboto, sans-serif';\"\r\n        \r\n      >\r\n        <mat-icon [style.color]=\"'#FFFFFF'\">delete</mat-icon> Delete\r\n      </button>\r\n      <button\r\n        mat-raised-button\r\n        class=\"px-4 py-2 text-14 flex items-center\"\r\n        (click)=\"openAddPincodeDialog()\"\r\n        aria-label=\"Add new pincode\"\r\n        style=\"background-color: #28a745; color: white; font-family: 'Roboto, sans-serif';\"\r\n      >\r\n        <mat-icon [style.color]=\"'#FFFFFF'\">add</mat-icon> Add Pincode\r\n      </button>\r\n    </div>\r\n  </mat-card-header>\r\n\r\n  <mat-card-content class=\"relative\" style=\"font-family: 'Roboto, sans-serif';\">\r\n    <!-- Error Message -->\r\n    <div\r\n      *ngIf=\"service.error()\"\r\n      class=\"mb-16 p-16 rounded-8\"\r\n      style=\"color: var(--mat-sys-error); background-color: color-mix(in srgb, var(--mat-sys-error), transparent 90%); font-family: 'Roboto, sans-serif';\"\r\n      role=\"alert\"\r\n    >\r\n      Error: {{ service.error() }}. Please try again or contact support.\r\n    </div>\r\n\r\n    <!-- Loading Indicator -->\r\n    <div *ngIf=\"service.isLoading()\" class=\"text-center mb-16\">\r\n      <mat-spinner diameter=\"40\" style=\"color: var(--mat-sys-on-surface);\"></mat-spinner>\r\n    </div>\r\n\r\n    <!-- Scrollable Table for All Breakpoints -->\r\n    <div *ngIf=\"!service.isLoading()\" class=\"table-container\" [class.dark-theme]=\"darkModeService.isDarkMode()\">\r\n      <mat-table [dataSource]=\"service.paginatedPincodes()\" role=\"grid\" class=\"w-full\">\r\n        <!-- Checkbox Column -->\r\n        <ng-container matColumnDef=\"select\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8\" data-label=\"Select\">\r\n            <mat-checkbox\r\n              (change)=\"toggleAllPincodes($event.checked)\"\r\n              [checked]=\"isAllSelected()\"\r\n              [indeterminate]=\"selectedPincodes.length > 0 && !isAllSelected()\"\r\n              aria-label=\"Select all pincodes\"\r\n            ></mat-checkbox>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8\" data-label=\"Select\">\r\n            <mat-checkbox\r\n              (change)=\"togglePincode(pincode)\"\r\n              [checked]=\"isSelected(pincode)\"\r\n              aria-label=\"Select pincode\"\r\n            ></mat-checkbox>\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <!-- Columns -->\r\n        <ng-container matColumnDef=\"officeName\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Office Name\">Office Name</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Office Name\">{{ pincode.officeName }}</mat-cell>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"pincode\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Pincode\">\r\n            Pincode\r\n            <button mat-icon-button [matMenuTriggerFor]=\"pincodeSortMenu\" *ngIf=\"sortField === 'pincode'\" aria-label=\"Sort pincode\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"pincodeSortMenu\" *ngIf=\"sortField !== 'pincode'\" aria-label=\"Sort pincode\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #pincodeSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('pincode', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('pincode', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Pincode\">{{ pincode.pincode }}</mat-cell>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"districtName\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"District\">District</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"District\">{{ pincode.districtName }}</mat-cell>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"taluk\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Taluk\">Taluk</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Taluk\">{{ pincode.taluk }}</mat-cell>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"stateName\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"State\">State</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"State\">{{ pincode.stateName }}</mat-cell>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"city\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"City\">\r\n            City\r\n            <button mat-icon-button [matMenuTriggerFor]=\"citySortMenu\" *ngIf=\"sortField === 'city'\" aria-label=\"Sort city\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"citySortMenu\" *ngIf=\"sortField !== 'city'\" aria-label=\"Sort city\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #citySortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('city', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('city', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"City\">{{ pincode.city }}</mat-cell>\r\n        </ng-container>\r\n        <ng-container matColumnDef=\"actions\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Actions\">\r\n            Actions\r\n            <button mat-icon-button (click)=\"refreshTable()\" aria-label=\"Refresh table\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">refresh</mat-icon>\r\n            </button>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let pincode\" class=\"p-8\" data-label=\"Actions\">\r\n            <ng-container *ngIf=\"!isMobile; else mobileActions\">\r\n              <button\r\n                mat-icon-button\r\n                (click)=\"startEdit(pincode)\"\r\n                aria-label=\"Edit pincode\"\r\n                class=\"edit-button\"\r\n              >\r\n                <mat-icon>edit</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                (click)=\"service.deletePincode(pincode.id)\"\r\n                aria-label=\"Delete pincode\"\r\n                class=\"delete-button\"\r\n              >\r\n                <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </ng-container>\r\n            <ng-template #mobileActions>\r\n              <button mat-icon-button [matMenuTriggerFor]=\"actionMenu\" aria-label=\"Pincode actions\">\r\n                <mat-icon>more_vert</mat-icon>\r\n              </button>\r\n              <mat-menu #actionMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"startEdit(pincode)\" aria-label=\"Edit pincode\">\r\n                  <mat-icon>edit</mat-icon> Edit\r\n                </button>\r\n                <button mat-menu-item (click)=\"service.deletePincode(pincode.id)\" aria-label=\"Delete pincode\">\r\n                  <mat-icon>delete</mat-icon> Delete\r\n                </button>\r\n              </mat-menu>\r\n            </ng-template>\r\n          </mat-cell>\r\n        </ng-container>\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\" class=\"divide-y table-header\"></mat-header-row>\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"divide-y table-row\" [attr.aria-label]=\"'Pincode row ' + row.id\"></mat-row>\r\n      </mat-table>\r\n\r\n      <!-- Custom Pagination -->\r\n      <div class=\"flex justify-between items-center p-4 pagination-container\" style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\">\r\n        <span class=\"text-12\">\r\n          Showing {{ (service.currentPage() - 1) * service.pageSize() + 1 }} to \r\n          {{ (service.currentPage() - 1) * service.pageSize() + service.paginatedPincodes().length }} of {{ service.filteredPincodes().length }} entries\r\n        </span>\r\n        <div class=\"flex gap-4 items-center\">\r\n          <button\r\n            mat-button\r\n            (click)=\"onPageChange({ pageIndex: service.currentPage() - 2 })\"\r\n            [disabled]=\"service.currentPage() === 1\"\r\n            class=\"px-4 py-2 rounded-4 pagination-button\"\r\n            style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\"\r\n            aria-label=\"Previous page\"\r\n          >\r\n            Previous\r\n          </button>\r\n          <ng-container *ngIf=\"!isMobile; else mobilePagination\">\r\n            <ng-container *ngIf=\"getPageNumbers().length > 0; else noPages\">\r\n              <button\r\n                *ngFor=\"let page of getPageNumbers()\"\r\n                mat-button\r\n                (click)=\"onPageChange({ pageIndex: page - 1 })\"\r\n                [class.bg-blue-600]=\"service.currentPage() === page\"\r\n                class=\"px-4 py-2 rounded-4 pagination-button\"\r\n                [style.color]=\"service.currentPage() === page ? 'var(--mat-sys-on-primary)' : 'var(--mat-sys-on-surface)'\"\r\n                [style.background-color]=\"service.currentPage() === page ? 'var(--mat-sys-primary)' : 'transparent'\"\r\n                [attr.aria-label]=\"'Page ' + page\"\r\n              >\r\n                {{ page }}\r\n              </button>\r\n            </ng-container>\r\n            <ng-template #noPages>\r\n              <span class=\"text-12\">No pages available</span>\r\n            </ng-template>\r\n          </ng-container>\r\n          <ng-template #mobilePagination>\r\n            <mat-select\r\n              (selectionChange)=\"onPageChange({ pageIndex: $event.value - 1 })\"\r\n              [value]=\"service.currentPage()\"\r\n              class=\"w-20 pagination-select\"\r\n              aria-label=\"Select page\"\r\n            >\r\n              <mat-option *ngFor=\"let page of getPageNumbers()\" [value]=\"page\">\r\n                {{ page }}\r\n              </mat-option>\r\n              <mat-option *ngIf=\"getPageNumbers().length === 0\" disabled>No pages available</mat-option>\r\n            </mat-select>\r\n          </ng-template>\r\n          <button\r\n            mat-button\r\n            (click)=\"onPageChange({ pageIndex: service.currentPage() })\"\r\n            [disabled]=\"service.currentPage() === service.totalPages() || service.totalPages() === 0\"\r\n            class=\"px-4 py-2 rounded-4 pagination-button\"\r\n            style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\"\r\n            aria-label=\"Next page\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>"],
  "mappings": "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",
  "names": ["initialState", "pincodes", "initialized", "error", "currentPage", "pageSize", "searchQuery", "isLoading", "sortField", "sortDirection", "apiUrl", "PincodeStore", "signalStore", "providedIn", "withState", "withComputed", "filteredPincodes", "computed", "filtered", "filter", "p", "String", "officeName", "toLowerCase", "includes", "pincode", "districtName", "taluk", "stateName", "city", "sort", "a", "b", "field", "valueA", "valueB", "localeCompare", "paginatedPincodes", "start", "slice", "totalPages", "Math", "ceil", "length", "withMethods", "store", "http", "inject", "HttpClient", "loadPincodes", "__async", "patchState", "localData", "localStorage", "getItem", "JSON", "parse", "map", "__spreadProps", "__spreadValues", "lastValueFrom", "get", "setItem", "stringify", "message", "addPincode", "newPincode", "id", "Date", "now", "push", "updatePincode", "updatedPincodes", "deletePincode", "setPage", "page", "setPageSize", "setSearchQuery", "query", "sortPincodes", "direction", "withHooks", "onInit", "PincodesService", "pincodeStore", "inject", "PincodeStore", "pincodes", "filteredPincodes", "paginatedPincodes", "totalPages", "currentPage", "pageSize", "isLoading", "error", "getPincodes", "loadPincodes", "addPincode", "pincode", "updatePincode", "deletePincode", "id", "setPage", "page", "setPageSize", "setSearchQuery", "query", "sortPincodes", "field", "direction", "factory", "\u0275fac", "providedIn", "AddPincodesComponent", "dialogRef", "data", "formPincode", "officeName", "pincode", "districtName", "taluk", "stateName", "city", "constructor", "__spreadProps", "__spreadValues", "String", "savePincode", "form", "invalid", "isFormInvalid", "close", "length", "test", "cancel", "\u0275\u0275directiveInject", "MatDialogRef", "MAT_DIALOG_DATA", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275elementStart", "\u0275\u0275listener", "i0", "\u0275\u0275restoreView", "_r1", "\u0275\u0275resetView", "\u0275\u0275text", "\u0275\u0275elementEnd", "pincodeForm_r2", "\u0275\u0275reference", "\u0275\u0275twoWayListener", "$event", "\u0275\u0275twoWayBindingSet", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275twoWayProperty", "\u0275\u0275property", "\u0275\u0275pureFunction1", "_c0", "controls", "hasError", "submitted", "\u0275\u0275pureFunction2", "_c1", "CommonModule", "NgClass", "FormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "PatternValidator", "NgModel", "NgForm", "MatButtonModule", "MatButton", "MatIcon", "MatFormFieldModule", "MatInputModule", "MatCardModule", "MatCard", "MatCardContent", "MatCardHeader", "MatCardTitle", "MatDialogModule", "encapsulation", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "service", "error", "\u0275\u0275element", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleAllPincodes", "checked", "\u0275\u0275property", "isAllSelected", "selectedPincodes", "length", "pincode_r5", "_r4", "$implicit", "togglePincode", "isSelected", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "PincodesComponent_div_19_ng_container_2_mat_header_cell_1_Template", "PincodesComponent_div_19_ng_container_2_mat_cell_2_Template", "\u0275\u0275textInterpolate", "pincode_r6", "officeName", "pincodeSortMenu_r8", "PincodesComponent_div_19_mat_header_cell_7_button_2_Template", "PincodesComponent_div_19_mat_header_cell_7_button_3_Template", "_r7", "sortColumn", "sortField", "pincode_r9", "pincode", "pincode_r10", "districtName", "PincodesComponent_div_19_ng_container_9_mat_header_cell_1_Template", "PincodesComponent_div_19_ng_container_9_mat_cell_2_Template", "pincode_r11", "taluk", "PincodesComponent_div_19_ng_container_10_mat_header_cell_1_Template", "PincodesComponent_div_19_ng_container_10_mat_cell_2_Template", "pincode_r12", "stateName", "PincodesComponent_div_19_ng_container_11_mat_header_cell_1_Template", "PincodesComponent_div_19_ng_container_11_mat_cell_2_Template", "citySortMenu_r14", "PincodesComponent_div_19_mat_header_cell_13_button_2_Template", "PincodesComponent_div_19_mat_header_cell_13_button_3_Template", "_r13", "pincode_r15", "city", "_r16", "refreshTable", "_r17", "pincode_r18", "startEdit", "deletePincode", "id", "_r19", "actionMenu_r20", "PincodesComponent_div_19_mat_cell_17_ng_container_1_Template", "PincodesComponent_div_19_mat_cell_17_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "isMobile", "mobileActions_r21", "page_r24", "_r23", "onPageChange", "pageIndex", "\u0275\u0275styleProp", "currentPage", "\u0275\u0275classProp", "PincodesComponent_div_19_ng_container_26_ng_container_1_button_1_Template", "getPageNumbers", "PincodesComponent_div_19_ng_container_26_ng_container_1_Template", "PincodesComponent_div_19_ng_container_26_ng_template_2_Template", "noPages_r25", "page_r27", "_r26", "value", "PincodesComponent_div_19_ng_template_27_mat_option_1_Template", "PincodesComponent_div_19_ng_template_27_mat_option_2_Template", "PincodesComponent_div_19_ng_container_2_Template", "PincodesComponent_div_19_mat_header_cell_4_Template", "PincodesComponent_div_19_mat_cell_5_Template", "PincodesComponent_div_19_mat_header_cell_7_Template", "PincodesComponent_div_19_mat_cell_8_Template", "PincodesComponent_div_19_ng_container_9_Template", "PincodesComponent_div_19_ng_container_10_Template", "PincodesComponent_div_19_ng_container_11_Template", "PincodesComponent_div_19_mat_header_cell_13_Template", "PincodesComponent_div_19_mat_cell_14_Template", "PincodesComponent_div_19_mat_header_cell_16_Template", "PincodesComponent_div_19_mat_cell_17_Template", "PincodesComponent_div_19_mat_header_row_18_Template", "PincodesComponent_div_19_mat_row_19_Template", "_r2", "PincodesComponent_div_19_ng_container_26_Template", "PincodesComponent_div_19_ng_template_27_Template", "darkModeService", "isDarkMode", "paginatedPincodes", "responsive", "isDesktop", "displayedColumns", "\u0275\u0275textInterpolate3", "pageSize", "filteredPincodes", "mobilePagination_r28", "totalPages", "PincodesComponent", "inject", "PincodesService", "dialog", "MatDialog", "ResponsiveService", "DarkModeService", "editingPincode", "sortDirection", "isTablet", "breakpointSubscription", "paginator", "ngOnInit", "currentBreakpoint", "subscribe", "breakpoint", "updateDisplayedColumns", "applyTheme", "ngOnDestroy", "unsubscribe", "sortPincodes", "setPage", "setSearchQuery", "searchInput", "document", "getElementById", "getPincodes", "console", "log", "openPincodeDialog", "data", "onResult", "open", "AddPincodesComponent", "width", "maxWidth", "afterClosed", "result", "openAddPincodeDialog", "addPincode", "__spreadValues", "updatePincode", "onSearchQueryChange", "event", "inputElement", "target", "field", "direction", "index", "findIndex", "p", "push", "splice", "some", "every", "deleteSelectedPincodes", "forEach", "maxPagesToShow", "startPage", "Math", "max", "floor", "endPage", "min", "pages", "i", "trackById", "selectors", "viewQuery", "rf", "ctx", "MatPaginator", "PincodesComponent_div_17_Template", "PincodesComponent_div_18_Template", "PincodesComponent_div_19_Template", "isLoading", "CommonModule", "NgForOf", "NgIf", "FormsModule", "MatTableModule", "MatTable", "MatHeaderCellDef", "MatHeaderRowDef", "MatColumnDef", "MatCellDef", "MatRowDef", "MatHeaderCell", "MatCell", "MatHeaderRow", "MatRow", "MatButtonModule", "MatButton", "MatIconButton", "MatFormFieldModule", "MatInputModule", "MatPaginatorModule", "MatIcon", "MatDialogModule", "MatProgressSpinnerModule", "MatProgressSpinner", "MatCardModule", "MatCard", "MatCardContent", "MatCardHeader", "MatCardTitle", "MatCheckboxModule", "MatCheckbox", "MatMenuModule", "MatMenu", "MatMenuItem", "MatMenuTrigger", "MatSelectModule", "MatSelect", "MatOption", "encapsulation"]
}
