{
  "version": 3,
  "sources": ["src/app/pages/categories/categories.store.ts", "src/app/pages/categories/categories.service.ts"],
  "sourcesContent": ["import { patchState, signalStore, withComputed, withHooks, withMethods, withState } from '@ngrx/signals';\r\nimport { computed, inject } from '@angular/core';\r\nimport { Category } from './category';\r\n\r\ninterface CategoryState {\r\n  categories: Category[];\r\n  initialized: boolean;\r\n  error: string | null;\r\n  currentPage: number;\r\n  pageSize: number;\r\n  searchQuery: string;\r\n  isLoading: boolean;\r\n  sortField: string | null;\r\n  sortDirection: 'asc' | 'desc';\r\n}\r\n\r\nconst initialState: CategoryState = {\r\n  categories: [],\r\n  initialized: false,\r\n  error: null,\r\n  currentPage: 1,\r\n  pageSize: 10,\r\n  searchQuery: '',\r\n  isLoading: false,\r\n  sortField: null,\r\n  sortDirection: 'asc',\r\n};\r\n\r\nexport const CategoryStore = signalStore(\r\n  { providedIn: 'root' },\r\n  withState(initialState),\r\n  withComputed(({ categories, searchQuery, currentPage, pageSize, isLoading, error, sortField, sortDirection }) => {\r\n    const filteredCategories = computed(() => {\r\n      let filtered = categories().filter(c =>\r\n        (String(c.name || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(c.icon || '').toLowerCase().includes(searchQuery().toLowerCase())) ||\r\n        (String(c.comments || '').toLowerCase().includes(searchQuery().toLowerCase()))\r\n      );\r\n\r\n      if (sortField()) {\r\n        filtered = filtered.sort((a, b) => {\r\n          const field = sortField() as keyof Category;\r\n          if (field === 'createdAt' || field === 'modifiedAt') {\r\n            const dateA = new Date(a[field] || '').getTime();\r\n            const dateB = new Date(b[field] || '').getTime();\r\n            return sortDirection() === 'asc' ? dateA - dateB : dateB - dateA;\r\n          } else {\r\n            const valueA = String(a[field] || '').toLowerCase();\r\n            const valueB = String(b[field] || '').toLowerCase();\r\n            return sortDirection() === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\r\n          }\r\n        });\r\n      }\r\n\r\n      return filtered;\r\n    });\r\n\r\n    return {\r\n      categories: computed(() => categories()),\r\n      filteredCategories,\r\n      paginatedCategories: computed(() => {\r\n        const start = (currentPage() - 1) * pageSize();\r\n        return filteredCategories().slice(start, start + pageSize());\r\n      }),\r\n      totalPages: computed(() => Math.ceil(filteredCategories().length / pageSize())),\r\n      currentPage: computed(() => currentPage()),\r\n      pageSize: computed(() => pageSize()),\r\n      isLoading: computed(() => isLoading()),\r\n      error: computed(() => error()),\r\n    };\r\n  }),\r\n  withMethods((store) => ({\r\n    loadCategories() {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('categories');\r\n        let categories: Category[] = [];\r\n        if (localData) {\r\n          categories = JSON.parse(localData).map((c: Category) => ({\r\n            ...c,\r\n            name: String(c.name || ''),\r\n            icon: String(c.icon || ''),\r\n            imageUrl: String(c.imageUrl || ''),\r\n            createdAt: String(c.createdAt || new Date().toISOString()),\r\n            modifiedAt: String(c.modifiedAt || new Date().toISOString()),\r\n            comments: String(c.comments || ''),\r\n          }));\r\n        }\r\n        patchState(store, { categories, initialized: true, isLoading: false, error: null });\r\n      } catch (error: any) {\r\n        const errorMessage = error.message || 'Failed to load categories';\r\n        patchState(store, { error: errorMessage, isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    addCategory(category: Omit<Category, 'id' | 'createdAt' | 'modifiedAt'>) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const newCategory: Category = {\r\n          ...category,\r\n          id: Date.now(),\r\n          createdAt: new Date().toISOString(),\r\n          modifiedAt: new Date().toISOString(),\r\n          name: String(category.name || ''),\r\n          icon: String(category.icon || ''),\r\n          imageUrl: String(category.imageUrl || ''),\r\n          comments: String(category.comments || ''),\r\n        };\r\n        const localData = localStorage.getItem('categories');\r\n        const categories = localData ? JSON.parse(localData) : [];\r\n        categories.push(newCategory);\r\n        localStorage.setItem('categories', JSON.stringify(categories));\r\n        patchState(store, {\r\n          categories: [...store.categories(), newCategory],\r\n          isLoading: false,\r\n          error: null,\r\n        });\r\n        return newCategory;\r\n      } catch (error: any) {\r\n        const errorMessage = error.message || 'Failed to add category';\r\n        patchState(store, { error: errorMessage, isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    updateCategory(category: Category) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('categories');\r\n        if (localData) {\r\n          const categories = JSON.parse(localData);\r\n          const updatedCategories = categories.map((c: Category) =>\r\n            c.id === category.id\r\n              ? {\r\n                  ...category,\r\n                  modifiedAt: new Date().toISOString(),\r\n                  name: String(category.name || ''),\r\n                  icon: String(category.icon || ''),\r\n                  imageUrl: String(category.imageUrl || ''),\r\n                  comments: String(category.comments || ''),\r\n                }\r\n              : c\r\n          );\r\n          localStorage.setItem('categories', JSON.stringify(updatedCategories));\r\n          patchState(store, {\r\n            categories: store.categories().map(c =>\r\n              c.id === category.id\r\n                ? {\r\n                    ...category,\r\n                    modifiedAt: new Date().toISOString(),\r\n                    name: String(category.name || ''),\r\n                    icon: String(category.icon || ''),\r\n                    imageUrl: String(category.imageUrl || ''),\r\n                    comments: String(category.comments || ''),\r\n                  }\r\n                : c\r\n            ),\r\n            isLoading: false,\r\n            error: null,\r\n          });\r\n        }\r\n      } catch (error: any) {\r\n        // const errorMessage = error.message || 'Failed to update category';\r\n        // patchState(store, { error: errorMessage, isLoading: false });\r\n        // throw error;\r\n      }\r\n    },\r\n    deleteCategory(id: number) {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('categories');\r\n        if (localData) {\r\n          const categories = JSON.parse(localData);\r\n          const updatedCategories = categories.filter((c: Category) => c.id !== id);\r\n          localStorage.setItem('categories', JSON.stringify(updatedCategories));\r\n          patchState(store, {\r\n            categories: store.categories().filter(c => c.id !== id),\r\n            isLoading: false,\r\n            error: null,\r\n          });\r\n        }\r\n      } catch (error: any) {\r\n        // const errorMessage = error.message || 'Failed to delete category';\r\n        // patchState(store, { error: errorMessage, isLoading: false });\r\n        // throw error;\r\n      }\r\n    },\r\n    setPage(page: number) {\r\n      patchState(store, { currentPage: page });\r\n    },\r\n    setPageSize(pageSize: number) {\r\n      patchState(store, { pageSize, currentPage: 1 });\r\n    },\r\n    setSearchQuery(query: string) {\r\n      patchState(store, { searchQuery: query, currentPage: 1 });\r\n    },\r\n    sortCategories(field: string | null, direction: 'asc' | 'desc') {\r\n      patchState(store, { sortField: field, sortDirection: direction, currentPage: 1 });\r\n    },\r\n  })),\r\n  withHooks({\r\n    onInit(store) {\r\n      store.loadCategories();\r\n    },\r\n  })\r\n);", "import { Injectable, inject } from '@angular/core';\r\nimport { CategoryStore } from './categories.store';\r\nimport { Category } from './category';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class CategoriesService {\r\n  private categoryStore = inject(CategoryStore);\r\n\r\n  categories = this.categoryStore.categories;\r\n  filteredCategories = this.categoryStore.filteredCategories;\r\n  paginatedCategories = this.categoryStore.paginatedCategories;\r\n  totalPages = this.categoryStore.totalPages;\r\n  currentPage = this.categoryStore.currentPage;\r\n  pageSize = this.categoryStore.pageSize;\r\n  isLoading = this.categoryStore.isLoading;\r\n  error = this.categoryStore.error;\r\n\r\n  getCategories() {\r\n    return this.categoryStore.loadCategories();\r\n  }\r\n\r\n  addCategory(category: Omit<Category, 'id' | 'createdAt' | 'modifiedAt'>) {\r\n    return this.categoryStore.addCategory(category);\r\n  }\r\n\r\n  updateCategory(category: Category) {\r\n    return this.categoryStore.updateCategory(category);\r\n  }\r\n\r\n  deleteCategory(id: number) {\r\n    return this.categoryStore.deleteCategory(id);\r\n  }\r\n\r\n  setPage(page: number) {\r\n    this.categoryStore.setPage(page);\r\n  }\r\n\r\n  setPageSize(pageSize: number) {\r\n    this.categoryStore.setPageSize(pageSize);\r\n  }\r\n\r\n  setSearchQuery(query: string) {\r\n    this.categoryStore.setSearchQuery(query);\r\n  }\r\n\r\n  sortCategories(field: string | null, direction: 'asc' | 'desc') {\r\n    this.categoryStore.sortCategories(field, direction);\r\n  }\r\n}"],
  "mappings": "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",
  "names": ["initialState", "categories", "initialized", "error", "currentPage", "pageSize", "searchQuery", "isLoading", "sortField", "sortDirection", "CategoryStore", "signalStore", "providedIn", "withState", "withComputed", "filteredCategories", "computed", "filtered", "filter", "c", "String", "name", "toLowerCase", "includes", "icon", "comments", "sort", "a", "b", "field", "dateA", "Date", "getTime", "dateB", "valueA", "valueB", "localeCompare", "paginatedCategories", "start", "slice", "totalPages", "Math", "ceil", "length", "withMethods", "store", "loadCategories", "patchState", "localData", "localStorage", "getItem", "JSON", "parse", "map", "__spreadProps", "__spreadValues", "imageUrl", "createdAt", "toISOString", "modifiedAt", "errorMessage", "message", "addCategory", "category", "newCategory", "id", "now", "push", "setItem", "stringify", "updateCategory", "updatedCategories", "deleteCategory", "setPage", "page", "setPageSize", "setSearchQuery", "query", "sortCategories", "direction", "withHooks", "onInit", "CategoriesService", "categoryStore", "inject", "CategoryStore", "categories", "filteredCategories", "paginatedCategories", "totalPages", "currentPage", "pageSize", "isLoading", "error", "getCategories", "loadCategories", "addCategory", "category", "updateCategory", "deleteCategory", "id", "setPage", "page", "setPageSize", "setSearchQuery", "query", "sortCategories", "field", "direction", "factory", "\u0275fac", "providedIn"]
}
