{"version":3,"sources":["node_modules/@angular/material/fesm2022/sort.mjs","node_modules/@angular/material/fesm2022/date-formats-K6TQue-Y.mjs","node_modules/@angular/material/fesm2022/datepicker.mjs","node_modules/@angular/material/fesm2022/core.mjs","node_modules/@angular/material/fesm2022/toolbar.mjs","node_modules/@angular/material/fesm2022/autocomplete.mjs","src/app/pages/mat-components/mat-components.store.ts","src/app/pages/mat-components/user-dialog.component.ts","src/app/pages/mat-components/mat-components.component.ts","src/app/pages/mat-components/mat-components.component.html"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, booleanAttribute, Directive, Optional, Inject, Input, Output, Injectable, SkipSelf, inject, ChangeDetectorRef, ElementRef, signal, Component, ViewEncapsulation, ChangeDetectionStrategy, NgModule } from '@angular/core';\nimport { FocusMonitor, AriaDescriber } from '@angular/cdk/a11y';\nimport { SPACE, ENTER } from '@angular/cdk/keycodes';\nimport { ReplaySubject, Subject, merge } from 'rxjs';\nimport { _CdkPrivateStyleLoader } from '@angular/cdk/private';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { _ as _StructuralStylesLoader } from './structural-styles-CObeNzjn.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/bidi';\n\n/** @docs-private */\nconst _c0 = [\"mat-sort-header\", \"\"];\nconst _c1 = [\"*\"];\nfunction MatSortHeader_Conditional_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2);\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(1, \"svg\", 3);\n    i0.ɵɵelement(2, \"path\", 4);\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction getSortDuplicateSortableIdError(id) {\n  return Error(`Cannot have two MatSortables with the same id (${id}).`);\n}\n/** @docs-private */\nfunction getSortHeaderNotContainedWithinSortError() {\n  return Error(`MatSortHeader must be placed within a parent element with the MatSort directive.`);\n}\n/** @docs-private */\nfunction getSortHeaderMissingIdError() {\n  return Error(`MatSortHeader must be provided with a unique id.`);\n}\n/** @docs-private */\nfunction getSortInvalidDirectionError(direction) {\n  return Error(`${direction} is not a valid sort direction ('asc' or 'desc').`);\n}\n\n/** Injection token to be used to override the default options for `mat-sort`. */\nconst MAT_SORT_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('MAT_SORT_DEFAULT_OPTIONS');\n/** Container for MatSortables to manage the sort state and provide default sort parameters. */\nlet MatSort = /*#__PURE__*/(() => {\n  class MatSort {\n    _defaultOptions;\n    _initializedStream = new ReplaySubject(1);\n    /** Collection of all registered sortables that this directive manages. */\n    sortables = new Map();\n    /** Used to notify any child components listening to state changes. */\n    _stateChanges = new Subject();\n    /** The id of the most recently sorted MatSortable. */\n    active;\n    /**\n     * The direction to set when an MatSortable is initially sorted.\n     * May be overridden by the MatSortable's sort start.\n     */\n    start = 'asc';\n    /** The sort direction of the currently active MatSortable. */\n    get direction() {\n      return this._direction;\n    }\n    set direction(direction) {\n      if (direction && direction !== 'asc' && direction !== 'desc' && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getSortInvalidDirectionError(direction);\n      }\n      this._direction = direction;\n    }\n    _direction = '';\n    /**\n     * Whether to disable the user from clearing the sort by finishing the sort direction cycle.\n     * May be overridden by the MatSortable's disable clear input.\n     */\n    disableClear;\n    /** Whether the sortable is disabled. */\n    disabled = false;\n    /** Event emitted when the user changes either the active sort or sort direction. */\n    sortChange = new EventEmitter();\n    /** Emits when the paginator is initialized. */\n    initialized = this._initializedStream;\n    constructor(_defaultOptions) {\n      this._defaultOptions = _defaultOptions;\n    }\n    /**\n     * Register function to be used by the contained MatSortables. Adds the MatSortable to the\n     * collection of MatSortables.\n     */\n    register(sortable) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!sortable.id) {\n          throw getSortHeaderMissingIdError();\n        }\n        if (this.sortables.has(sortable.id)) {\n          throw getSortDuplicateSortableIdError(sortable.id);\n        }\n      }\n      this.sortables.set(sortable.id, sortable);\n    }\n    /**\n     * Unregister function to be used by the contained MatSortables. Removes the MatSortable from the\n     * collection of contained MatSortables.\n     */\n    deregister(sortable) {\n      this.sortables.delete(sortable.id);\n    }\n    /** Sets the active sort id and determines the new sort direction. */\n    sort(sortable) {\n      if (this.active != sortable.id) {\n        this.active = sortable.id;\n        this.direction = sortable.start ? sortable.start : this.start;\n      } else {\n        this.direction = this.getNextSortDirection(sortable);\n      }\n      this.sortChange.emit({\n        active: this.active,\n        direction: this.direction\n      });\n    }\n    /** Returns the next sort direction of the active sortable, checking for potential overrides. */\n    getNextSortDirection(sortable) {\n      if (!sortable) {\n        return '';\n      }\n      // Get the sort direction cycle with the potential sortable overrides.\n      const disableClear = sortable?.disableClear ?? this.disableClear ?? !!this._defaultOptions?.disableClear;\n      let sortDirectionCycle = getSortDirectionCycle(sortable.start || this.start, disableClear);\n      // Get and return the next direction in the cycle\n      let nextDirectionIndex = sortDirectionCycle.indexOf(this.direction) + 1;\n      if (nextDirectionIndex >= sortDirectionCycle.length) {\n        nextDirectionIndex = 0;\n      }\n      return sortDirectionCycle[nextDirectionIndex];\n    }\n    ngOnInit() {\n      this._initializedStream.next();\n    }\n    ngOnChanges() {\n      this._stateChanges.next();\n    }\n    ngOnDestroy() {\n      this._stateChanges.complete();\n      this._initializedStream.complete();\n    }\n    static ɵfac = function MatSort_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSort)(i0.ɵɵdirectiveInject(MAT_SORT_DEFAULT_OPTIONS, 8));\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatSort,\n      selectors: [[\"\", \"matSort\", \"\"]],\n      hostAttrs: [1, \"mat-sort\"],\n      inputs: {\n        active: [0, \"matSortActive\", \"active\"],\n        start: [0, \"matSortStart\", \"start\"],\n        direction: [0, \"matSortDirection\", \"direction\"],\n        disableClear: [2, \"matSortDisableClear\", \"disableClear\", booleanAttribute],\n        disabled: [2, \"matSortDisabled\", \"disabled\", booleanAttribute]\n      },\n      outputs: {\n        sortChange: \"matSortChange\"\n      },\n      exportAs: [\"matSort\"],\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatSort;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Returns the sort direction cycle to use given the provided parameters of order and clear. */\nfunction getSortDirectionCycle(start, disableClear) {\n  let sortOrder = ['asc', 'desc'];\n  if (start == 'desc') {\n    sortOrder.reverse();\n  }\n  if (!disableClear) {\n    sortOrder.push('');\n  }\n  return sortOrder;\n}\n\n/**\n * To modify the labels and text displayed, create a new instance of MatSortHeaderIntl and\n * include it in a custom provider.\n */\nlet MatSortHeaderIntl = /*#__PURE__*/(() => {\n  class MatSortHeaderIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    changes = new Subject();\n    static ɵfac = function MatSortHeaderIntl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSortHeaderIntl)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatSortHeaderIntl,\n      factory: MatSortHeaderIntl.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MatSortHeaderIntl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SORT_HEADER_INTL_PROVIDER_FACTORY(parentIntl) {\n  return parentIntl || new MatSortHeaderIntl();\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SORT_HEADER_INTL_PROVIDER = {\n  // If there is already an MatSortHeaderIntl available, use that. Otherwise, provide a new one.\n  provide: MatSortHeaderIntl,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatSortHeaderIntl]],\n  useFactory: MAT_SORT_HEADER_INTL_PROVIDER_FACTORY\n};\n\n/**\n * Applies sorting behavior (click to change sort) and styles to an element, including an\n * arrow to display the current sort direction.\n *\n * Must be provided with an id and contained within a parent MatSort directive.\n *\n * If used on header cells in a CdkTable, it will automatically default its id from its containing\n * column definition.\n */\nlet MatSortHeader = /*#__PURE__*/(() => {\n  class MatSortHeader {\n    _intl = inject(MatSortHeaderIntl);\n    _sort = inject(MatSort, {\n      optional: true\n    });\n    _columnDef = inject('MAT_SORT_HEADER_COLUMN_DEF', {\n      optional: true\n    });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _focusMonitor = inject(FocusMonitor);\n    _elementRef = inject(ElementRef);\n    _ariaDescriber = inject(AriaDescriber, {\n      optional: true\n    });\n    _renderChanges;\n    _animationsDisabled = _animationsDisabled();\n    /**\n     * Indicates which state was just cleared from the sort header.\n     * Will be reset on the next interaction. Used for coordinating animations.\n     */\n    _recentlyCleared = signal(null);\n    /**\n     * The element with role=\"button\" inside this component's view. We need this\n     * in order to apply a description with AriaDescriber.\n     */\n    _sortButton;\n    /**\n     * ID of this sort header. If used within the context of a CdkColumnDef, this will default to\n     * the column's name.\n     */\n    id;\n    /** Sets the position of the arrow that displays when sorted. */\n    arrowPosition = 'after';\n    /** Overrides the sort start value of the containing MatSort for this MatSortable. */\n    start;\n    /** whether the sort header is disabled. */\n    disabled = false;\n    /**\n     * Description applied to MatSortHeader's button element with aria-describedby. This text should\n     * describe the action that will occur when the user clicks the sort header.\n     */\n    get sortActionDescription() {\n      return this._sortActionDescription;\n    }\n    set sortActionDescription(value) {\n      this._updateSortActionDescription(value);\n    }\n    // Default the action description to \"Sort\" because it's better than nothing.\n    // Without a description, the button's label comes from the sort header text content,\n    // which doesn't give any indication that it performs a sorting operation.\n    _sortActionDescription = 'Sort';\n    /** Overrides the disable clear value of the containing MatSort for this MatSortable. */\n    disableClear;\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n      const defaultOptions = inject(MAT_SORT_DEFAULT_OPTIONS, {\n        optional: true\n      });\n      // Note that we use a string token for the `_columnDef`, because the value is provided both by\n      // `material/table` and `cdk/table` and we can't have the CDK depending on Material,\n      // and we want to avoid having the sort header depending on the CDK table because\n      // of this single reference.\n      if (!this._sort && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getSortHeaderNotContainedWithinSortError();\n      }\n      if (defaultOptions?.arrowPosition) {\n        this.arrowPosition = defaultOptions?.arrowPosition;\n      }\n    }\n    ngOnInit() {\n      if (!this.id && this._columnDef) {\n        this.id = this._columnDef.name;\n      }\n      this._sort.register(this);\n      this._renderChanges = merge(this._sort._stateChanges, this._sort.sortChange).subscribe(() => this._changeDetectorRef.markForCheck());\n      this._sortButton = this._elementRef.nativeElement.querySelector('.mat-sort-header-container');\n      this._updateSortActionDescription(this._sortActionDescription);\n    }\n    ngAfterViewInit() {\n      // We use the focus monitor because we also want to style\n      // things differently based on the focus origin.\n      this._focusMonitor.monitor(this._elementRef, true).subscribe(() => this._recentlyCleared.set(null));\n    }\n    ngOnDestroy() {\n      this._focusMonitor.stopMonitoring(this._elementRef);\n      this._sort.deregister(this);\n      this._renderChanges?.unsubscribe();\n      if (this._sortButton) {\n        this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n      }\n    }\n    /** Triggers the sort on this sort header and removes the indicator hint. */\n    _toggleOnInteraction() {\n      if (!this._isDisabled()) {\n        const wasSorted = this._isSorted();\n        const prevDirection = this._sort.direction;\n        this._sort.sort(this);\n        this._recentlyCleared.set(wasSorted && !this._isSorted() ? prevDirection : null);\n      }\n    }\n    _handleKeydown(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        event.preventDefault();\n        this._toggleOnInteraction();\n      }\n    }\n    /** Whether this MatSortHeader is currently sorted in either ascending or descending order. */\n    _isSorted() {\n      return this._sort.active == this.id && (this._sort.direction === 'asc' || this._sort.direction === 'desc');\n    }\n    _isDisabled() {\n      return this._sort.disabled || this.disabled;\n    }\n    /**\n     * Gets the aria-sort attribute that should be applied to this sort header. If this header\n     * is not sorted, returns null so that the attribute is removed from the host element. Aria spec\n     * says that the aria-sort property should only be present on one header at a time, so removing\n     * ensures this is true.\n     */\n    _getAriaSortAttribute() {\n      if (!this._isSorted()) {\n        return 'none';\n      }\n      return this._sort.direction == 'asc' ? 'ascending' : 'descending';\n    }\n    /** Whether the arrow inside the sort header should be rendered. */\n    _renderArrow() {\n      return !this._isDisabled() || this._isSorted();\n    }\n    _updateSortActionDescription(newDescription) {\n      // We use AriaDescriber for the sort button instead of setting an `aria-label` because some\n      // screen readers (notably VoiceOver) will read both the column header *and* the button's label\n      // for every *cell* in the table, creating a lot of unnecessary noise.\n      // If _sortButton is undefined, the component hasn't been initialized yet so there's\n      // nothing to update in the DOM.\n      if (this._sortButton) {\n        // removeDescription will no-op if there is no existing message.\n        // TODO(jelbourn): remove optional chaining when AriaDescriber is required.\n        this._ariaDescriber?.removeDescription(this._sortButton, this._sortActionDescription);\n        this._ariaDescriber?.describe(this._sortButton, newDescription);\n      }\n      this._sortActionDescription = newDescription;\n    }\n    static ɵfac = function MatSortHeader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSortHeader)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatSortHeader,\n      selectors: [[\"\", \"mat-sort-header\", \"\"]],\n      hostAttrs: [1, \"mat-sort-header\"],\n      hostVars: 3,\n      hostBindings: function MatSortHeader_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatSortHeader_click_HostBindingHandler() {\n            return ctx._toggleOnInteraction();\n          })(\"keydown\", function MatSortHeader_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          })(\"mouseleave\", function MatSortHeader_mouseleave_HostBindingHandler() {\n            return ctx._recentlyCleared.set(null);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"aria-sort\", ctx._getAriaSortAttribute());\n          i0.ɵɵclassProp(\"mat-sort-header-disabled\", ctx._isDisabled());\n        }\n      },\n      inputs: {\n        id: [0, \"mat-sort-header\", \"id\"],\n        arrowPosition: \"arrowPosition\",\n        start: \"start\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        sortActionDescription: \"sortActionDescription\",\n        disableClear: [2, \"disableClear\", \"disableClear\", booleanAttribute]\n      },\n      exportAs: [\"matSortHeader\"],\n      attrs: _c0,\n      ngContentSelectors: _c1,\n      decls: 4,\n      vars: 17,\n      consts: [[1, \"mat-sort-header-container\", \"mat-focus-indicator\"], [1, \"mat-sort-header-content\"], [1, \"mat-sort-header-arrow\"], [\"viewBox\", \"0 -960 960 960\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M440-240v-368L296-464l-56-56 240-240 240 240-56 56-144-144v368h-80Z\"]],\n      template: function MatSortHeader_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n          i0.ɵɵprojection(2);\n          i0.ɵɵelementEnd();\n          i0.ɵɵconditionalCreate(3, MatSortHeader_Conditional_3_Template, 3, 0, \"div\", 2);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-sort-header-sorted\", ctx._isSorted())(\"mat-sort-header-position-before\", ctx.arrowPosition === \"before\")(\"mat-sort-header-descending\", ctx._sort.direction === \"desc\")(\"mat-sort-header-ascending\", ctx._sort.direction === \"asc\")(\"mat-sort-header-recently-cleared-ascending\", ctx._recentlyCleared() === \"asc\")(\"mat-sort-header-recently-cleared-descending\", ctx._recentlyCleared() === \"desc\")(\"mat-sort-header-animations-disabled\", ctx._animationsDisabled);\n          i0.ɵɵattribute(\"tabindex\", ctx._isDisabled() ? null : 0)(\"role\", ctx._isDisabled() ? null : \"button\");\n          i0.ɵɵadvance(3);\n          i0.ɵɵconditional(ctx._renderArrow() ? 3 : -1);\n        }\n      },\n      styles: [\".mat-sort-header{cursor:pointer}.mat-sort-header-disabled{cursor:default}.mat-sort-header-container{display:flex;align-items:center;letter-spacing:normal;outline:0}[mat-sort-header].cdk-keyboard-focused .mat-sort-header-container,[mat-sort-header].cdk-program-focused .mat-sort-header-container{border-bottom:solid 1px currentColor}.mat-sort-header-container::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 2px)*-1)}.mat-sort-header-content{display:flex;align-items:center}.mat-sort-header-position-before{flex-direction:row-reverse}@keyframes _mat-sort-header-recently-cleared-ascending{from{transform:translateY(0);opacity:1}to{transform:translateY(-25%);opacity:0}}@keyframes _mat-sort-header-recently-cleared-descending{from{transform:translateY(0) rotate(180deg);opacity:1}to{transform:translateY(25%) rotate(180deg);opacity:0}}.mat-sort-header-arrow{height:12px;width:12px;position:relative;transition:transform 225ms cubic-bezier(0.4, 0, 0.2, 1),opacity 225ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;overflow:visible;color:var(--mat-sort-arrow-color, var(--mat-sys-on-surface))}.mat-sort-header.cdk-keyboard-focused .mat-sort-header-arrow,.mat-sort-header.cdk-program-focused .mat-sort-header-arrow,.mat-sort-header:hover .mat-sort-header-arrow{opacity:.54}.mat-sort-header .mat-sort-header-sorted .mat-sort-header-arrow{opacity:1}.mat-sort-header-descending .mat-sort-header-arrow{transform:rotate(180deg)}.mat-sort-header-recently-cleared-ascending .mat-sort-header-arrow{transform:translateY(-25%)}.mat-sort-header-recently-cleared-ascending .mat-sort-header-arrow{transition:none;animation:_mat-sort-header-recently-cleared-ascending 225ms cubic-bezier(0.4, 0, 0.2, 1) forwards}.mat-sort-header-recently-cleared-descending .mat-sort-header-arrow{transition:none;animation:_mat-sort-header-recently-cleared-descending 225ms cubic-bezier(0.4, 0, 0.2, 1) forwards}.mat-sort-header-animations-disabled .mat-sort-header-arrow{transition-duration:0ms;animation-duration:0ms}.mat-sort-header-arrow svg{width:24px;height:24px;fill:currentColor;position:absolute;top:50%;left:50%;margin:-12px 0 0 -12px;transform:translateZ(0)}.mat-sort-header-arrow,[dir=rtl] .mat-sort-header-position-before .mat-sort-header-arrow{margin:0 0 0 6px}.mat-sort-header-position-before .mat-sort-header-arrow,[dir=rtl] .mat-sort-header-arrow{margin:0 6px 0 0}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatSortHeader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatSortModule = /*#__PURE__*/(() => {\n  class MatSortModule {\n    static ɵfac = function MatSortModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSortModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatSortModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MAT_SORT_HEADER_INTL_PROVIDER],\n      imports: [MatCommonModule]\n    });\n  }\n  return MatSortModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by MatSort.\n * @docs-private\n * @deprecated No longer being used, to be removed.\n * @breaking-change 21.0.0\n */\nconst matSortAnimations = {\n  // Represents:\n  // trigger('indicator', [\n  //   state('active-asc, asc', style({transform: 'translateY(0px)'})),\n  //   // 10px is the height of the sort indicator, minus the width of the pointers\n  //   state('active-desc, desc', style({transform: 'translateY(10px)'})),\n  //   transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n  // ])\n  /** Animation that moves the sort indicator. */\n  indicator: {\n    type: 7,\n    name: 'indicator',\n    definitions: [{\n      type: 0,\n      name: 'active-asc, asc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'translateY(0px)'\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'active-desc, desc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'translateY(10px)'\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: 'active-asc <=> active-desc',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('leftPointer', [\n  //   state('active-asc, asc', style({transform: 'rotate(-45deg)'})),\n  //   state('active-desc, desc', style({transform: 'rotate(45deg)'})),\n  //   transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n  // ])\n  /** Animation that rotates the left pointer of the indicator based on the sorting direction. */\n  leftPointer: {\n    type: 7,\n    name: 'leftPointer',\n    definitions: [{\n      type: 0,\n      name: 'active-asc, asc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'rotate(-45deg)'\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'active-desc, desc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'rotate(45deg)'\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: 'active-asc <=> active-desc',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('rightPointer', [\n  //   state('active-asc, asc', style({transform: 'rotate(45deg)'})),\n  //   state('active-desc, desc', style({transform: 'rotate(-45deg)'})),\n  //   transition('active-asc <=> active-desc', animate(SORT_ANIMATION_TRANSITION)),\n  // ])\n  /** Animation that rotates the right pointer of the indicator based on the sorting direction. */\n  rightPointer: {\n    type: 7,\n    name: 'rightPointer',\n    definitions: [{\n      type: 0,\n      name: 'active-asc, asc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'rotate(45deg)'\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'active-desc, desc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'rotate(-45deg)'\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: 'active-asc <=> active-desc',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('arrowOpacity', [\n  //   state('desc-to-active, asc-to-active, active', style({opacity: 1})),\n  //   state('desc-to-hint, asc-to-hint, hint', style({opacity: 0.54})),\n  //   state(\n  //     'hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n  //     style({opacity: 0}),\n  //   ),\n  //   // Transition between all states except for immediate transitions\n  //   transition('* => asc, * => desc, * => active, * => hint, * => void', animate('0ms')),\n  //   transition('* <=> *', animate(SORT_ANIMATION_TRANSITION)),\n  // ])\n  /** Animation that controls the arrow opacity. */\n  arrowOpacity: {\n    type: 7,\n    name: 'arrowOpacity',\n    definitions: [{\n      type: 0,\n      name: 'desc-to-active, asc-to-active, active',\n      styles: {\n        type: 6,\n        styles: {\n          'opacity': 1\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'desc-to-hint, asc-to-hint, hint',\n      styles: {\n        type: 6,\n        styles: {\n          'opacity': 0.54\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'hint-to-desc, active-to-desc, desc, hint-to-asc, active-to-asc, asc, void',\n      styles: {\n        type: 6,\n        styles: {\n          'opacity': 0\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: '* => asc, * => desc, * => active, * => hint, * => void',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '0ms'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* <=> *',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('arrowPosition', [\n  //   // Hidden Above => Hint Center\n  //   transition(\n  //     '* => desc-to-hint, * => desc-to-active',\n  //     animate(\n  //       SORT_ANIMATION_TRANSITION,\n  //       keyframes([style({transform: 'translateY(-25%)'}), style({transform: 'translateY(0)'})]),\n  //     ),\n  //   ),\n  //   // Hint Center => Hidden Below\n  //   transition(\n  //     '* => hint-to-desc, * => active-to-desc',\n  //     animate(\n  //       SORT_ANIMATION_TRANSITION,\n  //       keyframes([style({transform: 'translateY(0)'}), style({transform: 'translateY(25%)'})]),\n  //     ),\n  //   ),\n  //   // Hidden Below => Hint Center\n  //   transition(\n  //     '* => asc-to-hint, * => asc-to-active',\n  //     animate(\n  //       SORT_ANIMATION_TRANSITION,\n  //       keyframes([style({transform: 'translateY(25%)'}), style({transform: 'translateY(0)'})]),\n  //     ),\n  //   ),\n  //   // Hint Center => Hidden Above\n  //   transition(\n  //     '* => hint-to-asc, * => active-to-asc',\n  //     animate(\n  //       SORT_ANIMATION_TRANSITION,\n  //       keyframes([style({transform: 'translateY(0)'}), style({transform: 'translateY(-25%)'})]),\n  //     ),\n  //   ),\n  //   state(\n  //     'desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n  //     style({transform: 'translateY(0)'}),\n  //   ),\n  //   state('hint-to-desc, active-to-desc, desc', style({transform: 'translateY(-25%)'})),\n  //   state('hint-to-asc, active-to-asc, asc', style({transform: 'translateY(25%)'})),\n  // ])\n  /**\n   * Animation for the translation of the arrow as a whole. States are separated into two\n   * groups: ones with animations and others that are immediate. Immediate states are asc, desc,\n   * peek, and active. The other states define a specific animation (source-to-destination)\n   * and are determined as a function of their prev user-perceived state and what the next state\n   * should be.\n   */\n  arrowPosition: {\n    type: 7,\n    name: 'arrowPosition',\n    definitions: [{\n      type: 1,\n      expr: '* => desc-to-hint, * => desc-to-active',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          'steps': [{\n            type: 6,\n            styles: {\n              transform: 'translateY(-25%)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              transform: 'translateY(0)'\n            },\n            offset: null\n          }]\n        },\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* => hint-to-desc, * => active-to-desc',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          'steps': [{\n            type: 6,\n            styles: {\n              transform: 'translateY(0)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              transform: 'translateY(25%)'\n            },\n            offset: null\n          }]\n        },\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* => asc-to-hint, * => asc-to-active',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          'steps': [{\n            type: 6,\n            styles: {\n              transform: 'translateY(25%)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              transform: 'translateY(0)'\n            },\n            offset: null\n          }]\n        },\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* => hint-to-asc, * => active-to-asc',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          'steps': [{\n            type: 6,\n            styles: {\n              transform: 'translateY(0)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              transform: 'translateY(-25%)'\n            },\n            offset: null\n          }]\n        },\n        timings: '225ms cubic-bezier(0.4,0.0,0.2,1)'\n      },\n      options: null\n    }, {\n      type: 0,\n      name: 'desc-to-hint, asc-to-hint, hint, desc-to-active, asc-to-active, active',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'translateY(0)'\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'hint-to-desc, active-to-desc, desc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'translateY(-25%)'\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'hint-to-asc, active-to-asc, asc',\n      styles: {\n        type: 6,\n        styles: {\n          transform: 'translateY(25%)'\n        },\n        offset: null\n      }\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('allowChildren', [\n  //   transition('* <=> *', [query('@*', animateChild(), {optional: true})]),\n  // ])\n  /** Necessary trigger that calls animate on children animations. */\n  allowChildren: {\n    type: 7,\n    name: 'allowChildren',\n    definitions: [{\n      type: 1,\n      expr: '* <=> *',\n      animation: [{\n        type: 11,\n        selector: '@*',\n        animation: {\n          type: 9,\n          options: null\n        },\n        options: {\n          optional: true\n        }\n      }],\n      options: null\n    }],\n    options: {}\n  }\n};\nexport { MAT_SORT_DEFAULT_OPTIONS, MAT_SORT_HEADER_INTL_PROVIDER, MAT_SORT_HEADER_INTL_PROVIDER_FACTORY, MatSort, MatSortHeader, MatSortHeaderIntl, MatSortModule, matSortAnimations };\n","import { InjectionToken, inject, LOCALE_ID } from '@angular/core';\nimport { Subject } from 'rxjs';\n\n/** InjectionToken for datepicker that can be used to override default locale code. */\nconst MAT_DATE_LOCALE = /*#__PURE__*/new InjectionToken('MAT_DATE_LOCALE', {\n  providedIn: 'root',\n  factory: MAT_DATE_LOCALE_FACTORY\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_DATE_LOCALE_FACTORY() {\n  return inject(LOCALE_ID);\n}\nconst NOT_IMPLEMENTED = 'Method not implemented';\n/** Adapts type `D` to be usable as a date by cdk-based components that work with dates. */\nclass DateAdapter {\n  /** The locale to use for all dates. */\n  locale;\n  _localeChanges = /*#__PURE__*/new Subject();\n  /** A stream that emits when the locale changes. */\n  localeChanges = this._localeChanges;\n  /**\n   * Sets the time of one date to the time of another.\n   * @param target Date whose time will be set.\n   * @param hours New hours to set on the date object.\n   * @param minutes New minutes to set on the date object.\n   * @param seconds New seconds to set on the date object.\n   */\n  setTime(target, hours, minutes, seconds) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Gets the hours component of the given date.\n   * @param date The date to extract the hours from.\n   */\n  getHours(date) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Gets the minutes component of the given date.\n   * @param date The date to extract the minutes from.\n   */\n  getMinutes(date) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Gets the seconds component of the given date.\n   * @param date The date to extract the seconds from.\n   */\n  getSeconds(date) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Parses a date with a specific time from a user-provided value.\n   * @param value The value to parse.\n   * @param parseFormat The expected format of the value being parsed\n   *     (type is implementation-dependent).\n   */\n  parseTime(value, parseFormat) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Adds an amount of seconds to the specified date.\n   * @param date Date to which to add the seconds.\n   * @param amount Amount of seconds to add to the date.\n   */\n  addSeconds(date, amount) {\n    throw new Error(NOT_IMPLEMENTED);\n  }\n  /**\n   * Given a potential date object, returns that same date object if it is\n   * a valid date, or `null` if it's not a valid date.\n   * @param obj The object to check.\n   * @returns A date or `null`.\n   */\n  getValidDateOrNull(obj) {\n    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;\n  }\n  /**\n   * Attempts to deserialize a value to a valid date object. This is different from parsing in that\n   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601\n   * string). The default implementation does not allow any deserialization, it simply checks that\n   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this\n   * method on all of its `@Input()` properties that accept dates. It is therefore possible to\n   * support passing values from your backend directly to these properties by overriding this method\n   * to also deserialize the format used by your backend.\n   * @param value The value to be deserialized into a date object.\n   * @returns The deserialized date object, either a valid date, null if the value can be\n   *     deserialized into a null date (e.g. the empty string), or an invalid date.\n   */\n  deserialize(value) {\n    if (value == null || this.isDateInstance(value) && this.isValid(value)) {\n      return value;\n    }\n    return this.invalid();\n  }\n  /**\n   * Sets the locale used for all dates.\n   * @param locale The new locale.\n   */\n  setLocale(locale) {\n    this.locale = locale;\n    this._localeChanges.next();\n  }\n  /**\n   * Compares two dates.\n   * @param first The first date to compare.\n   * @param second The second date to compare.\n   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,\n   *     a number greater than 0 if the first date is later.\n   */\n  compareDate(first, second) {\n    return this.getYear(first) - this.getYear(second) || this.getMonth(first) - this.getMonth(second) || this.getDate(first) - this.getDate(second);\n  }\n  /**\n   * Compares the time values of two dates.\n   * @param first First date to compare.\n   * @param second Second date to compare.\n   * @returns 0 if the times are equal, a number less than 0 if the first time is earlier,\n   *     a number greater than 0 if the first time is later.\n   */\n  compareTime(first, second) {\n    return this.getHours(first) - this.getHours(second) || this.getMinutes(first) - this.getMinutes(second) || this.getSeconds(first) - this.getSeconds(second);\n  }\n  /**\n   * Checks if two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameDate(first, second) {\n    if (first && second) {\n      let firstValid = this.isValid(first);\n      let secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareDate(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n  /**\n   * Checks if the times of two dates are equal.\n   * @param first The first date to check.\n   * @param second The second date to check.\n   * @returns Whether the times of the two dates are equal.\n   *     Null dates are considered equal to other null dates.\n   */\n  sameTime(first, second) {\n    if (first && second) {\n      const firstValid = this.isValid(first);\n      const secondValid = this.isValid(second);\n      if (firstValid && secondValid) {\n        return !this.compareTime(first, second);\n      }\n      return firstValid == secondValid;\n    }\n    return first == second;\n  }\n  /**\n   * Clamp the given date between min and max dates.\n   * @param date The date to clamp.\n   * @param min The minimum value to allow. If null or omitted no min is enforced.\n   * @param max The maximum value to allow. If null or omitted no max is enforced.\n   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,\n   *     otherwise `date`.\n   */\n  clampDate(date, min, max) {\n    if (min && this.compareDate(date, min) < 0) {\n      return min;\n    }\n    if (max && this.compareDate(date, max) > 0) {\n      return max;\n    }\n    return date;\n  }\n}\nconst MAT_DATE_FORMATS = /*#__PURE__*/new InjectionToken('mat-date-formats');\nexport { DateAdapter as D, MAT_DATE_LOCALE as M, MAT_DATE_FORMATS as a, MAT_DATE_LOCALE_FACTORY as b };\n","import * as i0 from '@angular/core';\nimport { Injectable, inject, ElementRef, NgZone, EventEmitter, Injector, Renderer2, afterNextRender, Component, ViewEncapsulation, ChangeDetectionStrategy, Input, Output, Optional, SkipSelf, InjectionToken, ChangeDetectorRef, ViewChild, ViewContainerRef, DOCUMENT, booleanAttribute, Directive, forwardRef, signal, HostAttributeToken, ContentChild, TemplateRef, NgModule } from '@angular/core';\nimport { Subject, Subscription, merge, of } from 'rxjs';\nimport { D as DateAdapter, a as MAT_DATE_FORMATS } from './date-formats-K6TQue-Y.mjs';\nimport { _IdGenerator, CdkMonitorFocus, CdkTrapFocus, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { coerceStringArray } from '@angular/cdk/coercion';\nimport { ESCAPE, hasModifierKey, SPACE, ENTER, PAGE_DOWN, PAGE_UP, END, HOME, DOWN_ARROW, UP_ARROW, RIGHT_ARROW, LEFT_ARROW, BACKSPACE } from '@angular/cdk/keycodes';\nimport { createRepositionScrollStrategy, FlexibleConnectedPositionStrategy, createOverlayRef, OverlayConfig, createBlockScrollStrategy, createGlobalPositionStrategy, createFlexibleConnectedPositionStrategy, OverlayModule } from '@angular/cdk/overlay';\nimport { Platform, _getFocusedElementPierceShadowDom } from '@angular/cdk/platform';\nimport { ComponentPortal, CdkPortalOutlet, TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { startWith, take, filter } from 'rxjs/operators';\nimport { NgClass } from '@angular/common';\nimport { _CdkPrivateStyleLoader, _VisuallyHiddenLoader } from '@angular/cdk/private';\nimport { _ as _StructuralStylesLoader } from './structural-styles-CObeNzjn.mjs';\nimport { MatButton, MatButtonModule } from './button.mjs';\nimport { M as MatIconButton } from './icon-button-DxiIc1ex.mjs';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, Validators, ControlContainer, NgForm, FormGroupDirective, NgControl } from '@angular/forms';\nimport { M as MAT_INPUT_VALUE_ACCESSOR } from './input-value-accessor-D1GvPuqO.mjs';\nimport { h as MAT_FORM_FIELD, k as MatFormFieldControl } from './form-field-C9DZXojn.mjs';\nimport { E as ErrorStateMatcher } from './error-options-DCNQlTOA.mjs';\nimport { _ as _ErrorStateTracker } from './error-state-Dtb1IHM-.mjs';\nimport { CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport './index-BFRo2fUq.mjs';\nimport './ripple-BYgV4oZC.mjs';\nimport './ripple-loader-BnMiRtmT.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/observers/private';\n\n/** @docs-private */\nconst _c0 = [\"mat-calendar-body\", \"\"];\nfunction _forTrack0($index, $item) {\n  return this._trackRow($item);\n}\nconst _forTrack1 = ($index, $item) => $item.id;\nfunction MatCalendarBody_Conditional_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 0)(1, \"td\", 3);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"colspan\", ctx_r0.numCols);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.label, \" \");\n  }\n}\nfunction MatCalendarBody_For_2_Conditional_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"td\", 3);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext(2);\n    i0.ɵɵstyleProp(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"colspan\", ctx_r0._firstRowOffset);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0._firstRowOffset >= ctx_r0.labelMinRequiredCells ? ctx_r0.label : \"\", \" \");\n  }\n}\nfunction MatCalendarBody_For_2_For_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"td\", 6)(1, \"button\", 7);\n    i0.ɵɵlistener(\"click\", function MatCalendarBody_For_2_For_3_Template_button_click_1_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._cellClicked(item_r3, $event));\n    })(\"focus\", function MatCalendarBody_For_2_For_3_Template_button_focus_1_listener($event) {\n      const item_r3 = i0.ɵɵrestoreView(_r2).$implicit;\n      const ctx_r0 = i0.ɵɵnextContext(2);\n      return i0.ɵɵresetView(ctx_r0._emitActiveDateChange(item_r3, $event));\n    });\n    i0.ɵɵelementStart(2, \"span\", 8);\n    i0.ɵɵtext(3);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(4, \"span\", 9);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r3 = ctx.$implicit;\n    const ɵ$index_14_r4 = ctx.$index;\n    const ɵ$index_7_r5 = i0.ɵɵnextContext().$index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵstyleProp(\"width\", ctx_r0._cellWidth)(\"padding-top\", ctx_r0._cellPadding)(\"padding-bottom\", ctx_r0._cellPadding);\n    i0.ɵɵattribute(\"data-mat-row\", ɵ$index_7_r5)(\"data-mat-col\", ɵ$index_14_r4);\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"mat-calendar-body-disabled\", !item_r3.enabled)(\"mat-calendar-body-active\", ctx_r0._isActiveCell(ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-range-start\", ctx_r0._isRangeStart(item_r3.compareValue))(\"mat-calendar-body-range-end\", ctx_r0._isRangeEnd(item_r3.compareValue))(\"mat-calendar-body-in-range\", ctx_r0._isInRange(item_r3.compareValue))(\"mat-calendar-body-comparison-bridge-start\", ctx_r0._isComparisonBridgeStart(item_r3.compareValue, ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-comparison-bridge-end\", ctx_r0._isComparisonBridgeEnd(item_r3.compareValue, ɵ$index_7_r5, ɵ$index_14_r4))(\"mat-calendar-body-comparison-start\", ctx_r0._isComparisonStart(item_r3.compareValue))(\"mat-calendar-body-comparison-end\", ctx_r0._isComparisonEnd(item_r3.compareValue))(\"mat-calendar-body-in-comparison-range\", ctx_r0._isInComparisonRange(item_r3.compareValue))(\"mat-calendar-body-preview-start\", ctx_r0._isPreviewStart(item_r3.compareValue))(\"mat-calendar-body-preview-end\", ctx_r0._isPreviewEnd(item_r3.compareValue))(\"mat-calendar-body-in-preview\", ctx_r0._isInPreview(item_r3.compareValue));\n    i0.ɵɵproperty(\"ngClass\", item_r3.cssClasses)(\"tabindex\", ctx_r0._isActiveCell(ɵ$index_7_r5, ɵ$index_14_r4) ? 0 : -1);\n    i0.ɵɵattribute(\"aria-label\", item_r3.ariaLabel)(\"aria-disabled\", !item_r3.enabled || null)(\"aria-pressed\", ctx_r0._isSelected(item_r3.compareValue))(\"aria-current\", ctx_r0.todayValue === item_r3.compareValue ? \"date\" : null)(\"aria-describedby\", ctx_r0._getDescribedby(item_r3.compareValue));\n    i0.ɵɵadvance();\n    i0.ɵɵclassProp(\"mat-calendar-body-selected\", ctx_r0._isSelected(item_r3.compareValue))(\"mat-calendar-body-comparison-identical\", ctx_r0._isComparisonIdentical(item_r3.compareValue))(\"mat-calendar-body-today\", ctx_r0.todayValue === item_r3.compareValue);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", item_r3.displayValue, \" \");\n  }\n}\nfunction MatCalendarBody_For_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 1);\n    i0.ɵɵconditionalCreate(1, MatCalendarBody_For_2_Conditional_1_Template, 2, 6, \"td\", 4);\n    i0.ɵɵrepeaterCreate(2, MatCalendarBody_For_2_For_3_Template, 5, 48, \"td\", 5, _forTrack1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const row_r6 = ctx.$implicit;\n    const ɵ$index_7_r5 = ctx.$index;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵconditional(ɵ$index_7_r5 === 0 && ctx_r0._firstRowOffset ? 1 : -1);\n    i0.ɵɵadvance();\n    i0.ɵɵrepeater(row_r6);\n  }\n}\nfunction MatMonthView_For_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"th\", 2)(1, \"span\", 6);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"span\", 3);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const day_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r1.long);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(day_r1.narrow);\n  }\n}\nconst _c1 = [\"*\"];\nfunction MatCalendar_ng_template_0_Template(rf, ctx) {}\nfunction MatCalendar_Case_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r1 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-month-view\", 4);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_2_Template_mat_month_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"_userSelection\", function MatCalendar_Case_2_Template_mat_month_view__userSelection_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dateSelected($event));\n    })(\"dragStarted\", function MatCalendar_Case_2_Template_mat_month_view_dragStarted_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dragStarted($event));\n    })(\"dragEnded\", function MatCalendar_Case_2_Template_mat_month_view_dragEnded_0_listener($event) {\n      i0.ɵɵrestoreView(_r1);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._dragEnded($event));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass)(\"comparisonStart\", ctx_r1.comparisonStart)(\"comparisonEnd\", ctx_r1.comparisonEnd)(\"startDateAccessibleName\", ctx_r1.startDateAccessibleName)(\"endDateAccessibleName\", ctx_r1.endDateAccessibleName)(\"activeDrag\", ctx_r1._activeDrag);\n  }\n}\nfunction MatCalendar_Case_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-year-view\", 5);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_3_Template_mat_year_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"monthSelected\", function MatCalendar_Case_3_Template_mat_year_view_monthSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._monthSelectedInYearView($event));\n    })(\"selectedChange\", function MatCalendar_Case_3_Template_mat_year_view_selectedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r3);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._goToDateInView($event, \"month\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\nfunction MatCalendar_Case_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"mat-multi-year-view\", 6);\n    i0.ɵɵtwoWayListener(\"activeDateChange\", function MatCalendar_Case_4_Template_mat_multi_year_view_activeDateChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      i0.ɵɵtwoWayBindingSet(ctx_r1.activeDate, $event) || (ctx_r1.activeDate = $event);\n      return i0.ɵɵresetView($event);\n    });\n    i0.ɵɵlistener(\"yearSelected\", function MatCalendar_Case_4_Template_mat_multi_year_view_yearSelected_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._yearSelectedInMultiYearView($event));\n    })(\"selectedChange\", function MatCalendar_Case_4_Template_mat_multi_year_view_selectedChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r4);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r1._goToDateInView($event, \"year\"));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵtwoWayProperty(\"activeDate\", ctx_r1.activeDate);\n    i0.ɵɵproperty(\"selected\", ctx_r1.selected)(\"dateFilter\", ctx_r1.dateFilter)(\"maxDate\", ctx_r1.maxDate)(\"minDate\", ctx_r1.minDate)(\"dateClass\", ctx_r1.dateClass);\n  }\n}\nfunction MatDatepickerContent_ng_template_2_Template(rf, ctx) {}\nconst _c2 = [\"button\"];\nconst _c3 = [[[\"\", \"matDatepickerToggleIcon\", \"\"]]];\nconst _c4 = [\"[matDatepickerToggleIcon]\"];\nfunction MatDatepickerToggle_Conditional_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵnamespaceSVG();\n    i0.ɵɵelementStart(0, \"svg\", 2);\n    i0.ɵɵelement(1, \"path\", 3);\n    i0.ɵɵelementEnd();\n  }\n}\nconst _c5 = [[[\"input\", \"matStartDate\", \"\"]], [[\"input\", \"matEndDate\", \"\"]]];\nconst _c6 = [\"input[matStartDate]\", \"input[matEndDate]\"];\nfunction MatDatepickerActions_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 0);\n    i0.ɵɵprojection(1);\n    i0.ɵɵelementEnd();\n  }\n}\nfunction createMissingDateImplError(provider) {\n  return Error(`MatDatepicker: No provider found for ${provider}. You must add one of the following ` + `to your app config: provideNativeDateAdapter, provideDateFnsAdapter, ` + `provideLuxonDateAdapter, provideMomentDateAdapter, or provide a custom implementation.`);\n}\n\n/** Datepicker data that requires internationalization. */\nlet MatDatepickerIntl = /*#__PURE__*/(() => {\n  class MatDatepickerIntl {\n    /**\n     * Stream that emits whenever the labels here are changed. Use this to notify\n     * components if the labels have changed after initialization.\n     */\n    changes = new Subject();\n    /** A label for the calendar popup (used by screen readers). */\n    calendarLabel = 'Calendar';\n    /** A label for the button used to open the calendar popup (used by screen readers). */\n    openCalendarLabel = 'Open calendar';\n    /** Label for the button used to close the calendar popup. */\n    closeCalendarLabel = 'Close calendar';\n    /** A label for the previous month button (used by screen readers). */\n    prevMonthLabel = 'Previous month';\n    /** A label for the next month button (used by screen readers). */\n    nextMonthLabel = 'Next month';\n    /** A label for the previous year button (used by screen readers). */\n    prevYearLabel = 'Previous year';\n    /** A label for the next year button (used by screen readers). */\n    nextYearLabel = 'Next year';\n    /** A label for the previous multi-year button (used by screen readers). */\n    prevMultiYearLabel = 'Previous 24 years';\n    /** A label for the next multi-year button (used by screen readers). */\n    nextMultiYearLabel = 'Next 24 years';\n    /** A label for the 'switch to month view' button (used by screen readers). */\n    switchToMonthViewLabel = 'Choose date';\n    /** A label for the 'switch to year view' button (used by screen readers). */\n    switchToMultiYearViewLabel = 'Choose month and year';\n    /**\n     * A label for the first date of a range of dates (used by screen readers).\n     * @deprecated Provide your own internationalization string.\n     * @breaking-change 17.0.0\n     */\n    startDateLabel = 'Start date';\n    /**\n     * A label for the last date of a range of dates (used by screen readers).\n     * @deprecated Provide your own internationalization string.\n     * @breaking-change 17.0.0\n     */\n    endDateLabel = 'End date';\n    /**\n     * A label for the Comparison date of a range of dates (used by screen readers).\n     */\n    comparisonDateLabel = 'Comparison range';\n    /** Formats a range of years (used for visuals). */\n    formatYearRange(start, end) {\n      return `${start} \\u2013 ${end}`;\n    }\n    /** Formats a label for a range of years (used by screen readers). */\n    formatYearRangeLabel(start, end) {\n      return `${start} to ${end}`;\n    }\n    static ɵfac = function MatDatepickerIntl_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerIntl)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatDatepickerIntl,\n      factory: MatDatepickerIntl.ɵfac,\n      providedIn: 'root'\n    });\n  }\n  return MatDatepickerIntl;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet uniqueIdCounter$1 = 0;\n/**\n * An internal class that represents the data corresponding to a single calendar cell.\n * @docs-private\n */\nclass MatCalendarCell {\n  value;\n  displayValue;\n  ariaLabel;\n  enabled;\n  cssClasses;\n  compareValue;\n  rawValue;\n  id = uniqueIdCounter$1++;\n  constructor(value, displayValue, ariaLabel, enabled, cssClasses = {}, compareValue = value, rawValue) {\n    this.value = value;\n    this.displayValue = displayValue;\n    this.ariaLabel = ariaLabel;\n    this.enabled = enabled;\n    this.cssClasses = cssClasses;\n    this.compareValue = compareValue;\n    this.rawValue = rawValue;\n  }\n}\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = {\n  passive: false,\n  capture: true\n};\n/** Event options that can be used to bind a passive, capturing event. */\nconst passiveCapturingEventOptions = {\n  passive: true,\n  capture: true\n};\n/** Event options that can be used to bind a passive, non-capturing event. */\nconst passiveEventOptions = {\n  passive: true\n};\n/**\n * An internal component used to display calendar data in a table.\n * @docs-private\n */\nlet MatCalendarBody = /*#__PURE__*/(() => {\n  class MatCalendarBody {\n    _elementRef = inject(ElementRef);\n    _ngZone = inject(NgZone);\n    _platform = inject(Platform);\n    _intl = inject(MatDatepickerIntl);\n    _eventCleanups;\n    /**\n     * Used to skip the next focus event when rendering the preview range.\n     * We need a flag like this, because some browsers fire focus events asynchronously.\n     */\n    _skipNextFocus;\n    /**\n     * Used to focus the active cell after change detection has run.\n     */\n    _focusActiveCellAfterViewChecked = false;\n    /** The label for the table. (e.g. \"Jan 2017\"). */\n    label;\n    /** The cells to display in the table. */\n    rows;\n    /** The value in the table that corresponds to today. */\n    todayValue;\n    /** Start value of the selected date range. */\n    startValue;\n    /** End value of the selected date range. */\n    endValue;\n    /** The minimum number of free cells needed to fit the label in the first row. */\n    labelMinRequiredCells;\n    /** The number of columns in the table. */\n    numCols = 7;\n    /** The cell number of the active cell in the table. */\n    activeCell = 0;\n    ngAfterViewChecked() {\n      if (this._focusActiveCellAfterViewChecked) {\n        this._focusActiveCell();\n        this._focusActiveCellAfterViewChecked = false;\n      }\n    }\n    /** Whether a range is being selected. */\n    isRange = false;\n    /**\n     * The aspect ratio (width / height) to use for the cells in the table. This aspect ratio will be\n     * maintained even as the table resizes.\n     */\n    cellAspectRatio = 1;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** Start of the preview range. */\n    previewStart = null;\n    /** End of the preview range. */\n    previewEnd = null;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Emits when a new value is selected. */\n    selectedValueChange = new EventEmitter();\n    /** Emits when the preview has changed as a result of a user action. */\n    previewChange = new EventEmitter();\n    activeDateChange = new EventEmitter();\n    /** Emits the date at the possible start of a drag event. */\n    dragStarted = new EventEmitter();\n    /** Emits the date at the conclusion of a drag, or null if mouse was not released on a date. */\n    dragEnded = new EventEmitter();\n    /** The number of blank cells to put at the beginning for the first row. */\n    _firstRowOffset;\n    /** Padding for the individual date cells. */\n    _cellPadding;\n    /** Width of an individual cell. */\n    _cellWidth;\n    /** ID for the start date label. */\n    _startDateLabelId;\n    /** ID for the end date label. */\n    _endDateLabelId;\n    /** ID for the comparison start date label. */\n    _comparisonStartDateLabelId;\n    /** ID for the comparison end date label. */\n    _comparisonEndDateLabelId;\n    _didDragSinceMouseDown = false;\n    _injector = inject(Injector);\n    comparisonDateAccessibleName = this._intl.comparisonDateLabel;\n    /**\n     * Tracking function for rows based on their identity. Ideally we would use some sort of\n     * key on the row, but that would require a breaking change for the `rows` input. We don't\n     * use the built-in identity tracking, because it logs warnings.\n     */\n    _trackRow = row => row;\n    constructor() {\n      const renderer = inject(Renderer2);\n      const idGenerator = inject(_IdGenerator);\n      this._startDateLabelId = idGenerator.getId('mat-calendar-body-start-');\n      this._endDateLabelId = idGenerator.getId('mat-calendar-body-end-');\n      this._comparisonStartDateLabelId = idGenerator.getId('mat-calendar-body-comparison-start-');\n      this._comparisonEndDateLabelId = idGenerator.getId('mat-calendar-body-comparison-end-');\n      inject(_CdkPrivateStyleLoader).load(_StructuralStylesLoader);\n      this._ngZone.runOutsideAngular(() => {\n        const element = this._elementRef.nativeElement;\n        const cleanups = [\n        // `touchmove` is active since we need to call `preventDefault`.\n        renderer.listen(element, 'touchmove', this._touchmoveHandler, activeCapturingEventOptions), renderer.listen(element, 'mouseenter', this._enterHandler, passiveCapturingEventOptions), renderer.listen(element, 'focus', this._enterHandler, passiveCapturingEventOptions), renderer.listen(element, 'mouseleave', this._leaveHandler, passiveCapturingEventOptions), renderer.listen(element, 'blur', this._leaveHandler, passiveCapturingEventOptions), renderer.listen(element, 'mousedown', this._mousedownHandler, passiveEventOptions), renderer.listen(element, 'touchstart', this._mousedownHandler, passiveEventOptions)];\n        if (this._platform.isBrowser) {\n          cleanups.push(renderer.listen('window', 'mouseup', this._mouseupHandler), renderer.listen('window', 'touchend', this._touchendHandler));\n        }\n        this._eventCleanups = cleanups;\n      });\n    }\n    /** Called when a cell is clicked. */\n    _cellClicked(cell, event) {\n      // Ignore \"clicks\" that are actually canceled drags (eg the user dragged\n      // off and then went back to this cell to undo).\n      if (this._didDragSinceMouseDown) {\n        return;\n      }\n      if (cell.enabled) {\n        this.selectedValueChange.emit({\n          value: cell.value,\n          event\n        });\n      }\n    }\n    _emitActiveDateChange(cell, event) {\n      if (cell.enabled) {\n        this.activeDateChange.emit({\n          value: cell.value,\n          event\n        });\n      }\n    }\n    /** Returns whether a cell should be marked as selected. */\n    _isSelected(value) {\n      return this.startValue === value || this.endValue === value;\n    }\n    ngOnChanges(changes) {\n      const columnChanges = changes['numCols'];\n      const {\n        rows,\n        numCols\n      } = this;\n      if (changes['rows'] || columnChanges) {\n        this._firstRowOffset = rows && rows.length && rows[0].length ? numCols - rows[0].length : 0;\n      }\n      if (changes['cellAspectRatio'] || columnChanges || !this._cellPadding) {\n        this._cellPadding = `${50 * this.cellAspectRatio / numCols}%`;\n      }\n      if (columnChanges || !this._cellWidth) {\n        this._cellWidth = `${100 / numCols}%`;\n      }\n    }\n    ngOnDestroy() {\n      this._eventCleanups.forEach(cleanup => cleanup());\n    }\n    /** Returns whether a cell is active. */\n    _isActiveCell(rowIndex, colIndex) {\n      let cellNumber = rowIndex * this.numCols + colIndex;\n      // Account for the fact that the first row may not have as many cells.\n      if (rowIndex) {\n        cellNumber -= this._firstRowOffset;\n      }\n      return cellNumber == this.activeCell;\n    }\n    /**\n     * Focuses the active cell after the microtask queue is empty.\n     *\n     * Adding a 0ms setTimeout seems to fix Voiceover losing focus when pressing PageUp/PageDown\n     * (issue #24330).\n     *\n     * Determined a 0ms by gradually increasing duration from 0 and testing two use cases with screen\n     * reader enabled:\n     *\n     * 1. Pressing PageUp/PageDown repeatedly with pausing between each key press.\n     * 2. Pressing and holding the PageDown key with repeated keys enabled.\n     *\n     * Test 1 worked roughly 95-99% of the time with 0ms and got a little bit better as the duration\n     * increased. Test 2 got slightly better until the duration was long enough to interfere with\n     * repeated keys. If the repeated key speed was faster than the timeout duration, then pressing\n     * and holding pagedown caused the entire page to scroll.\n     *\n     * Since repeated key speed can verify across machines, determined that any duration could\n     * potentially interfere with repeated keys. 0ms would be best because it almost entirely\n     * eliminates the focus being lost in Voiceover (#24330) without causing unintended side effects.\n     * Adding delay also complicates writing tests.\n     */\n    _focusActiveCell(movePreview = true) {\n      afterNextRender(() => {\n        setTimeout(() => {\n          const activeCell = this._elementRef.nativeElement.querySelector('.mat-calendar-body-active');\n          if (activeCell) {\n            if (!movePreview) {\n              this._skipNextFocus = true;\n            }\n            activeCell.focus();\n          }\n        });\n      }, {\n        injector: this._injector\n      });\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _scheduleFocusActiveCellAfterViewChecked() {\n      this._focusActiveCellAfterViewChecked = true;\n    }\n    /** Gets whether a value is the start of the main range. */\n    _isRangeStart(value) {\n      return isStart(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is the end of the main range. */\n    _isRangeEnd(value) {\n      return isEnd(value, this.startValue, this.endValue);\n    }\n    /** Gets whether a value is within the currently-selected range. */\n    _isInRange(value) {\n      return isInRange(value, this.startValue, this.endValue, this.isRange);\n    }\n    /** Gets whether a value is the start of the comparison range. */\n    _isComparisonStart(value) {\n      return isStart(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Whether the cell is a start bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeStart(value, rowIndex, colIndex) {\n      if (!this._isComparisonStart(value) || this._isRangeStart(value) || !this._isInRange(value)) {\n        return false;\n      }\n      let previousCell = this.rows[rowIndex][colIndex - 1];\n      if (!previousCell) {\n        const previousRow = this.rows[rowIndex - 1];\n        previousCell = previousRow && previousRow[previousRow.length - 1];\n      }\n      return previousCell && !this._isRangeEnd(previousCell.compareValue);\n    }\n    /** Whether the cell is an end bridge cell between the main and comparison ranges. */\n    _isComparisonBridgeEnd(value, rowIndex, colIndex) {\n      if (!this._isComparisonEnd(value) || this._isRangeEnd(value) || !this._isInRange(value)) {\n        return false;\n      }\n      let nextCell = this.rows[rowIndex][colIndex + 1];\n      if (!nextCell) {\n        const nextRow = this.rows[rowIndex + 1];\n        nextCell = nextRow && nextRow[0];\n      }\n      return nextCell && !this._isRangeStart(nextCell.compareValue);\n    }\n    /** Gets whether a value is the end of the comparison range. */\n    _isComparisonEnd(value) {\n      return isEnd(value, this.comparisonStart, this.comparisonEnd);\n    }\n    /** Gets whether a value is within the current comparison range. */\n    _isInComparisonRange(value) {\n      return isInRange(value, this.comparisonStart, this.comparisonEnd, this.isRange);\n    }\n    /**\n     * Gets whether a value is the same as the start and end of the comparison range.\n     * For context, the functions that we use to determine whether something is the start/end of\n     * a range don't allow for the start and end to be on the same day, because we'd have to use\n     * much more specific CSS selectors to style them correctly in all scenarios. This is fine for\n     * the regular range, because when it happens, the selected styles take over and still show where\n     * the range would've been, however we don't have these selected styles for a comparison range.\n     * This function is used to apply a class that serves the same purpose as the one for selected\n     * dates, but it only applies in the context of a comparison range.\n     */\n    _isComparisonIdentical(value) {\n      // Note that we don't need to null check the start/end\n      // here, because the `value` will always be defined.\n      return this.comparisonStart === this.comparisonEnd && value === this.comparisonStart;\n    }\n    /** Gets whether a value is the start of the preview range. */\n    _isPreviewStart(value) {\n      return isStart(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is the end of the preview range. */\n    _isPreviewEnd(value) {\n      return isEnd(value, this.previewStart, this.previewEnd);\n    }\n    /** Gets whether a value is inside the preview range. */\n    _isInPreview(value) {\n      return isInRange(value, this.previewStart, this.previewEnd, this.isRange);\n    }\n    /** Gets ids of aria descriptions for the start and end of a date range. */\n    _getDescribedby(value) {\n      if (!this.isRange) {\n        return null;\n      }\n      if (this.startValue === value && this.endValue === value) {\n        return `${this._startDateLabelId} ${this._endDateLabelId}`;\n      } else if (this.startValue === value) {\n        return this._startDateLabelId;\n      } else if (this.endValue === value) {\n        return this._endDateLabelId;\n      }\n      if (this.comparisonStart !== null && this.comparisonEnd !== null) {\n        if (value === this.comparisonStart && value === this.comparisonEnd) {\n          return `${this._comparisonStartDateLabelId} ${this._comparisonEndDateLabelId}`;\n        } else if (value === this.comparisonStart) {\n          return this._comparisonStartDateLabelId;\n        } else if (value === this.comparisonEnd) {\n          return this._comparisonEndDateLabelId;\n        }\n      }\n      return null;\n    }\n    /**\n     * Event handler for when the user enters an element\n     * inside the calendar body (e.g. by hovering in or focus).\n     */\n    _enterHandler = event => {\n      if (this._skipNextFocus && event.type === 'focus') {\n        this._skipNextFocus = false;\n        return;\n      }\n      // We only need to hit the zone when we're selecting a range.\n      if (event.target && this.isRange) {\n        const cell = this._getCellFromElement(event.target);\n        if (cell) {\n          this._ngZone.run(() => this.previewChange.emit({\n            value: cell.enabled ? cell : null,\n            event\n          }));\n        }\n      }\n    };\n    _touchmoveHandler = event => {\n      if (!this.isRange) return;\n      const target = getActualTouchTarget(event);\n      const cell = target ? this._getCellFromElement(target) : null;\n      if (target !== event.target) {\n        this._didDragSinceMouseDown = true;\n      }\n      // If the initial target of the touch is a date cell, prevent default so\n      // that the move is not handled as a scroll.\n      if (getCellElement(event.target)) {\n        event.preventDefault();\n      }\n      this._ngZone.run(() => this.previewChange.emit({\n        value: cell?.enabled ? cell : null,\n        event\n      }));\n    };\n    /**\n     * Event handler for when the user's pointer leaves an element\n     * inside the calendar body (e.g. by hovering out or blurring).\n     */\n    _leaveHandler = event => {\n      // We only need to hit the zone when we're selecting a range.\n      if (this.previewEnd !== null && this.isRange) {\n        if (event.type !== 'blur') {\n          this._didDragSinceMouseDown = true;\n        }\n        // Only reset the preview end value when leaving cells. This looks better, because\n        // we have a gap between the cells and the rows and we don't want to remove the\n        // range just for it to show up again when the user moves a few pixels to the side.\n        if (event.target && this._getCellFromElement(event.target) && !(event.relatedTarget && this._getCellFromElement(event.relatedTarget))) {\n          this._ngZone.run(() => this.previewChange.emit({\n            value: null,\n            event\n          }));\n        }\n      }\n    };\n    /**\n     * Triggered on mousedown or touchstart on a date cell.\n     * Respsonsible for starting a drag sequence.\n     */\n    _mousedownHandler = event => {\n      if (!this.isRange) return;\n      this._didDragSinceMouseDown = false;\n      // Begin a drag if a cell within the current range was targeted.\n      const cell = event.target && this._getCellFromElement(event.target);\n      if (!cell || !this._isInRange(cell.compareValue)) {\n        return;\n      }\n      this._ngZone.run(() => {\n        this.dragStarted.emit({\n          value: cell.rawValue,\n          event\n        });\n      });\n    };\n    /** Triggered on mouseup anywhere. Respsonsible for ending a drag sequence. */\n    _mouseupHandler = event => {\n      if (!this.isRange) return;\n      const cellElement = getCellElement(event.target);\n      if (!cellElement) {\n        // Mouseup happened outside of datepicker. Cancel drag.\n        this._ngZone.run(() => {\n          this.dragEnded.emit({\n            value: null,\n            event\n          });\n        });\n        return;\n      }\n      if (cellElement.closest('.mat-calendar-body') !== this._elementRef.nativeElement) {\n        // Mouseup happened inside a different month instance.\n        // Allow it to handle the event.\n        return;\n      }\n      this._ngZone.run(() => {\n        const cell = this._getCellFromElement(cellElement);\n        this.dragEnded.emit({\n          value: cell?.rawValue ?? null,\n          event\n        });\n      });\n    };\n    /** Triggered on touchend anywhere. Respsonsible for ending a drag sequence. */\n    _touchendHandler = event => {\n      const target = getActualTouchTarget(event);\n      if (target) {\n        this._mouseupHandler({\n          target\n        });\n      }\n    };\n    /** Finds the MatCalendarCell that corresponds to a DOM node. */\n    _getCellFromElement(element) {\n      const cell = getCellElement(element);\n      if (cell) {\n        const row = cell.getAttribute('data-mat-row');\n        const col = cell.getAttribute('data-mat-col');\n        if (row && col) {\n          return this.rows[parseInt(row)][parseInt(col)];\n        }\n      }\n      return null;\n    }\n    static ɵfac = function MatCalendarBody_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCalendarBody)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCalendarBody,\n      selectors: [[\"\", \"mat-calendar-body\", \"\"]],\n      hostAttrs: [1, \"mat-calendar-body\"],\n      inputs: {\n        label: \"label\",\n        rows: \"rows\",\n        todayValue: \"todayValue\",\n        startValue: \"startValue\",\n        endValue: \"endValue\",\n        labelMinRequiredCells: \"labelMinRequiredCells\",\n        numCols: \"numCols\",\n        activeCell: \"activeCell\",\n        isRange: \"isRange\",\n        cellAspectRatio: \"cellAspectRatio\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\",\n        previewStart: \"previewStart\",\n        previewEnd: \"previewEnd\",\n        startDateAccessibleName: \"startDateAccessibleName\",\n        endDateAccessibleName: \"endDateAccessibleName\"\n      },\n      outputs: {\n        selectedValueChange: \"selectedValueChange\",\n        previewChange: \"previewChange\",\n        activeDateChange: \"activeDateChange\",\n        dragStarted: \"dragStarted\",\n        dragEnded: \"dragEnded\"\n      },\n      exportAs: [\"matCalendarBody\"],\n      features: [i0.ɵɵNgOnChangesFeature],\n      attrs: _c0,\n      decls: 11,\n      vars: 11,\n      consts: [[\"aria-hidden\", \"true\"], [\"role\", \"row\"], [1, \"mat-calendar-body-hidden-label\", 3, \"id\"], [1, \"mat-calendar-body-label\"], [1, \"mat-calendar-body-label\", 3, \"paddingTop\", \"paddingBottom\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell-container\", 3, \"width\", \"paddingTop\", \"paddingBottom\"], [\"role\", \"gridcell\", 1, \"mat-calendar-body-cell-container\"], [\"type\", \"button\", 1, \"mat-calendar-body-cell\", 3, \"click\", \"focus\", \"ngClass\", \"tabindex\"], [1, \"mat-calendar-body-cell-content\", \"mat-focus-indicator\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-body-cell-preview\"]],\n      template: function MatCalendarBody_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵconditionalCreate(0, MatCalendarBody_Conditional_0_Template, 3, 6, \"tr\", 0);\n          i0.ɵɵrepeaterCreate(1, MatCalendarBody_For_2_Template, 4, 1, \"tr\", 1, _forTrack0, true);\n          i0.ɵɵelementStart(3, \"span\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"span\", 2);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"span\", 2);\n          i0.ɵɵtext(8);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"span\", 2);\n          i0.ɵɵtext(10);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵconditional(ctx._firstRowOffset < ctx.labelMinRequiredCells ? 0 : -1);\n          i0.ɵɵadvance();\n          i0.ɵɵrepeater(ctx.rows);\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"id\", ctx._startDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.startDateAccessibleName, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._endDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate1(\" \", ctx.endDateAccessibleName, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._comparisonStartDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate2(\" \", ctx.comparisonDateAccessibleName, \" \", ctx.startDateAccessibleName, \"\\n\");\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"id\", ctx._comparisonEndDateLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate2(\" \", ctx.comparisonDateAccessibleName, \" \", ctx.endDateAccessibleName, \"\\n\");\n        }\n      },\n      dependencies: [NgClass],\n      styles: [\".mat-calendar-body{min-width:224px}.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-outline-color, var(--mat-sys-primary))}.mat-calendar-body-label{height:0;line-height:0;text-align:start;padding-left:4.7142857143%;padding-right:4.7142857143%;font-size:var(--mat-datepicker-calendar-body-label-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-body-label-text-weight, var(--mat-sys-title-small-weight));color:var(--mat-datepicker-calendar-body-label-text-color, var(--mat-sys-on-surface))}.mat-calendar-body-hidden-label{display:none}.mat-calendar-body-cell-container{position:relative;height:0;line-height:0}.mat-calendar-body-cell{position:absolute;top:0;left:0;width:100%;height:100%;background:none;text-align:center;outline:none;margin:0;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size));-webkit-user-select:none;user-select:none;cursor:pointer;outline:none;border:none;-webkit-tap-highlight-color:rgba(0,0,0,0)}.mat-calendar-body-cell::-moz-focus-inner{border:0}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-cell-preview{content:\\\"\\\";position:absolute;top:5%;left:0;z-index:0;box-sizing:border-box;display:block;height:90%;width:100%}.mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-start::after,.mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,.mat-calendar-body-comparison-start::after,.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:5%;width:95%;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-range-start:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-start:not(.mat-calendar-body-comparison-bridge-start)::before,[dir=rtl] .mat-calendar-body-comparison-start::after,[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{left:0;border-radius:0;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,.mat-calendar-body-comparison-end::after,.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}[dir=rtl] .mat-calendar-body-range-end:not(.mat-calendar-body-in-comparison-range)::before,[dir=rtl] .mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-end:not(.mat-calendar-body-comparison-bridge-end)::before,[dir=rtl] .mat-calendar-body-comparison-end::after,[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{left:5%;border-radius:0;border-top-left-radius:999px;border-bottom-left-radius:999px}[dir=rtl] .mat-calendar-body-comparison-bridge-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-bridge-end.mat-calendar-body-range-start::after{width:95%;border-top-right-radius:999px;border-bottom-right-radius:999px}.mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,[dir=rtl] .mat-calendar-body-comparison-start.mat-calendar-body-range-end::after,.mat-calendar-body-comparison-end.mat-calendar-body-range-start::after,[dir=rtl] .mat-calendar-body-comparison-end.mat-calendar-body-range-start::after{width:90%}.mat-calendar-body-in-preview{color:var(--mat-datepicker-calendar-date-preview-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-preview .mat-calendar-body-cell-preview{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-preview-start .mat-calendar-body-cell-preview{border-left:0;border-right:dashed 1px}.mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-preview-end .mat-calendar-body-cell-preview{border-right:0;border-left:dashed 1px}.mat-calendar-body-disabled{cursor:default}.mat-calendar-body-disabled>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){color:var(--mat-datepicker-calendar-date-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-disabled>.mat-calendar-body-today:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){border-color:var(--mat-datepicker-calendar-date-today-disabled-state-outline-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}@media(forced-colors: active){.mat-calendar-body-disabled{opacity:.5}}.mat-calendar-body-cell-content{top:5%;left:5%;z-index:1;display:flex;align-items:center;justify-content:center;box-sizing:border-box;width:90%;height:90%;line-height:1;border-width:1px;border-style:solid;border-radius:999px;color:var(--mat-datepicker-calendar-date-text-color, var(--mat-sys-on-surface));border-color:var(--mat-datepicker-calendar-date-outline-color, transparent)}.mat-calendar-body-cell-content.mat-focus-indicator{position:absolute}@media(forced-colors: active){.mat-calendar-body-cell-content{border:none}}.cdk-keyboard-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical),.cdk-program-focused .mat-calendar-body-active>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-focus-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-focus-state-layer-opacity) * 100%), transparent))}@media(hover: hover){.mat-calendar-body-cell:not(.mat-calendar-body-disabled):hover>.mat-calendar-body-cell-content:not(.mat-calendar-body-selected):not(.mat-calendar-body-comparison-identical){background-color:var(--mat-datepicker-calendar-date-hover-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) calc(var(--mat-sys-hover-state-layer-opacity) * 100%), transparent))}}.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-state-background-color, var(--mat-sys-primary));color:var(--mat-datepicker-calendar-date-selected-state-text-color, var(--mat-sys-on-primary))}.mat-calendar-body-disabled>.mat-calendar-body-selected{background-color:var(--mat-datepicker-calendar-date-selected-disabled-state-background-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-calendar-body-selected.mat-calendar-body-today{box-shadow:inset 0 0 0 1px var(--mat-datepicker-calendar-date-today-selected-state-outline-color, var(--mat-sys-primary))}.mat-calendar-body-in-range::before{background:var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range::before{background:var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container))}.mat-calendar-body-comparison-bridge-start::before,[dir=rtl] .mat-calendar-body-comparison-bridge-end::before{background:linear-gradient(to right, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-comparison-bridge-end::before,[dir=rtl] .mat-calendar-body-comparison-bridge-start::before{background:linear-gradient(to left, var(--mat-datepicker-calendar-date-in-range-state-background-color, var(--mat-sys-primary-container)) 50%, var(--mat-datepicker-calendar-date-in-comparison-range-state-background-color, var(--mat-sys-tertiary-container)) 50%)}.mat-calendar-body-in-range>.mat-calendar-body-comparison-identical,.mat-calendar-body-in-comparison-range.mat-calendar-body-in-range::after{background:var(--mat-datepicker-calendar-date-in-overlap-range-state-background-color, var(--mat-sys-secondary-container))}.mat-calendar-body-comparison-identical.mat-calendar-body-selected,.mat-calendar-body-in-comparison-range>.mat-calendar-body-selected{background:var(--mat-datepicker-calendar-date-in-overlap-range-selected-state-background-color, var(--mat-sys-secondary))}@media(forced-colors: active){.mat-datepicker-popup:not(:empty),.mat-calendar-body-cell:not(.mat-calendar-body-in-range) .mat-calendar-body-selected{outline:solid 1px}.mat-calendar-body-today{outline:dotted 1px}.mat-calendar-body-cell::before,.mat-calendar-body-cell::after,.mat-calendar-body-selected{background:none}.mat-calendar-body-in-range::before,.mat-calendar-body-comparison-bridge-start::before,.mat-calendar-body-comparison-bridge-end::before{border-top:solid 1px;border-bottom:solid 1px}.mat-calendar-body-range-start::before{border-left:solid 1px}[dir=rtl] .mat-calendar-body-range-start::before{border-left:0;border-right:solid 1px}.mat-calendar-body-range-end::before{border-right:solid 1px}[dir=rtl] .mat-calendar-body-range-end::before{border-right:0;border-left:solid 1px}.mat-calendar-body-in-comparison-range::before{border-top:dashed 1px;border-bottom:dashed 1px}.mat-calendar-body-comparison-start::before{border-left:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-start::before{border-left:0;border-right:dashed 1px}.mat-calendar-body-comparison-end::before{border-right:dashed 1px}[dir=rtl] .mat-calendar-body-comparison-end::before{border-right:0;border-left:dashed 1px}}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatCalendarBody;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks whether a node is a table cell element. */\nfunction isTableCell(node) {\n  return node?.nodeName === 'TD';\n}\n/**\n * Gets the date table cell element that is or contains the specified element.\n * Or returns null if element is not part of a date cell.\n */\nfunction getCellElement(element) {\n  let cell;\n  if (isTableCell(element)) {\n    cell = element;\n  } else if (isTableCell(element.parentNode)) {\n    cell = element.parentNode;\n  } else if (isTableCell(element.parentNode?.parentNode)) {\n    cell = element.parentNode.parentNode;\n  }\n  return cell?.getAttribute('data-mat-row') != null ? cell : null;\n}\n/** Checks whether a value is the start of a range. */\nfunction isStart(value, start, end) {\n  return end !== null && start !== end && value < end && value === start;\n}\n/** Checks whether a value is the end of a range. */\nfunction isEnd(value, start, end) {\n  return start !== null && start !== end && value >= start && value === end;\n}\n/** Checks whether a value is inside of a range. */\nfunction isInRange(value, start, end, rangeEnabled) {\n  return rangeEnabled && start !== null && end !== null && start !== end && value >= start && value <= end;\n}\n/**\n * Extracts the element that actually corresponds to a touch event's location\n * (rather than the element that initiated the sequence of touch events).\n */\nfunction getActualTouchTarget(event) {\n  const touchLocation = event.changedTouches[0];\n  return document.elementFromPoint(touchLocation.clientX, touchLocation.clientY);\n}\n\n/** A class representing a range of dates. */\nclass DateRange {\n  start;\n  end;\n  /**\n   * Ensures that objects with a `start` and `end` property can't be assigned to a variable that\n   * expects a `DateRange`\n   */\n  // tslint:disable-next-line:no-unused-variable\n  _disableStructuralEquivalency;\n  constructor(/** The start date of the range. */\n  start, /** The end date of the range. */\n  end) {\n    this.start = start;\n    this.end = end;\n  }\n}\n/**\n * A selection model containing a date selection.\n * @docs-private\n */\nlet MatDateSelectionModel = /*#__PURE__*/(() => {\n  class MatDateSelectionModel {\n    selection;\n    _adapter;\n    _selectionChanged = new Subject();\n    /** Emits when the selection has changed. */\n    selectionChanged = this._selectionChanged;\n    constructor(/** The current selection. */\n    selection, _adapter) {\n      this.selection = selection;\n      this._adapter = _adapter;\n      this.selection = selection;\n    }\n    /**\n     * Updates the current selection in the model.\n     * @param value New selection that should be assigned.\n     * @param source Object that triggered the selection change.\n     */\n    updateSelection(value, source) {\n      const oldValue = this.selection;\n      this.selection = value;\n      this._selectionChanged.next({\n        selection: value,\n        source,\n        oldValue\n      });\n    }\n    ngOnDestroy() {\n      this._selectionChanged.complete();\n    }\n    _isValidDateInstance(date) {\n      return this._adapter.isDateInstance(date) && this._adapter.isValid(date);\n    }\n    static ɵfac = function MatDateSelectionModel_Factory(__ngFactoryType__) {\n      i0.ɵɵinvalidFactory();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatDateSelectionModel,\n      factory: MatDateSelectionModel.ɵfac\n    });\n  }\n  return MatDateSelectionModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A selection model that contains a single date.\n * @docs-private\n */\nlet MatSingleDateSelectionModel = /*#__PURE__*/(() => {\n  class MatSingleDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n      super(null, adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a single date selection, the added date\n     * simply overwrites the previous selection\n     */\n    add(date) {\n      super.updateSelection(date, this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n      return this.selection != null && this._isValidDateInstance(this.selection);\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a single date selection, this\n     * is true if the current selection is not null.\n     */\n    isComplete() {\n      return this.selection != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n      const clone = new MatSingleDateSelectionModel(this._adapter);\n      clone.updateSelection(this.selection, this);\n      return clone;\n    }\n    static ɵfac = function MatSingleDateSelectionModel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatSingleDateSelectionModel)(i0.ɵɵinject(DateAdapter));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatSingleDateSelectionModel,\n      factory: MatSingleDateSelectionModel.ɵfac\n    });\n  }\n  return MatSingleDateSelectionModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * A selection model that contains a date range.\n * @docs-private\n */\nlet MatRangeDateSelectionModel = /*#__PURE__*/(() => {\n  class MatRangeDateSelectionModel extends MatDateSelectionModel {\n    constructor(adapter) {\n      super(new DateRange(null, null), adapter);\n    }\n    /**\n     * Adds a date to the current selection. In the case of a date range selection, the added date\n     * fills in the next `null` value in the range. If both the start and the end already have a date,\n     * the selection is reset so that the given date is the new `start` and the `end` is null.\n     */\n    add(date) {\n      let {\n        start,\n        end\n      } = this.selection;\n      if (start == null) {\n        start = date;\n      } else if (end == null) {\n        end = date;\n      } else {\n        start = date;\n        end = null;\n      }\n      super.updateSelection(new DateRange(start, end), this);\n    }\n    /** Checks whether the current selection is valid. */\n    isValid() {\n      const {\n        start,\n        end\n      } = this.selection;\n      // Empty ranges are valid.\n      if (start == null && end == null) {\n        return true;\n      }\n      // Complete ranges are only valid if both dates are valid and the start is before the end.\n      if (start != null && end != null) {\n        return this._isValidDateInstance(start) && this._isValidDateInstance(end) && this._adapter.compareDate(start, end) <= 0;\n      }\n      // Partial ranges are valid if the start/end is valid.\n      return (start == null || this._isValidDateInstance(start)) && (end == null || this._isValidDateInstance(end));\n    }\n    /**\n     * Checks whether the current selection is complete. In the case of a date range selection, this\n     * is true if the current selection has a non-null `start` and `end`.\n     */\n    isComplete() {\n      return this.selection.start != null && this.selection.end != null;\n    }\n    /** Clones the selection model. */\n    clone() {\n      const clone = new MatRangeDateSelectionModel(this._adapter);\n      clone.updateSelection(this.selection, this);\n      return clone;\n    }\n    static ɵfac = function MatRangeDateSelectionModel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatRangeDateSelectionModel)(i0.ɵɵinject(DateAdapter));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: MatRangeDateSelectionModel,\n      factory: MatRangeDateSelectionModel.ɵfac\n    });\n  }\n  return MatRangeDateSelectionModel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatSingleDateSelectionModel(adapter);\n}\n/**\n * Used to provide a single selection model to a component.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY\n};\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_RANGE_DATE_SELECTION_MODEL_FACTORY(parent, adapter) {\n  return parent || new MatRangeDateSelectionModel(adapter);\n}\n/**\n * Used to provide a range selection model to a component.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER = {\n  provide: MatDateSelectionModel,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MatDateSelectionModel], DateAdapter],\n  useFactory: MAT_RANGE_DATE_SELECTION_MODEL_FACTORY\n};\n\n/** Injection token used to customize the date range selection behavior. */\nconst MAT_DATE_RANGE_SELECTION_STRATEGY = /*#__PURE__*/new InjectionToken('MAT_DATE_RANGE_SELECTION_STRATEGY');\n/** Provides the default date range selection behavior. */\nlet DefaultMatCalendarRangeStrategy = /*#__PURE__*/(() => {\n  class DefaultMatCalendarRangeStrategy {\n    _dateAdapter;\n    constructor(_dateAdapter) {\n      this._dateAdapter = _dateAdapter;\n    }\n    selectionFinished(date, currentRange) {\n      let {\n        start,\n        end\n      } = currentRange;\n      if (start == null) {\n        start = date;\n      } else if (end == null && date && this._dateAdapter.compareDate(date, start) >= 0) {\n        end = date;\n      } else {\n        start = date;\n        end = null;\n      }\n      return new DateRange(start, end);\n    }\n    createPreview(activeDate, currentRange) {\n      let start = null;\n      let end = null;\n      if (currentRange.start && !currentRange.end && activeDate) {\n        start = currentRange.start;\n        end = activeDate;\n      }\n      return new DateRange(start, end);\n    }\n    createDrag(dragOrigin, originalRange, newDate) {\n      let start = originalRange.start;\n      let end = originalRange.end;\n      if (!start || !end) {\n        // Can't drag from an incomplete range.\n        return null;\n      }\n      const adapter = this._dateAdapter;\n      const isRange = adapter.compareDate(start, end) !== 0;\n      const diffYears = adapter.getYear(newDate) - adapter.getYear(dragOrigin);\n      const diffMonths = adapter.getMonth(newDate) - adapter.getMonth(dragOrigin);\n      const diffDays = adapter.getDate(newDate) - adapter.getDate(dragOrigin);\n      if (isRange && adapter.sameDate(dragOrigin, originalRange.start)) {\n        start = newDate;\n        if (adapter.compareDate(newDate, end) > 0) {\n          end = adapter.addCalendarYears(end, diffYears);\n          end = adapter.addCalendarMonths(end, diffMonths);\n          end = adapter.addCalendarDays(end, diffDays);\n        }\n      } else if (isRange && adapter.sameDate(dragOrigin, originalRange.end)) {\n        end = newDate;\n        if (adapter.compareDate(newDate, start) < 0) {\n          start = adapter.addCalendarYears(start, diffYears);\n          start = adapter.addCalendarMonths(start, diffMonths);\n          start = adapter.addCalendarDays(start, diffDays);\n        }\n      } else {\n        start = adapter.addCalendarYears(start, diffYears);\n        start = adapter.addCalendarMonths(start, diffMonths);\n        start = adapter.addCalendarDays(start, diffDays);\n        end = adapter.addCalendarYears(end, diffYears);\n        end = adapter.addCalendarMonths(end, diffMonths);\n        end = adapter.addCalendarDays(end, diffDays);\n      }\n      return new DateRange(start, end);\n    }\n    static ɵfac = function DefaultMatCalendarRangeStrategy_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || DefaultMatCalendarRangeStrategy)(i0.ɵɵinject(DateAdapter));\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: DefaultMatCalendarRangeStrategy,\n      factory: DefaultMatCalendarRangeStrategy.ɵfac\n    });\n  }\n  return DefaultMatCalendarRangeStrategy;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY(parent, adapter) {\n  return parent || new DefaultMatCalendarRangeStrategy(adapter);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_CALENDAR_RANGE_STRATEGY_PROVIDER = {\n  provide: MAT_DATE_RANGE_SELECTION_STRATEGY,\n  deps: [[/*#__PURE__*/new Optional(), /*#__PURE__*/new SkipSelf(), MAT_DATE_RANGE_SELECTION_STRATEGY], DateAdapter],\n  useFactory: MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY\n};\nconst DAYS_PER_WEEK = 7;\nlet uniqueIdCounter = 0;\n/**\n * An internal component used to display a single month in the datepicker.\n * @docs-private\n */\nlet MatMonthView = /*#__PURE__*/(() => {\n  class MatMonthView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _rangeStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, {\n      optional: true\n    });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /**\n     * The date to display in this month view (everything other than the month and year is ignored).\n     */\n    get activeDate() {\n      return this._activeDate;\n    }\n    set activeDate(value) {\n      const oldActiveDate = this._activeDate;\n      const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n      if (!this._hasSameMonthAndYear(oldActiveDate, this._activeDate)) {\n        this._init();\n      }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n      this._setRanges(this._selected);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Origin of active drag, or null when dragging is not active. */\n    activeDrag = null;\n    /** Emits when a new date is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits when any date is selected. */\n    _userSelection = new EventEmitter();\n    /** Emits when the user initiates a date range drag via mouse or touch. */\n    dragStarted = new EventEmitter();\n    /**\n     * Emits when the user completes or cancels a date range drag.\n     * Emits null when the drag was canceled or the newly selected date range if completed.\n     */\n    dragEnded = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** The label for this month (e.g. \"January 2017\"). */\n    _monthLabel;\n    /** Grid of calendar cells representing the dates of the month. */\n    _weeks;\n    /** The number of blank cells in the first row before the 1st of the month. */\n    _firstWeekOffset;\n    /** Start value of the currently-shown date range. */\n    _rangeStart;\n    /** End value of the currently-shown date range. */\n    _rangeEnd;\n    /** Start value of the currently-shown comparison date range. */\n    _comparisonRangeStart;\n    /** End value of the currently-shown comparison date range. */\n    _comparisonRangeEnd;\n    /** Start of the preview range. */\n    _previewStart;\n    /** End of the preview range. */\n    _previewEnd;\n    /** Whether the user is currently selecting a range of dates. */\n    _isRange;\n    /** The date of the month that today falls on. Null if today is in another month. */\n    _todayDate;\n    /** The names of the weekdays. */\n    _weekdays;\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n    }\n    ngOnChanges(changes) {\n      const comparisonChange = changes['comparisonStart'] || changes['comparisonEnd'];\n      if (comparisonChange && !comparisonChange.firstChange) {\n        this._setRanges(this.selected);\n      }\n      if (changes['activeDrag'] && !this.activeDrag) {\n        this._clearPreview();\n      }\n    }\n    ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new date is selected. */\n    _dateSelected(event) {\n      const date = event.value;\n      const selectedDate = this._getDateFromDayOfMonth(date);\n      let rangeStartDate;\n      let rangeEndDate;\n      if (this._selected instanceof DateRange) {\n        rangeStartDate = this._getDateInCurrentMonth(this._selected.start);\n        rangeEndDate = this._getDateInCurrentMonth(this._selected.end);\n      } else {\n        rangeStartDate = rangeEndDate = this._getDateInCurrentMonth(this._selected);\n      }\n      if (rangeStartDate !== date || rangeEndDate !== date) {\n        this.selectedChange.emit(selectedDate);\n      }\n      this._userSelection.emit({\n        value: selectedDate,\n        event: event.event\n      });\n      this._clearPreview();\n      this._changeDetectorRef.markForCheck();\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n      const month = event.value;\n      const oldActiveDate = this._activeDate;\n      this.activeDate = this._getDateFromDayOfMonth(month);\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this._activeDate);\n      }\n    }\n    /** Handles keydown events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      const oldActiveDate = this._activeDate;\n      const isRtl = this._isRtl();\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? 1 : -1);\n          break;\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, isRtl ? -1 : 1);\n          break;\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, -7);\n          break;\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 7);\n          break;\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, 1 - this._dateAdapter.getDate(this._activeDate));\n          break;\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarDays(this._activeDate, this._dateAdapter.getNumDaysInMonth(this._activeDate) - this._dateAdapter.getDate(this._activeDate));\n          break;\n        case PAGE_UP:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, -1) : this._dateAdapter.addCalendarMonths(this._activeDate, -1);\n          break;\n        case PAGE_DOWN:\n          this.activeDate = event.altKey ? this._dateAdapter.addCalendarYears(this._activeDate, 1) : this._dateAdapter.addCalendarMonths(this._activeDate, 1);\n          break;\n        case ENTER:\n        case SPACE:\n          this._selectionKeyPressed = true;\n          if (this._canSelect(this._activeDate)) {\n            // Prevent unexpected default actions such as form submission.\n            // Note that we only prevent the default action here while the selection happens in\n            // `keyup` below. We can't do the selection here, because it can cause the calendar to\n            // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n            // because it's too late (see #23305).\n            event.preventDefault();\n          }\n          return;\n        case ESCAPE:\n          // Abort the current range selection if the user presses escape mid-selection.\n          if (this._previewEnd != null && !hasModifierKey(event)) {\n            this._clearPreview();\n            // If a drag is in progress, cancel the drag without changing the\n            // current selection.\n            if (this.activeDrag) {\n              this.dragEnded.emit({\n                value: null,\n                event\n              });\n            } else {\n              this.selectedChange.emit(null);\n              this._userSelection.emit({\n                value: null,\n                event\n              });\n            }\n            event.preventDefault();\n            event.stopPropagation(); // Prevents the overlay from closing.\n          }\n          return;\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n        this._focusActiveCellAfterViewChecked();\n      }\n      // Prevent unexpected default actions such as form submission.\n      event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in month view. */\n    _handleCalendarBodyKeyup(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        if (this._selectionKeyPressed && this._canSelect(this._activeDate)) {\n          this._dateSelected({\n            value: this._dateAdapter.getDate(this._activeDate),\n            event\n          });\n        }\n        this._selectionKeyPressed = false;\n      }\n    }\n    /** Initializes this month view. */\n    _init() {\n      this._setRanges(this.selected);\n      this._todayDate = this._getCellCompareValue(this._dateAdapter.today());\n      this._monthLabel = this._dateFormats.display.monthLabel ? this._dateAdapter.format(this.activeDate, this._dateFormats.display.monthLabel) : this._dateAdapter.getMonthNames('short')[this._dateAdapter.getMonth(this.activeDate)].toLocaleUpperCase();\n      let firstOfMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), 1);\n      this._firstWeekOffset = (DAYS_PER_WEEK + this._dateAdapter.getDayOfWeek(firstOfMonth) - this._dateAdapter.getFirstDayOfWeek()) % DAYS_PER_WEEK;\n      this._initWeekdays();\n      this._createWeekCells();\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell(movePreview) {\n      this._matCalendarBody._focusActiveCell(movePreview);\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _focusActiveCellAfterViewChecked() {\n      this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /** Called when the user has activated a new cell and the preview needs to be updated. */\n    _previewChanged({\n      event,\n      value: cell\n    }) {\n      if (this._rangeStrategy) {\n        // We can assume that this will be a range, because preview\n        // events aren't fired for single date selections.\n        const value = cell ? cell.rawValue : null;\n        const previewRange = this._rangeStrategy.createPreview(value, this.selected, event);\n        this._previewStart = this._getCellCompareValue(previewRange.start);\n        this._previewEnd = this._getCellCompareValue(previewRange.end);\n        if (this.activeDrag && value) {\n          const dragRange = this._rangeStrategy.createDrag?.(this.activeDrag.value, this.selected, value, event);\n          if (dragRange) {\n            this._previewStart = this._getCellCompareValue(dragRange.start);\n            this._previewEnd = this._getCellCompareValue(dragRange.end);\n          }\n        }\n        // Note that here we need to use `detectChanges`, rather than `markForCheck`, because\n        // the way `_focusActiveCell` is set up at the moment makes it fire at the wrong time\n        // when navigating one month back using the keyboard which will cause this handler\n        // to throw a \"changed after checked\" error when updating the preview state.\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    /**\n     * Called when the user has ended a drag. If the drag/drop was successful,\n     * computes and emits the new range selection.\n     */\n    _dragEnded(event) {\n      if (!this.activeDrag) return;\n      if (event.value) {\n        // Propagate drag effect\n        const dragDropResult = this._rangeStrategy?.createDrag?.(this.activeDrag.value, this.selected, event.value, event.event);\n        this.dragEnded.emit({\n          value: dragDropResult ?? null,\n          event: event.event\n        });\n      } else {\n        this.dragEnded.emit({\n          value: null,\n          event: event.event\n        });\n      }\n    }\n    /**\n     * Takes a day of the month and returns a new date in the same month and year as the currently\n     *  active date. The returned date will have the same day of the month as the argument date.\n     */\n    _getDateFromDayOfMonth(dayOfMonth) {\n      return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), dayOfMonth);\n    }\n    /** Initializes the weekdays. */\n    _initWeekdays() {\n      const firstDayOfWeek = this._dateAdapter.getFirstDayOfWeek();\n      const narrowWeekdays = this._dateAdapter.getDayOfWeekNames('narrow');\n      const longWeekdays = this._dateAdapter.getDayOfWeekNames('long');\n      // Rotate the labels for days of the week based on the configured first day of the week.\n      let weekdays = longWeekdays.map((long, i) => {\n        return {\n          long,\n          narrow: narrowWeekdays[i],\n          id: uniqueIdCounter++\n        };\n      });\n      this._weekdays = weekdays.slice(firstDayOfWeek).concat(weekdays.slice(0, firstDayOfWeek));\n    }\n    /** Creates MatCalendarCells for the dates in this month. */\n    _createWeekCells() {\n      const daysInMonth = this._dateAdapter.getNumDaysInMonth(this.activeDate);\n      const dateNames = this._dateAdapter.getDateNames();\n      this._weeks = [[]];\n      for (let i = 0, cell = this._firstWeekOffset; i < daysInMonth; i++, cell++) {\n        if (cell == DAYS_PER_WEEK) {\n          this._weeks.push([]);\n          cell = 0;\n        }\n        const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), this._dateAdapter.getMonth(this.activeDate), i + 1);\n        const enabled = this._shouldEnableDate(date);\n        const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.dateA11yLabel);\n        const cellClasses = this.dateClass ? this.dateClass(date, 'month') : undefined;\n        this._weeks[this._weeks.length - 1].push(new MatCalendarCell(i + 1, dateNames[i], ariaLabel, enabled, cellClasses, this._getCellCompareValue(date), date));\n      }\n    }\n    /** Date filter for the month */\n    _shouldEnableDate(date) {\n      return !!date && (!this.minDate || this._dateAdapter.compareDate(date, this.minDate) >= 0) && (!this.maxDate || this._dateAdapter.compareDate(date, this.maxDate) <= 0) && (!this.dateFilter || this.dateFilter(date));\n    }\n    /**\n     * Gets the date in this month that the given Date falls on.\n     * Returns null if the given Date is in another month.\n     */\n    _getDateInCurrentMonth(date) {\n      return date && this._hasSameMonthAndYear(date, this.activeDate) ? this._dateAdapter.getDate(date) : null;\n    }\n    /** Checks whether the 2 dates are non-null and fall within the same month of the same year. */\n    _hasSameMonthAndYear(d1, d2) {\n      return !!(d1 && d2 && this._dateAdapter.getMonth(d1) == this._dateAdapter.getMonth(d2) && this._dateAdapter.getYear(d1) == this._dateAdapter.getYear(d2));\n    }\n    /** Gets the value that will be used to one cell to another. */\n    _getCellCompareValue(date) {\n      if (date) {\n        // We use the time since the Unix epoch to compare dates in this view, rather than the\n        // cell values, because we need to support ranges that span across multiple months/years.\n        const year = this._dateAdapter.getYear(date);\n        const month = this._dateAdapter.getMonth(date);\n        const day = this._dateAdapter.getDate(date);\n        return new Date(year, month, day).getTime();\n      }\n      return null;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the current range based on a model value. */\n    _setRanges(selectedValue) {\n      if (selectedValue instanceof DateRange) {\n        this._rangeStart = this._getCellCompareValue(selectedValue.start);\n        this._rangeEnd = this._getCellCompareValue(selectedValue.end);\n        this._isRange = true;\n      } else {\n        this._rangeStart = this._rangeEnd = this._getCellCompareValue(selectedValue);\n        this._isRange = false;\n      }\n      this._comparisonRangeStart = this._getCellCompareValue(this.comparisonStart);\n      this._comparisonRangeEnd = this._getCellCompareValue(this.comparisonEnd);\n    }\n    /** Gets whether a date can be selected in the month view. */\n    _canSelect(date) {\n      return !this.dateFilter || this.dateFilter(date);\n    }\n    /** Clears out preview state. */\n    _clearPreview() {\n      this._previewStart = this._previewEnd = null;\n    }\n    static ɵfac = function MatMonthView_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatMonthView)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatMonthView,\n      selectors: [[\"mat-month-view\"]],\n      viewQuery: function MatMonthView_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendarBody, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n        }\n      },\n      inputs: {\n        activeDate: \"activeDate\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\",\n        startDateAccessibleName: \"startDateAccessibleName\",\n        endDateAccessibleName: \"endDateAccessibleName\",\n        activeDrag: \"activeDrag\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        _userSelection: \"_userSelection\",\n        dragStarted: \"dragStarted\",\n        dragEnded: \"dragEnded\",\n        activeDateChange: \"activeDateChange\"\n      },\n      exportAs: [\"matMonthView\"],\n      features: [i0.ɵɵNgOnChangesFeature],\n      decls: 8,\n      vars: 14,\n      consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [1, \"mat-calendar-table-header\"], [\"scope\", \"col\"], [\"aria-hidden\", \"true\"], [\"colspan\", \"7\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"previewChange\", \"dragStarted\", \"dragEnded\", \"keyup\", \"keydown\", \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"comparisonStart\", \"comparisonEnd\", \"previewStart\", \"previewEnd\", \"isRange\", \"labelMinRequiredCells\", \"activeCell\", \"startDateAccessibleName\", \"endDateAccessibleName\"], [1, \"cdk-visually-hidden\"]],\n      template: function MatMonthView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n          i0.ɵɵrepeaterCreate(3, MatMonthView_For_4_Template, 5, 2, \"th\", 2, _forTrack1);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(5, \"tr\", 3);\n          i0.ɵɵelement(6, \"th\", 4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(7, \"tbody\", 5);\n          i0.ɵɵlistener(\"selectedValueChange\", function MatMonthView_Template_tbody_selectedValueChange_7_listener($event) {\n            return ctx._dateSelected($event);\n          })(\"activeDateChange\", function MatMonthView_Template_tbody_activeDateChange_7_listener($event) {\n            return ctx._updateActiveDate($event);\n          })(\"previewChange\", function MatMonthView_Template_tbody_previewChange_7_listener($event) {\n            return ctx._previewChanged($event);\n          })(\"dragStarted\", function MatMonthView_Template_tbody_dragStarted_7_listener($event) {\n            return ctx.dragStarted.emit($event);\n          })(\"dragEnded\", function MatMonthView_Template_tbody_dragEnded_7_listener($event) {\n            return ctx._dragEnded($event);\n          })(\"keyup\", function MatMonthView_Template_tbody_keyup_7_listener($event) {\n            return ctx._handleCalendarBodyKeyup($event);\n          })(\"keydown\", function MatMonthView_Template_tbody_keydown_7_listener($event) {\n            return ctx._handleCalendarBodyKeydown($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(3);\n          i0.ɵɵrepeater(ctx._weekdays);\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"label\", ctx._monthLabel)(\"rows\", ctx._weeks)(\"todayValue\", ctx._todayDate)(\"startValue\", ctx._rangeStart)(\"endValue\", ctx._rangeEnd)(\"comparisonStart\", ctx._comparisonRangeStart)(\"comparisonEnd\", ctx._comparisonRangeEnd)(\"previewStart\", ctx._previewStart)(\"previewEnd\", ctx._previewEnd)(\"isRange\", ctx._isRange)(\"labelMinRequiredCells\", 3)(\"activeCell\", ctx._dateAdapter.getDate(ctx.activeDate) - 1)(\"startDateAccessibleName\", ctx.startDateAccessibleName)(\"endDateAccessibleName\", ctx.endDateAccessibleName);\n        }\n      },\n      dependencies: [MatCalendarBody],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatMonthView;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nconst yearsPerPage = 24;\nconst yearsPerRow = 4;\n/**\n * An internal component used to display a year selector in the datepicker.\n * @docs-private\n */\nlet MatMultiYearView = /*#__PURE__*/(() => {\n  class MatMultiYearView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /** The date to display in this multi-year view (everything other than the year is ignored). */\n    get activeDate() {\n      return this._activeDate;\n    }\n    set activeDate(value) {\n      let oldActiveDate = this._activeDate;\n      const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n      if (!isSameMultiYearView(this._dateAdapter, oldActiveDate, this._activeDate, this.minDate, this.maxDate)) {\n        this._init();\n      }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n      this._setSelectedYear(value);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass;\n    /** Emits when a new year is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits the selected year. This doesn't imply a change on the selected date */\n    yearSelected = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** Grid of calendar cells representing the currently displayed years. */\n    _years;\n    /** The year that today falls on. */\n    _todayYear;\n    /** The year of the selected date. Null if the selected date is null. */\n    _selectedYear;\n    constructor() {\n      if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /** Initializes this multi-year view. */\n    _init() {\n      this._todayYear = this._dateAdapter.getYear(this._dateAdapter.today());\n      // We want a range years such that we maximize the number of\n      // enabled dates visible at once. This prevents issues where the minimum year\n      // is the last item of a page OR the maximum year is the first item of a page.\n      // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view.\n      const activeYear = this._dateAdapter.getYear(this._activeDate);\n      const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n      this._years = [];\n      for (let i = 0, row = []; i < yearsPerPage; i++) {\n        row.push(minYearOfPage + i);\n        if (row.length == yearsPerRow) {\n          this._years.push(row.map(year => this._createCellForYear(year)));\n          row = [];\n        }\n      }\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Handles when a new year is selected. */\n    _yearSelected(event) {\n      const year = event.value;\n      const selectedYear = this._dateAdapter.createDate(year, 0, 1);\n      const selectedDate = this._getDateFromYear(year);\n      this.yearSelected.emit(selectedYear);\n      this.selectedChange.emit(selectedDate);\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n      const year = event.value;\n      const oldActiveDate = this._activeDate;\n      this.activeDate = this._getDateFromYear(year);\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n    }\n    /** Handles keydown events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeydown(event) {\n      const oldActiveDate = this._activeDate;\n      const isRtl = this._isRtl();\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? 1 : -1);\n          break;\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, isRtl ? -1 : 1);\n          break;\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -yearsPerRow);\n          break;\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerRow);\n          break;\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, -getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate));\n          break;\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, yearsPerPage - getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate) - 1);\n          break;\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -yearsPerPage * 10 : -yearsPerPage);\n          break;\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? yearsPerPage * 10 : yearsPerPage);\n          break;\n        case ENTER:\n        case SPACE:\n          // Note that we only prevent the default action here while the selection happens in\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n          // because it's too late (see #23305).\n          this._selectionKeyPressed = true;\n          break;\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n      this._focusActiveCellAfterViewChecked();\n      // Prevent unexpected default actions such as form submission.\n      event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in multi-year view. */\n    _handleCalendarBodyKeyup(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        if (this._selectionKeyPressed) {\n          this._yearSelected({\n            value: this._dateAdapter.getYear(this._activeDate),\n            event\n          });\n        }\n        this._selectionKeyPressed = false;\n      }\n    }\n    _getActiveCell() {\n      return getActiveOffset(this._dateAdapter, this.activeDate, this.minDate, this.maxDate);\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /** Focuses the active cell after change detection has run and the microtask queue is empty. */\n    _focusActiveCellAfterViewChecked() {\n      this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /**\n     * Takes a year and returns a new date on the same day and month as the currently active date\n     *  The returned date will have the same year as the argument date.\n     */\n    _getDateFromYear(year) {\n      const activeMonth = this._dateAdapter.getMonth(this.activeDate);\n      const daysInMonth = this._dateAdapter.getNumDaysInMonth(this._dateAdapter.createDate(year, activeMonth, 1));\n      const normalizedDate = this._dateAdapter.createDate(year, activeMonth, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n      return normalizedDate;\n    }\n    /** Creates an MatCalendarCell for the given year. */\n    _createCellForYear(year) {\n      const date = this._dateAdapter.createDate(year, 0, 1);\n      const yearName = this._dateAdapter.getYearName(date);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'multi-year') : undefined;\n      return new MatCalendarCell(year, yearName, yearName, this._shouldEnableYear(year), cellClasses);\n    }\n    /** Whether the given year is enabled. */\n    _shouldEnableYear(year) {\n      // disable if the year is greater than maxDate lower than minDate\n      if (year === undefined || year === null || this.maxDate && year > this._dateAdapter.getYear(this.maxDate) || this.minDate && year < this._dateAdapter.getYear(this.minDate)) {\n        return false;\n      }\n      // enable if it reaches here and there's no filter defined\n      if (!this.dateFilter) {\n        return true;\n      }\n      const firstOfYear = this._dateAdapter.createDate(year, 0, 1);\n      // If any date in the year is enabled count the year as enabled.\n      for (let date = firstOfYear; this._dateAdapter.getYear(date) == year; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-highlighted year based on a model value. */\n    _setSelectedYear(value) {\n      this._selectedYear = null;\n      if (value instanceof DateRange) {\n        const displayValue = value.start || value.end;\n        if (displayValue) {\n          this._selectedYear = this._dateAdapter.getYear(displayValue);\n        }\n      } else if (value) {\n        this._selectedYear = this._dateAdapter.getYear(value);\n      }\n    }\n    static ɵfac = function MatMultiYearView_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatMultiYearView)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatMultiYearView,\n      selectors: [[\"mat-multi-year-view\"]],\n      viewQuery: function MatMultiYearView_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendarBody, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n        }\n      },\n      inputs: {\n        activeDate: \"activeDate\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        yearSelected: \"yearSelected\",\n        activeDateChange: \"activeDateChange\"\n      },\n      exportAs: [\"matMultiYearView\"],\n      decls: 5,\n      vars: 7,\n      consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"keyup\", \"keydown\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"numCols\", \"cellAspectRatio\", \"activeCell\"]],\n      template: function MatMultiYearView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n          i0.ɵɵelement(3, \"th\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"tbody\", 3);\n          i0.ɵɵlistener(\"selectedValueChange\", function MatMultiYearView_Template_tbody_selectedValueChange_4_listener($event) {\n            return ctx._yearSelected($event);\n          })(\"activeDateChange\", function MatMultiYearView_Template_tbody_activeDateChange_4_listener($event) {\n            return ctx._updateActiveDate($event);\n          })(\"keyup\", function MatMultiYearView_Template_tbody_keyup_4_listener($event) {\n            return ctx._handleCalendarBodyKeyup($event);\n          })(\"keydown\", function MatMultiYearView_Template_tbody_keydown_4_listener($event) {\n            return ctx._handleCalendarBodyKeydown($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"rows\", ctx._years)(\"todayValue\", ctx._todayYear)(\"startValue\", ctx._selectedYear)(\"endValue\", ctx._selectedYear)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._getActiveCell());\n        }\n      },\n      dependencies: [MatCalendarBody],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatMultiYearView;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction isSameMultiYearView(dateAdapter, date1, date2, minDate, maxDate) {\n  const year1 = dateAdapter.getYear(date1);\n  const year2 = dateAdapter.getYear(date2);\n  const startingYear = getStartingYear(dateAdapter, minDate, maxDate);\n  return Math.floor((year1 - startingYear) / yearsPerPage) === Math.floor((year2 - startingYear) / yearsPerPage);\n}\n/**\n * When the multi-year view is first opened, the active year will be in view.\n * So we compute how many years are between the active year and the *slot* where our\n * \"startingYear\" will render when paged into view.\n */\nfunction getActiveOffset(dateAdapter, activeDate, minDate, maxDate) {\n  const activeYear = dateAdapter.getYear(activeDate);\n  return euclideanModulo(activeYear - getStartingYear(dateAdapter, minDate, maxDate), yearsPerPage);\n}\n/**\n * We pick a \"starting\" year such that either the maximum year would be at the end\n * or the minimum year would be at the beginning of a page.\n */\nfunction getStartingYear(dateAdapter, minDate, maxDate) {\n  let startingYear = 0;\n  if (maxDate) {\n    const maxYear = dateAdapter.getYear(maxDate);\n    startingYear = maxYear - yearsPerPage + 1;\n  } else if (minDate) {\n    startingYear = dateAdapter.getYear(minDate);\n  }\n  return startingYear;\n}\n/** Gets remainder that is non-negative, even if first number is negative */\nfunction euclideanModulo(a, b) {\n  return (a % b + b) % b;\n}\n\n/**\n * An internal component used to display a single year in the datepicker.\n * @docs-private\n */\nlet MatYearView = /*#__PURE__*/(() => {\n  class MatYearView {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _rerenderSubscription = Subscription.EMPTY;\n    /** Flag used to filter out space/enter keyup events that originated outside of the view. */\n    _selectionKeyPressed;\n    /** The date to display in this year view (everything other than the year is ignored). */\n    get activeDate() {\n      return this._activeDate;\n    }\n    set activeDate(value) {\n      let oldActiveDate = this._activeDate;\n      const validDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value)) || this._dateAdapter.today();\n      this._activeDate = this._dateAdapter.clampDate(validDate, this.minDate, this.maxDate);\n      if (this._dateAdapter.getYear(oldActiveDate) !== this._dateAdapter.getYear(this._activeDate)) {\n        this._init();\n      }\n    }\n    _activeDate;\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n      this._setSelectedMonth(value);\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** A function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to date cells. */\n    dateClass;\n    /** Emits when a new month is selected. */\n    selectedChange = new EventEmitter();\n    /** Emits the selected month. This doesn't imply a change on the selected date */\n    monthSelected = new EventEmitter();\n    /** Emits when any date is activated. */\n    activeDateChange = new EventEmitter();\n    /** The body of calendar table */\n    _matCalendarBody;\n    /** Grid of calendar cells representing the months of the year. */\n    _months;\n    /** The label for this year (e.g. \"2017\"). */\n    _yearLabel;\n    /** The month in this year that today falls on. Null if today is in a different year. */\n    _todayMonth;\n    /**\n     * The month in this year that the selected Date falls on.\n     * Null if the selected Date is in a different year.\n     */\n    _selectedMonth;\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      this._activeDate = this._dateAdapter.today();\n    }\n    ngAfterContentInit() {\n      this._rerenderSubscription = this._dateAdapter.localeChanges.pipe(startWith(null)).subscribe(() => this._init());\n    }\n    ngOnDestroy() {\n      this._rerenderSubscription.unsubscribe();\n    }\n    /** Handles when a new month is selected. */\n    _monthSelected(event) {\n      const month = event.value;\n      const selectedMonth = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n      this.monthSelected.emit(selectedMonth);\n      const selectedDate = this._getDateFromMonth(month);\n      this.selectedChange.emit(selectedDate);\n    }\n    /**\n     * Takes the index of a calendar body cell wrapped in an event as argument. For the date that\n     * corresponds to the given cell, set `activeDate` to that date and fire `activeDateChange` with\n     * that date.\n     *\n     * This function is used to match each component's model of the active date with the calendar\n     * body cell that was focused. It updates its value of `activeDate` synchronously and updates the\n     * parent's value asynchronously via the `activeDateChange` event. The child component receives an\n     * updated value asynchronously via the `activeCell` Input.\n     */\n    _updateActiveDate(event) {\n      const month = event.value;\n      const oldActiveDate = this._activeDate;\n      this.activeDate = this._getDateFromMonth(month);\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n      }\n    }\n    /** Handles keydown events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeydown(event) {\n      // TODO(mmalerba): We currently allow keyboard navigation to disabled dates, but just prevent\n      // disabled ones from being selected. This may not be ideal, we should look into whether\n      // navigation should skip over disabled dates, and if so, how to implement that efficiently.\n      const oldActiveDate = this._activeDate;\n      const isRtl = this._isRtl();\n      switch (event.keyCode) {\n        case LEFT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? 1 : -1);\n          break;\n        case RIGHT_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, isRtl ? -1 : 1);\n          break;\n        case UP_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -4);\n          break;\n        case DOWN_ARROW:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 4);\n          break;\n        case HOME:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, -this._dateAdapter.getMonth(this._activeDate));\n          break;\n        case END:\n          this.activeDate = this._dateAdapter.addCalendarMonths(this._activeDate, 11 - this._dateAdapter.getMonth(this._activeDate));\n          break;\n        case PAGE_UP:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? -10 : -1);\n          break;\n        case PAGE_DOWN:\n          this.activeDate = this._dateAdapter.addCalendarYears(this._activeDate, event.altKey ? 10 : 1);\n          break;\n        case ENTER:\n        case SPACE:\n          // Note that we only prevent the default action here while the selection happens in\n          // `keyup` below. We can't do the selection here, because it can cause the calendar to\n          // reopen if focus is restored immediately. We also can't call `preventDefault` on `keyup`\n          // because it's too late (see #23305).\n          this._selectionKeyPressed = true;\n          break;\n        default:\n          // Don't prevent default or focus active cell on keys that we don't explicitly handle.\n          return;\n      }\n      if (this._dateAdapter.compareDate(oldActiveDate, this.activeDate)) {\n        this.activeDateChange.emit(this.activeDate);\n        this._focusActiveCellAfterViewChecked();\n      }\n      // Prevent unexpected default actions such as form submission.\n      event.preventDefault();\n    }\n    /** Handles keyup events on the calendar body when calendar is in year view. */\n    _handleCalendarBodyKeyup(event) {\n      if (event.keyCode === SPACE || event.keyCode === ENTER) {\n        if (this._selectionKeyPressed) {\n          this._monthSelected({\n            value: this._dateAdapter.getMonth(this._activeDate),\n            event\n          });\n        }\n        this._selectionKeyPressed = false;\n      }\n    }\n    /** Initializes this year view. */\n    _init() {\n      this._setSelectedMonth(this.selected);\n      this._todayMonth = this._getMonthInCurrentYear(this._dateAdapter.today());\n      this._yearLabel = this._dateAdapter.getYearName(this.activeDate);\n      let monthNames = this._dateAdapter.getMonthNames('short');\n      // First row of months only contains 5 elements so we can fit the year label on the same row.\n      this._months = [[0, 1, 2, 3], [4, 5, 6, 7], [8, 9, 10, 11]].map(row => row.map(month => this._createCellForMonth(month, monthNames[month])));\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Focuses the active cell after the microtask queue is empty. */\n    _focusActiveCell() {\n      this._matCalendarBody._focusActiveCell();\n    }\n    /** Schedules the matCalendarBody to focus the active cell after change detection has run */\n    _focusActiveCellAfterViewChecked() {\n      this._matCalendarBody._scheduleFocusActiveCellAfterViewChecked();\n    }\n    /**\n     * Gets the month in this year that the given Date falls on.\n     * Returns null if the given Date is in another year.\n     */\n    _getMonthInCurrentYear(date) {\n      return date && this._dateAdapter.getYear(date) == this._dateAdapter.getYear(this.activeDate) ? this._dateAdapter.getMonth(date) : null;\n    }\n    /**\n     * Takes a month and returns a new date in the same day and year as the currently active date.\n     *  The returned date will have the same month as the argument date.\n     */\n    _getDateFromMonth(month) {\n      const normalizedDate = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n      const daysInMonth = this._dateAdapter.getNumDaysInMonth(normalizedDate);\n      return this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, Math.min(this._dateAdapter.getDate(this.activeDate), daysInMonth));\n    }\n    /** Creates an MatCalendarCell for the given month. */\n    _createCellForMonth(month, monthName) {\n      const date = this._dateAdapter.createDate(this._dateAdapter.getYear(this.activeDate), month, 1);\n      const ariaLabel = this._dateAdapter.format(date, this._dateFormats.display.monthYearA11yLabel);\n      const cellClasses = this.dateClass ? this.dateClass(date, 'year') : undefined;\n      return new MatCalendarCell(month, monthName.toLocaleUpperCase(), ariaLabel, this._shouldEnableMonth(month), cellClasses);\n    }\n    /** Whether the given month is enabled. */\n    _shouldEnableMonth(month) {\n      const activeYear = this._dateAdapter.getYear(this.activeDate);\n      if (month === undefined || month === null || this._isYearAndMonthAfterMaxDate(activeYear, month) || this._isYearAndMonthBeforeMinDate(activeYear, month)) {\n        return false;\n      }\n      if (!this.dateFilter) {\n        return true;\n      }\n      const firstOfMonth = this._dateAdapter.createDate(activeYear, month, 1);\n      // If any date in the month is enabled count the month as enabled.\n      for (let date = firstOfMonth; this._dateAdapter.getMonth(date) == month; date = this._dateAdapter.addCalendarDays(date, 1)) {\n        if (this.dateFilter(date)) {\n          return true;\n        }\n      }\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is after this.maxDate, considering\n     * just the month and year of this.maxDate\n     */\n    _isYearAndMonthAfterMaxDate(year, month) {\n      if (this.maxDate) {\n        const maxYear = this._dateAdapter.getYear(this.maxDate);\n        const maxMonth = this._dateAdapter.getMonth(this.maxDate);\n        return year > maxYear || year === maxYear && month > maxMonth;\n      }\n      return false;\n    }\n    /**\n     * Tests whether the combination month/year is before this.minDate, considering\n     * just the month and year of this.minDate\n     */\n    _isYearAndMonthBeforeMinDate(year, month) {\n      if (this.minDate) {\n        const minYear = this._dateAdapter.getYear(this.minDate);\n        const minMonth = this._dateAdapter.getMonth(this.minDate);\n        return year < minYear || year === minYear && month < minMonth;\n      }\n      return false;\n    }\n    /** Determines whether the user has the RTL layout direction. */\n    _isRtl() {\n      return this._dir && this._dir.value === 'rtl';\n    }\n    /** Sets the currently-selected month based on a model value. */\n    _setSelectedMonth(value) {\n      if (value instanceof DateRange) {\n        this._selectedMonth = this._getMonthInCurrentYear(value.start) || this._getMonthInCurrentYear(value.end);\n      } else {\n        this._selectedMonth = this._getMonthInCurrentYear(value);\n      }\n    }\n    static ɵfac = function MatYearView_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatYearView)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatYearView,\n      selectors: [[\"mat-year-view\"]],\n      viewQuery: function MatYearView_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendarBody, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._matCalendarBody = _t.first);\n        }\n      },\n      inputs: {\n        activeDate: \"activeDate\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        monthSelected: \"monthSelected\",\n        activeDateChange: \"activeDateChange\"\n      },\n      exportAs: [\"matYearView\"],\n      decls: 5,\n      vars: 9,\n      consts: [[\"role\", \"grid\", 1, \"mat-calendar-table\"], [\"aria-hidden\", \"true\", 1, \"mat-calendar-table-header\"], [\"colspan\", \"4\", 1, \"mat-calendar-table-header-divider\"], [\"mat-calendar-body\", \"\", 3, \"selectedValueChange\", \"activeDateChange\", \"keyup\", \"keydown\", \"label\", \"rows\", \"todayValue\", \"startValue\", \"endValue\", \"labelMinRequiredCells\", \"numCols\", \"cellAspectRatio\", \"activeCell\"]],\n      template: function MatYearView_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\", 1)(2, \"tr\");\n          i0.ɵɵelement(3, \"th\", 2);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(4, \"tbody\", 3);\n          i0.ɵɵlistener(\"selectedValueChange\", function MatYearView_Template_tbody_selectedValueChange_4_listener($event) {\n            return ctx._monthSelected($event);\n          })(\"activeDateChange\", function MatYearView_Template_tbody_activeDateChange_4_listener($event) {\n            return ctx._updateActiveDate($event);\n          })(\"keyup\", function MatYearView_Template_tbody_keyup_4_listener($event) {\n            return ctx._handleCalendarBodyKeyup($event);\n          })(\"keydown\", function MatYearView_Template_tbody_keydown_4_listener($event) {\n            return ctx._handleCalendarBodyKeydown($event);\n          });\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"label\", ctx._yearLabel)(\"rows\", ctx._months)(\"todayValue\", ctx._todayMonth)(\"startValue\", ctx._selectedMonth)(\"endValue\", ctx._selectedMonth)(\"labelMinRequiredCells\", 2)(\"numCols\", 4)(\"cellAspectRatio\", 4 / 7)(\"activeCell\", ctx._dateAdapter.getMonth(ctx.activeDate));\n        }\n      },\n      dependencies: [MatCalendarBody],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatYearView;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Default header for MatCalendar */\nlet MatCalendarHeader = /*#__PURE__*/(() => {\n  class MatCalendarHeader {\n    _intl = inject(MatDatepickerIntl);\n    calendar = inject(MatCalendar);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _periodButtonText;\n    _periodButtonDescription;\n    _periodButtonLabel;\n    _prevButtonLabel;\n    _nextButtonLabel;\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n      const changeDetectorRef = inject(ChangeDetectorRef);\n      this._updateLabels();\n      this.calendar.stateChanges.subscribe(() => {\n        this._updateLabels();\n        changeDetectorRef.markForCheck();\n      });\n    }\n    /** The display text for the current calendar view. */\n    get periodButtonText() {\n      return this._periodButtonText;\n    }\n    /** The aria description for the current calendar view. */\n    get periodButtonDescription() {\n      return this._periodButtonDescription;\n    }\n    /** The `aria-label` for changing the calendar view. */\n    get periodButtonLabel() {\n      return this._periodButtonLabel;\n    }\n    /** The label for the previous button. */\n    get prevButtonLabel() {\n      return this._prevButtonLabel;\n    }\n    /** The label for the next button. */\n    get nextButtonLabel() {\n      return this._nextButtonLabel;\n    }\n    /** Handles user clicks on the period label. */\n    currentPeriodClicked() {\n      this.calendar.currentView = this.calendar.currentView == 'month' ? 'multi-year' : 'month';\n    }\n    /** Handles user clicks on the previous button. */\n    previousClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, -1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? -1 : -yearsPerPage);\n    }\n    /** Handles user clicks on the next button. */\n    nextClicked() {\n      this.calendar.activeDate = this.calendar.currentView == 'month' ? this._dateAdapter.addCalendarMonths(this.calendar.activeDate, 1) : this._dateAdapter.addCalendarYears(this.calendar.activeDate, this.calendar.currentView == 'year' ? 1 : yearsPerPage);\n    }\n    /** Whether the previous period button is enabled. */\n    previousEnabled() {\n      if (!this.calendar.minDate) {\n        return true;\n      }\n      return !this.calendar.minDate || !this._isSameView(this.calendar.activeDate, this.calendar.minDate);\n    }\n    /** Whether the next period button is enabled. */\n    nextEnabled() {\n      return !this.calendar.maxDate || !this._isSameView(this.calendar.activeDate, this.calendar.maxDate);\n    }\n    /** Updates the labels for the various sections of the header. */\n    _updateLabels() {\n      const calendar = this.calendar;\n      const intl = this._intl;\n      const adapter = this._dateAdapter;\n      if (calendar.currentView === 'month') {\n        this._periodButtonText = adapter.format(calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n        this._periodButtonDescription = adapter.format(calendar.activeDate, this._dateFormats.display.monthYearLabel).toLocaleUpperCase();\n        this._periodButtonLabel = intl.switchToMultiYearViewLabel;\n        this._prevButtonLabel = intl.prevMonthLabel;\n        this._nextButtonLabel = intl.nextMonthLabel;\n      } else if (calendar.currentView === 'year') {\n        this._periodButtonText = adapter.getYearName(calendar.activeDate);\n        this._periodButtonDescription = adapter.getYearName(calendar.activeDate);\n        this._periodButtonLabel = intl.switchToMonthViewLabel;\n        this._prevButtonLabel = intl.prevYearLabel;\n        this._nextButtonLabel = intl.nextYearLabel;\n      } else {\n        this._periodButtonText = intl.formatYearRange(...this._formatMinAndMaxYearLabels());\n        // Format a label for the window of years displayed in the multi-year calendar view. Use\n        // `formatYearRangeLabel` because it is TTS friendly.\n        this._periodButtonDescription = intl.formatYearRangeLabel(...this._formatMinAndMaxYearLabels());\n        this._periodButtonLabel = intl.switchToMonthViewLabel;\n        this._prevButtonLabel = intl.prevMultiYearLabel;\n        this._nextButtonLabel = intl.nextMultiYearLabel;\n      }\n    }\n    /** Whether the two dates represent the same view in the current view mode (month or year). */\n    _isSameView(date1, date2) {\n      if (this.calendar.currentView == 'month') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2) && this._dateAdapter.getMonth(date1) == this._dateAdapter.getMonth(date2);\n      }\n      if (this.calendar.currentView == 'year') {\n        return this._dateAdapter.getYear(date1) == this._dateAdapter.getYear(date2);\n      }\n      // Otherwise we are in 'multi-year' view.\n      return isSameMultiYearView(this._dateAdapter, date1, date2, this.calendar.minDate, this.calendar.maxDate);\n    }\n    /**\n     * Format two individual labels for the minimum year and maximum year available in the multi-year\n     * calendar view. Returns an array of two strings where the first string is the formatted label\n     * for the minimum year, and the second string is the formatted label for the maximum year.\n     */\n    _formatMinAndMaxYearLabels() {\n      // The offset from the active year to the \"slot\" for the starting year is the\n      // *actual* first rendered year in the multi-year view, and the last year is\n      // just yearsPerPage - 1 away.\n      const activeYear = this._dateAdapter.getYear(this.calendar.activeDate);\n      const minYearOfPage = activeYear - getActiveOffset(this._dateAdapter, this.calendar.activeDate, this.calendar.minDate, this.calendar.maxDate);\n      const maxYearOfPage = minYearOfPage + yearsPerPage - 1;\n      const minYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(minYearOfPage, 0, 1));\n      const maxYearLabel = this._dateAdapter.getYearName(this._dateAdapter.createDate(maxYearOfPage, 0, 1));\n      return [minYearLabel, maxYearLabel];\n    }\n    _periodButtonLabelId = inject(_IdGenerator).getId('mat-calendar-period-label-');\n    static ɵfac = function MatCalendarHeader_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCalendarHeader)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCalendarHeader,\n      selectors: [[\"mat-calendar-header\"]],\n      exportAs: [\"matCalendarHeader\"],\n      ngContentSelectors: _c1,\n      decls: 17,\n      vars: 11,\n      consts: [[1, \"mat-calendar-header\"], [1, \"mat-calendar-controls\"], [\"aria-live\", \"polite\", 1, \"cdk-visually-hidden\", 3, \"id\"], [\"matButton\", \"\", \"type\", \"button\", 1, \"mat-calendar-period-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"viewBox\", \"0 0 10 5\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-calendar-arrow\"], [\"points\", \"0,0 5,5 10,0\"], [1, \"mat-calendar-spacer\"], [\"matIconButton\", \"\", \"type\", \"button\", 1, \"mat-calendar-previous-button\", 3, \"click\", \"disabled\"], [\"viewBox\", \"0 0 24 24\", \"focusable\", \"false\", \"aria-hidden\", \"true\"], [\"d\", \"M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z\"], [\"matIconButton\", \"\", \"type\", \"button\", 1, \"mat-calendar-next-button\", 3, \"click\", \"disabled\"], [\"d\", \"M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z\"]],\n      template: function MatCalendarHeader_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"span\", 2);\n          i0.ɵɵtext(3);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"button\", 3);\n          i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_4_listener() {\n            return ctx.currentPeriodClicked();\n          });\n          i0.ɵɵelementStart(5, \"span\", 4);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(7, \"svg\", 5);\n          i0.ɵɵelement(8, \"polygon\", 6);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceHTML();\n          i0.ɵɵelement(9, \"div\", 7);\n          i0.ɵɵprojection(10);\n          i0.ɵɵelementStart(11, \"button\", 8);\n          i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_11_listener() {\n            return ctx.previousClicked();\n          });\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(12, \"svg\", 9);\n          i0.ɵɵelement(13, \"path\", 10);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵnamespaceHTML();\n          i0.ɵɵelementStart(14, \"button\", 11);\n          i0.ɵɵlistener(\"click\", function MatCalendarHeader_Template_button_click_14_listener() {\n            return ctx.nextClicked();\n          });\n          i0.ɵɵnamespaceSVG();\n          i0.ɵɵelementStart(15, \"svg\", 9);\n          i0.ɵɵelement(16, \"path\", 12);\n          i0.ɵɵelementEnd()()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"id\", ctx._periodButtonLabelId);\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.periodButtonDescription);\n          i0.ɵɵadvance();\n          i0.ɵɵattribute(\"aria-label\", ctx.periodButtonLabel)(\"aria-describedby\", ctx._periodButtonLabelId);\n          i0.ɵɵadvance(2);\n          i0.ɵɵtextInterpolate(ctx.periodButtonText);\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"mat-calendar-invert\", ctx.calendar.currentView !== \"month\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵproperty(\"disabled\", !ctx.previousEnabled());\n          i0.ɵɵattribute(\"aria-label\", ctx.prevButtonLabel);\n          i0.ɵɵadvance(3);\n          i0.ɵɵproperty(\"disabled\", !ctx.nextEnabled());\n          i0.ɵɵattribute(\"aria-label\", ctx.nextButtonLabel);\n        }\n      },\n      dependencies: [MatButton, MatIconButton],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatCalendarHeader;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** A calendar that is used as part of the datepicker. */\nlet MatCalendar = /*#__PURE__*/(() => {\n  class MatCalendar {\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    /** An input indicating the type of the header component, if set. */\n    headerComponent;\n    /** A portal containing the header component type for this calendar. */\n    _calendarHeaderPortal;\n    _intlChanges;\n    /**\n     * Used for scheduling that focus should be moved to the active cell on the next tick.\n     * We need to schedule it, rather than do it immediately, because we have to wait\n     * for Angular to re-evaluate the view children.\n     */\n    _moveFocusOnNextTick = false;\n    /** A date representing the period (month or year) to start the calendar in. */\n    get startAt() {\n      return this._startAt;\n    }\n    set startAt(value) {\n      this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _startAt;\n    /** Whether the calendar should be started in month or year view. */\n    startView = 'month';\n    /** The currently selected date. */\n    get selected() {\n      return this._selected;\n    }\n    set selected(value) {\n      if (value instanceof DateRange) {\n        this._selected = value;\n      } else {\n        this._selected = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      }\n    }\n    _selected;\n    /** The minimum selectable date. */\n    get minDate() {\n      return this._minDate;\n    }\n    set minDate(value) {\n      this._minDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _minDate;\n    /** The maximum selectable date. */\n    get maxDate() {\n      return this._maxDate;\n    }\n    set maxDate(value) {\n      this._maxDate = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _maxDate;\n    /** Function used to filter which dates are selectable. */\n    dateFilter;\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Emits when the currently selected date changes. */\n    selectedChange = new EventEmitter();\n    /**\n     * Emits the year chosen in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    yearSelected = new EventEmitter();\n    /**\n     * Emits the month chosen in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    monthSelected = new EventEmitter();\n    /**\n     * Emits when the current view changes.\n     */\n    viewChanged = new EventEmitter(true);\n    /** Emits when any date is selected. */\n    _userSelection = new EventEmitter();\n    /** Emits a new date range value when the user completes a drag drop operation. */\n    _userDragDrop = new EventEmitter();\n    /** Reference to the current month view component. */\n    monthView;\n    /** Reference to the current year view component. */\n    yearView;\n    /** Reference to the current multi-year view component. */\n    multiYearView;\n    /**\n     * The current active date. This determines which time period is shown and which date is\n     * highlighted when using keyboard navigation.\n     */\n    get activeDate() {\n      return this._clampedActiveDate;\n    }\n    set activeDate(value) {\n      this._clampedActiveDate = this._dateAdapter.clampDate(value, this.minDate, this.maxDate);\n      this.stateChanges.next();\n      this._changeDetectorRef.markForCheck();\n    }\n    _clampedActiveDate;\n    /** Whether the calendar is in month view. */\n    get currentView() {\n      return this._currentView;\n    }\n    set currentView(value) {\n      const viewChangedResult = this._currentView !== value ? value : null;\n      this._currentView = value;\n      this._moveFocusOnNextTick = true;\n      this._changeDetectorRef.markForCheck();\n      if (viewChangedResult) {\n        this.stateChanges.next();\n        this.viewChanged.emit(viewChangedResult);\n      }\n    }\n    _currentView;\n    /** Origin of active drag, or null when dragging is not active. */\n    _activeDrag = null;\n    /**\n     * Emits whenever there is a state change that the header may need to respond to.\n     */\n    stateChanges = new Subject();\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      this._intlChanges = inject(MatDatepickerIntl).changes.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n        this.stateChanges.next();\n      });\n    }\n    ngAfterContentInit() {\n      this._calendarHeaderPortal = new ComponentPortal(this.headerComponent || MatCalendarHeader);\n      this.activeDate = this.startAt || this._dateAdapter.today();\n      // Assign to the private property since we don't want to move focus on init.\n      this._currentView = this.startView;\n    }\n    ngAfterViewChecked() {\n      if (this._moveFocusOnNextTick) {\n        this._moveFocusOnNextTick = false;\n        this.focusActiveCell();\n      }\n    }\n    ngOnDestroy() {\n      this._intlChanges.unsubscribe();\n      this.stateChanges.complete();\n    }\n    ngOnChanges(changes) {\n      // Ignore date changes that are at a different time on the same day. This fixes issues where\n      // the calendar re-renders when there is no meaningful change to [minDate] or [maxDate]\n      // (#24435).\n      const minDateChange = changes['minDate'] && !this._dateAdapter.sameDate(changes['minDate'].previousValue, changes['minDate'].currentValue) ? changes['minDate'] : undefined;\n      const maxDateChange = changes['maxDate'] && !this._dateAdapter.sameDate(changes['maxDate'].previousValue, changes['maxDate'].currentValue) ? changes['maxDate'] : undefined;\n      const changeRequiringRerender = minDateChange || maxDateChange || changes['dateFilter'];\n      if (changeRequiringRerender && !changeRequiringRerender.firstChange) {\n        const view = this._getCurrentViewComponent();\n        if (view) {\n          // Schedule focus to be moved to the active date since re-rendering can blur the active\n          // cell (see #29265), however don't do so if focus is outside of the calendar, because it\n          // can steal away the user's attention (see #30635).\n          if (this._elementRef.nativeElement.contains(_getFocusedElementPierceShadowDom())) {\n            this._moveFocusOnNextTick = true;\n          }\n          // We need to `detectChanges` manually here, because the `minDate`, `maxDate` etc. are\n          // passed down to the view via data bindings which won't be up-to-date when we call `_init`.\n          this._changeDetectorRef.detectChanges();\n          view._init();\n        }\n      }\n      this.stateChanges.next();\n    }\n    /** Focuses the active date. */\n    focusActiveCell() {\n      this._getCurrentViewComponent()._focusActiveCell(false);\n    }\n    /** Updates today's date after an update of the active date */\n    updateTodaysDate() {\n      this._getCurrentViewComponent()._init();\n    }\n    /** Handles date selection in the month view. */\n    _dateSelected(event) {\n      const date = event.value;\n      if (this.selected instanceof DateRange || date && !this._dateAdapter.sameDate(date, this.selected)) {\n        this.selectedChange.emit(date);\n      }\n      this._userSelection.emit(event);\n    }\n    /** Handles year selection in the multiyear view. */\n    _yearSelectedInMultiYearView(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /** Handles month selection in the year view. */\n    _monthSelectedInYearView(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /** Handles year/month selection in the multi-year/year views. */\n    _goToDateInView(date, view) {\n      this.activeDate = date;\n      this.currentView = view;\n    }\n    /** Called when the user starts dragging to change a date range. */\n    _dragStarted(event) {\n      this._activeDrag = event;\n    }\n    /**\n     * Called when a drag completes. It may end in cancelation or in the selection\n     * of a new range.\n     */\n    _dragEnded(event) {\n      if (!this._activeDrag) return;\n      if (event.value) {\n        this._userDragDrop.emit(event);\n      }\n      this._activeDrag = null;\n    }\n    /** Returns the component instance that corresponds to the current calendar view. */\n    _getCurrentViewComponent() {\n      // The return type is explicitly written as a union to ensure that the Closure compiler does\n      // not optimize calls to _init(). Without the explicit return type, TypeScript narrows it to\n      // only the first component type. See https://github.com/angular/components/issues/22996.\n      return this.monthView || this.yearView || this.multiYearView;\n    }\n    static ɵfac = function MatCalendar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatCalendar)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatCalendar,\n      selectors: [[\"mat-calendar\"]],\n      viewQuery: function MatCalendar_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatMonthView, 5);\n          i0.ɵɵviewQuery(MatYearView, 5);\n          i0.ɵɵviewQuery(MatMultiYearView, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.monthView = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.yearView = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.multiYearView = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-calendar\"],\n      inputs: {\n        headerComponent: \"headerComponent\",\n        startAt: \"startAt\",\n        startView: \"startView\",\n        selected: \"selected\",\n        minDate: \"minDate\",\n        maxDate: \"maxDate\",\n        dateFilter: \"dateFilter\",\n        dateClass: \"dateClass\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\",\n        startDateAccessibleName: \"startDateAccessibleName\",\n        endDateAccessibleName: \"endDateAccessibleName\"\n      },\n      outputs: {\n        selectedChange: \"selectedChange\",\n        yearSelected: \"yearSelected\",\n        monthSelected: \"monthSelected\",\n        viewChanged: \"viewChanged\",\n        _userSelection: \"_userSelection\",\n        _userDragDrop: \"_userDragDrop\"\n      },\n      exportAs: [\"matCalendar\"],\n      features: [i0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER]), i0.ɵɵNgOnChangesFeature],\n      decls: 5,\n      vars: 2,\n      consts: [[3, \"cdkPortalOutlet\"], [\"cdkMonitorSubtreeFocus\", \"\", \"tabindex\", \"-1\", 1, \"mat-calendar-content\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], [3, \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"], [3, \"activeDateChange\", \"_userSelection\", \"dragStarted\", \"dragEnded\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\", \"activeDrag\"], [3, \"activeDateChange\", \"monthSelected\", \"selectedChange\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"], [3, \"activeDateChange\", \"yearSelected\", \"selectedChange\", \"activeDate\", \"selected\", \"dateFilter\", \"maxDate\", \"minDate\", \"dateClass\"]],\n      template: function MatCalendar_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵtemplate(0, MatCalendar_ng_template_0_Template, 0, 0, \"ng-template\", 0);\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵconditionalCreate(2, MatCalendar_Case_2_Template, 1, 11, \"mat-month-view\", 2)(3, MatCalendar_Case_3_Template, 1, 6, \"mat-year-view\", 3)(4, MatCalendar_Case_4_Template, 1, 6, \"mat-multi-year-view\", 3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          let tmp_1_0;\n          i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._calendarHeaderPortal);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional((tmp_1_0 = ctx.currentView) === \"month\" ? 2 : tmp_1_0 === \"year\" ? 3 : tmp_1_0 === \"multi-year\" ? 4 : -1);\n        }\n      },\n      dependencies: [CdkPortalOutlet, CdkMonitorFocus, MatMonthView, MatYearView, MatMultiYearView],\n      styles: [\".mat-calendar{display:block;line-height:normal;font-family:var(--mat-datepicker-calendar-text-font, var(--mat-sys-body-medium-font));font-size:var(--mat-datepicker-calendar-text-size, var(--mat-sys-body-medium-size))}.mat-calendar-header{padding:8px 8px 0 8px}.mat-calendar-content{padding:0 8px 8px 8px;outline:none}.mat-calendar-controls{display:flex;align-items:center;margin:5% calc(4.7142857143% - 16px)}.mat-calendar-spacer{flex:1 1 auto}.mat-calendar-period-button{min-width:0;margin:0 8px;font-size:var(--mat-datepicker-calendar-period-button-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-period-button-text-weight, var(--mat-sys-title-small-weight));--mat-button-text-label-text-color: var(--mat-datepicker-calendar-period-button-text-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow{display:inline-block;width:10px;height:5px;margin:0 0 0 5px;vertical-align:middle;fill:var(--mat-datepicker-calendar-period-button-icon-color, var(--mat-sys-on-surface-variant))}.mat-calendar-arrow.mat-calendar-invert{transform:rotate(180deg)}[dir=rtl] .mat-calendar-arrow{margin:0 5px 0 0}@media(forced-colors: active){.mat-calendar-arrow{fill:CanvasText}}.mat-datepicker-content .mat-calendar-previous-button:not(.mat-mdc-button-disabled),.mat-datepicker-content .mat-calendar-next-button:not(.mat-mdc-button-disabled){color:var(--mat-datepicker-calendar-navigation-button-icon-color, var(--mat-sys-on-surface-variant))}[dir=rtl] .mat-calendar-previous-button,[dir=rtl] .mat-calendar-next-button{transform:rotate(180deg)}.mat-calendar-table{border-spacing:0;border-collapse:collapse;width:100%}.mat-calendar-table-header th{text-align:center;padding:0 0 8px 0;color:var(--mat-datepicker-calendar-header-text-color, var(--mat-sys-on-surface-variant));font-size:var(--mat-datepicker-calendar-header-text-size, var(--mat-sys-title-small-size));font-weight:var(--mat-datepicker-calendar-header-text-weight, var(--mat-sys-title-small-weight))}.mat-calendar-table-header-divider{position:relative;height:1px}.mat-calendar-table-header-divider::after{content:\\\"\\\";position:absolute;top:0;left:-8px;right:-8px;height:1px;background:var(--mat-datepicker-calendar-header-divider-color, transparent)}.mat-calendar-body-cell-content::before{margin:calc(calc(var(--mat-focus-indicator-border-width, 3px) + 3px)*-1)}.mat-calendar-body-cell:focus .mat-focus-indicator::before{content:\\\"\\\"}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatCalendar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Injection token that determines the scroll handling while the calendar is open. */\nconst MAT_DATEPICKER_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-datepicker-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n  }\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY(_overlay) {\n  const injector = inject(Injector);\n  return () => createRepositionScrollStrategy(injector);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_DATEPICKER_SCROLL_STRATEGY,\n  deps: [],\n  useFactory: MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY\n};\n/**\n * Component used as the content for the datepicker overlay. We use this instead of using\n * MatCalendar directly as the content so we can control the initial focus. This also gives us a\n * place to put additional features of the overlay that are not part of the calendar itself in the\n * future. (e.g. confirmation buttons).\n * @docs-private\n */\nlet MatDatepickerContent = /*#__PURE__*/(() => {\n  class MatDatepickerContent {\n    _elementRef = inject(ElementRef);\n    _animationsDisabled = _animationsDisabled();\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _globalModel = inject(MatDateSelectionModel);\n    _dateAdapter = inject(DateAdapter);\n    _ngZone = inject(NgZone);\n    _rangeSelectionStrategy = inject(MAT_DATE_RANGE_SELECTION_STRATEGY, {\n      optional: true\n    });\n    _stateChanges;\n    _model;\n    _eventCleanups;\n    _animationFallback;\n    /** Reference to the internal calendar component. */\n    _calendar;\n    /**\n     * Theme color of the internal calendar. This API is supported in M2 themes\n     * only, it has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/datepicker/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Reference to the datepicker that created the overlay. */\n    datepicker;\n    /** Start of the comparison range. */\n    comparisonStart;\n    /** End of the comparison range. */\n    comparisonEnd;\n    /** ARIA Accessible name of the `<input matStartDate/>` */\n    startDateAccessibleName;\n    /** ARIA Accessible name of the `<input matEndDate/>` */\n    endDateAccessibleName;\n    /** Whether the datepicker is above or below the input. */\n    _isAbove;\n    /** Emits when an animation has finished. */\n    _animationDone = new Subject();\n    /** Whether there is an in-progress animation. */\n    _isAnimating = false;\n    /** Text for the close button. */\n    _closeButtonText;\n    /** Whether the close button currently has focus. */\n    _closeButtonFocused;\n    /** Portal with projected action buttons. */\n    _actionsPortal = null;\n    /** Id of the label for the `role=\"dialog\"` element. */\n    _dialogLabelId;\n    constructor() {\n      inject(_CdkPrivateStyleLoader).load(_VisuallyHiddenLoader);\n      this._closeButtonText = inject(MatDatepickerIntl).closeCalendarLabel;\n      if (!this._animationsDisabled) {\n        const element = this._elementRef.nativeElement;\n        const renderer = inject(Renderer2);\n        this._eventCleanups = this._ngZone.runOutsideAngular(() => [renderer.listen(element, 'animationstart', this._handleAnimationEvent), renderer.listen(element, 'animationend', this._handleAnimationEvent), renderer.listen(element, 'animationcancel', this._handleAnimationEvent)]);\n      }\n    }\n    ngAfterViewInit() {\n      this._stateChanges = this.datepicker.stateChanges.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n      this._calendar.focusActiveCell();\n    }\n    ngOnDestroy() {\n      clearTimeout(this._animationFallback);\n      this._eventCleanups?.forEach(cleanup => cleanup());\n      this._stateChanges?.unsubscribe();\n      this._animationDone.complete();\n    }\n    _handleUserSelection(event) {\n      const selection = this._model.selection;\n      const value = event.value;\n      const isRange = selection instanceof DateRange;\n      // If we're selecting a range and we have a selection strategy, always pass the value through\n      // there. Otherwise don't assign null values to the model, unless we're selecting a range.\n      // A null value when picking a range means that the user cancelled the selection (e.g. by\n      // pressing escape), whereas when selecting a single value it means that the value didn't\n      // change. This isn't very intuitive, but it's here for backwards-compatibility.\n      if (isRange && this._rangeSelectionStrategy) {\n        const newSelection = this._rangeSelectionStrategy.selectionFinished(value, selection, event.event);\n        this._model.updateSelection(newSelection, this);\n      } else if (value && (isRange || !this._dateAdapter.sameDate(value, selection))) {\n        this._model.add(value);\n      }\n      // Delegate closing the overlay to the actions.\n      if ((!this._model || this._model.isComplete()) && !this._actionsPortal) {\n        this.datepicker.close();\n      }\n    }\n    _handleUserDragDrop(event) {\n      this._model.updateSelection(event.value, this);\n    }\n    _startExitAnimation() {\n      this._elementRef.nativeElement.classList.add('mat-datepicker-content-exit');\n      if (this._animationsDisabled) {\n        this._animationDone.next();\n      } else {\n        // Some internal apps disable animations in tests using `* {animation: none !important}`.\n        // If that happens, the animation events won't fire and we'll never clean up the overlay.\n        // Add a fallback that will fire if the animation doesn't run in a certain amount of time.\n        clearTimeout(this._animationFallback);\n        this._animationFallback = setTimeout(() => {\n          if (!this._isAnimating) {\n            this._animationDone.next();\n          }\n        }, 200);\n      }\n    }\n    _handleAnimationEvent = event => {\n      const element = this._elementRef.nativeElement;\n      if (event.target !== element || !event.animationName.startsWith('_mat-datepicker-content')) {\n        return;\n      }\n      clearTimeout(this._animationFallback);\n      this._isAnimating = event.type === 'animationstart';\n      element.classList.toggle('mat-datepicker-content-animating', this._isAnimating);\n      if (!this._isAnimating) {\n        this._animationDone.next();\n      }\n    };\n    _getSelected() {\n      return this._model.selection;\n    }\n    /** Applies the current pending selection to the global model. */\n    _applyPendingSelection() {\n      if (this._model !== this._globalModel) {\n        this._globalModel.updateSelection(this._model.selection, this);\n      }\n    }\n    /**\n     * Assigns a new portal containing the datepicker actions.\n     * @param portal Portal with the actions to be assigned.\n     * @param forceRerender Whether a re-render of the portal should be triggered. This isn't\n     * necessary if the portal is assigned during initialization, but it may be required if it's\n     * added at a later point.\n     */\n    _assignActions(portal, forceRerender) {\n      // If we have actions, clone the model so that we have the ability to cancel the selection,\n      // otherwise update the global model directly. Note that we want to assign this as soon as\n      // possible, but `_actionsPortal` isn't available in the constructor so we do it in `ngOnInit`.\n      this._model = portal ? this._globalModel.clone() : this._globalModel;\n      this._actionsPortal = portal;\n      if (forceRerender) {\n        this._changeDetectorRef.detectChanges();\n      }\n    }\n    static ɵfac = function MatDatepickerContent_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerContent)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepickerContent,\n      selectors: [[\"mat-datepicker-content\"]],\n      viewQuery: function MatDatepickerContent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatCalendar, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._calendar = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-datepicker-content\"],\n      hostVars: 6,\n      hostBindings: function MatDatepickerContent_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassMap(ctx.color ? \"mat-\" + ctx.color : \"\");\n          i0.ɵɵclassProp(\"mat-datepicker-content-touch\", ctx.datepicker.touchUi)(\"mat-datepicker-content-animations-enabled\", !ctx._animationsDisabled);\n        }\n      },\n      inputs: {\n        color: \"color\"\n      },\n      exportAs: [\"matDatepickerContent\"],\n      decls: 5,\n      vars: 26,\n      consts: [[\"cdkTrapFocus\", \"\", \"role\", \"dialog\", 1, \"mat-datepicker-content-container\"], [3, \"yearSelected\", \"monthSelected\", \"viewChanged\", \"_userSelection\", \"_userDragDrop\", \"id\", \"startAt\", \"startView\", \"minDate\", \"maxDate\", \"dateFilter\", \"headerComponent\", \"selected\", \"dateClass\", \"comparisonStart\", \"comparisonEnd\", \"startDateAccessibleName\", \"endDateAccessibleName\"], [3, \"cdkPortalOutlet\"], [\"type\", \"button\", \"matButton\", \"elevated\", 1, \"mat-datepicker-close-button\", 3, \"focus\", \"blur\", \"click\", \"color\"]],\n      template: function MatDatepickerContent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 0)(1, \"mat-calendar\", 1);\n          i0.ɵɵlistener(\"yearSelected\", function MatDatepickerContent_Template_mat_calendar_yearSelected_1_listener($event) {\n            return ctx.datepicker._selectYear($event);\n          })(\"monthSelected\", function MatDatepickerContent_Template_mat_calendar_monthSelected_1_listener($event) {\n            return ctx.datepicker._selectMonth($event);\n          })(\"viewChanged\", function MatDatepickerContent_Template_mat_calendar_viewChanged_1_listener($event) {\n            return ctx.datepicker._viewChanged($event);\n          })(\"_userSelection\", function MatDatepickerContent_Template_mat_calendar__userSelection_1_listener($event) {\n            return ctx._handleUserSelection($event);\n          })(\"_userDragDrop\", function MatDatepickerContent_Template_mat_calendar__userDragDrop_1_listener($event) {\n            return ctx._handleUserDragDrop($event);\n          });\n          i0.ɵɵelementEnd();\n          i0.ɵɵtemplate(2, MatDatepickerContent_ng_template_2_Template, 0, 0, \"ng-template\", 2);\n          i0.ɵɵelementStart(3, \"button\", 3);\n          i0.ɵɵlistener(\"focus\", function MatDatepickerContent_Template_button_focus_3_listener() {\n            return ctx._closeButtonFocused = true;\n          })(\"blur\", function MatDatepickerContent_Template_button_blur_3_listener() {\n            return ctx._closeButtonFocused = false;\n          })(\"click\", function MatDatepickerContent_Template_button_click_3_listener() {\n            return ctx.datepicker.close();\n          });\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd()();\n        }\n        if (rf & 2) {\n          i0.ɵɵclassProp(\"mat-datepicker-content-container-with-custom-header\", ctx.datepicker.calendarHeaderComponent)(\"mat-datepicker-content-container-with-actions\", ctx._actionsPortal);\n          i0.ɵɵattribute(\"aria-modal\", true)(\"aria-labelledby\", ctx._dialogLabelId ?? undefined);\n          i0.ɵɵadvance();\n          i0.ɵɵclassMap(ctx.datepicker.panelClass);\n          i0.ɵɵproperty(\"id\", ctx.datepicker.id)(\"startAt\", ctx.datepicker.startAt)(\"startView\", ctx.datepicker.startView)(\"minDate\", ctx.datepicker._getMinDate())(\"maxDate\", ctx.datepicker._getMaxDate())(\"dateFilter\", ctx.datepicker._getDateFilter())(\"headerComponent\", ctx.datepicker.calendarHeaderComponent)(\"selected\", ctx._getSelected())(\"dateClass\", ctx.datepicker.dateClass)(\"comparisonStart\", ctx.comparisonStart)(\"comparisonEnd\", ctx.comparisonEnd)(\"startDateAccessibleName\", ctx.startDateAccessibleName)(\"endDateAccessibleName\", ctx.endDateAccessibleName);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"cdkPortalOutlet\", ctx._actionsPortal);\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"cdk-visually-hidden\", !ctx._closeButtonFocused);\n          i0.ɵɵproperty(\"color\", ctx.color || \"primary\");\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx._closeButtonText);\n        }\n      },\n      dependencies: [CdkTrapFocus, MatCalendar, CdkPortalOutlet, MatButton],\n      styles: [\"@keyframes _mat-datepicker-content-dropdown-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-dialog-enter{from{opacity:0;transform:scale(0.8)}to{opacity:1;transform:none}}@keyframes _mat-datepicker-content-exit{from{opacity:1}to{opacity:0}}.mat-datepicker-content{display:block;background-color:var(--mat-datepicker-calendar-container-background-color, var(--mat-sys-surface-container-high));color:var(--mat-datepicker-calendar-container-text-color, var(--mat-sys-on-surface));box-shadow:var(--mat-datepicker-calendar-container-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-shape, var(--mat-sys-corner-large))}.mat-datepicker-content.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dropdown-enter 120ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content .mat-calendar{width:296px;height:354px}.mat-datepicker-content .mat-datepicker-content-container-with-custom-header .mat-calendar{height:auto}.mat-datepicker-content .mat-datepicker-close-button{position:absolute;top:100%;left:0;margin-top:8px}.mat-datepicker-content-animating .mat-datepicker-content .mat-datepicker-close-button{display:none}.mat-datepicker-content-container{display:flex;flex-direction:column;justify-content:space-between}.mat-datepicker-content-touch{display:block;max-height:80vh;box-shadow:var(--mat-datepicker-calendar-container-touch-elevation-shadow, 0px 0px 0px 0px rgba(0, 0, 0, 0.2), 0px 0px 0px 0px rgba(0, 0, 0, 0.14), 0px 0px 0px 0px rgba(0, 0, 0, 0.12));border-radius:var(--mat-datepicker-calendar-container-touch-shape, var(--mat-sys-corner-extra-large));position:relative;overflow:visible}.mat-datepicker-content-touch.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-dialog-enter 150ms cubic-bezier(0, 0, 0.2, 1)}.mat-datepicker-content-touch .mat-datepicker-content-container{min-height:312px;max-height:788px;min-width:250px;max-width:750px}.mat-datepicker-content-touch .mat-calendar{width:100%;height:auto}.mat-datepicker-content-exit.mat-datepicker-content-animations-enabled{animation:_mat-datepicker-content-exit 100ms linear}@media all and (orientation: landscape){.mat-datepicker-content-touch .mat-datepicker-content-container{width:64vh;height:80vh}}@media all and (orientation: portrait){.mat-datepicker-content-touch .mat-datepicker-content-container{width:80vw;height:100vw}.mat-datepicker-content-touch .mat-datepicker-content-container-with-actions{height:115vw}}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepickerContent;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Base class for a datepicker. */\nlet MatDatepickerBase = /*#__PURE__*/(() => {\n  class MatDatepickerBase {\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _model = inject(MatDateSelectionModel);\n    _animationsDisabled = _animationsDisabled();\n    _scrollStrategy = inject(MAT_DATEPICKER_SCROLL_STRATEGY);\n    _inputStateChanges = Subscription.EMPTY;\n    _document = inject(DOCUMENT);\n    /** An input indicating the type of the custom header component for the calendar, if set. */\n    calendarHeaderComponent;\n    /** The date to open the calendar to initially. */\n    get startAt() {\n      // If an explicit startAt is set we start there, otherwise we start at whatever the currently\n      // selected value is.\n      return this._startAt || (this.datepickerInput ? this.datepickerInput.getStartValue() : null);\n    }\n    set startAt(value) {\n      this._startAt = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n    }\n    _startAt;\n    /** The view that the calendar should start in. */\n    startView = 'month';\n    /**\n     * Theme color of the datepicker's calendar. This API is supported in M2 themes only, it\n     * has no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/datepicker/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    get color() {\n      return this._color || (this.datepickerInput ? this.datepickerInput.getThemePalette() : undefined);\n    }\n    set color(value) {\n      this._color = value;\n    }\n    _color;\n    /**\n     * Whether the calendar UI is in touch mode. In touch mode the calendar opens in a dialog rather\n     * than a dropdown and elements have more padding to allow for bigger touch targets.\n     */\n    touchUi = false;\n    /** Whether the datepicker pop-up should be disabled. */\n    get disabled() {\n      return this._disabled === undefined && this.datepickerInput ? this.datepickerInput.disabled : !!this._disabled;\n    }\n    set disabled(value) {\n      if (value !== this._disabled) {\n        this._disabled = value;\n        this.stateChanges.next(undefined);\n      }\n    }\n    _disabled;\n    /** Preferred position of the datepicker in the X axis. */\n    xPosition = 'start';\n    /** Preferred position of the datepicker in the Y axis. */\n    yPosition = 'below';\n    /**\n     * Whether to restore focus to the previously-focused element when the calendar is closed.\n     * Note that automatic focus restoration is an accessibility feature and it is recommended that\n     * you provide your own equivalent, if you decide to turn it off.\n     */\n    restoreFocus = true;\n    /**\n     * Emits selected year in multiyear view.\n     * This doesn't imply a change on the selected date.\n     */\n    yearSelected = new EventEmitter();\n    /**\n     * Emits selected month in year view.\n     * This doesn't imply a change on the selected date.\n     */\n    monthSelected = new EventEmitter();\n    /**\n     * Emits when the current view changes.\n     */\n    viewChanged = new EventEmitter(true);\n    /** Function that can be used to add custom CSS classes to dates. */\n    dateClass;\n    /** Emits when the datepicker has been opened. */\n    openedStream = new EventEmitter();\n    /** Emits when the datepicker has been closed. */\n    closedStream = new EventEmitter();\n    /** Classes to be passed to the date picker panel. */\n    get panelClass() {\n      return this._panelClass;\n    }\n    set panelClass(value) {\n      this._panelClass = coerceStringArray(value);\n    }\n    _panelClass;\n    /** Whether the calendar is open. */\n    get opened() {\n      return this._opened;\n    }\n    set opened(value) {\n      if (value) {\n        this.open();\n      } else {\n        this.close();\n      }\n    }\n    _opened = false;\n    /** The id for the datepicker calendar. */\n    id = inject(_IdGenerator).getId('mat-datepicker-');\n    /** The minimum selectable date. */\n    _getMinDate() {\n      return this.datepickerInput && this.datepickerInput.min;\n    }\n    /** The maximum selectable date. */\n    _getMaxDate() {\n      return this.datepickerInput && this.datepickerInput.max;\n    }\n    _getDateFilter() {\n      return this.datepickerInput && this.datepickerInput.dateFilter;\n    }\n    /** A reference to the overlay into which we've rendered the calendar. */\n    _overlayRef;\n    /** Reference to the component instance rendered in the overlay. */\n    _componentRef;\n    /** The element that was focused before the datepicker was opened. */\n    _focusedElementBeforeOpen = null;\n    /** Unique class that will be added to the backdrop so that the test harnesses can look it up. */\n    _backdropHarnessClass = `${this.id}-backdrop`;\n    /** Currently-registered actions portal. */\n    _actionsPortal;\n    /** The input element this datepicker is associated with. */\n    datepickerInput;\n    /** Emits when the datepicker's state changes. */\n    stateChanges = new Subject();\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    constructor() {\n      if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      this._model.selectionChanged.subscribe(() => {\n        this._changeDetectorRef.markForCheck();\n      });\n    }\n    ngOnChanges(changes) {\n      const positionChange = changes['xPosition'] || changes['yPosition'];\n      if (positionChange && !positionChange.firstChange && this._overlayRef) {\n        const positionStrategy = this._overlayRef.getConfig().positionStrategy;\n        if (positionStrategy instanceof FlexibleConnectedPositionStrategy) {\n          this._setConnectedPositions(positionStrategy);\n          if (this.opened) {\n            this._overlayRef.updatePosition();\n          }\n        }\n      }\n      this.stateChanges.next(undefined);\n    }\n    ngOnDestroy() {\n      this._destroyOverlay();\n      this.close();\n      this._inputStateChanges.unsubscribe();\n      this.stateChanges.complete();\n    }\n    /** Selects the given date */\n    select(date) {\n      this._model.add(date);\n    }\n    /** Emits the selected year in multiyear view */\n    _selectYear(normalizedYear) {\n      this.yearSelected.emit(normalizedYear);\n    }\n    /** Emits selected month in year view */\n    _selectMonth(normalizedMonth) {\n      this.monthSelected.emit(normalizedMonth);\n    }\n    /** Emits changed view */\n    _viewChanged(view) {\n      this.viewChanged.emit(view);\n    }\n    /**\n     * Register an input with this datepicker.\n     * @param input The datepicker input to register with this datepicker.\n     * @returns Selection model that the input should hook itself up to.\n     */\n    registerInput(input) {\n      if (this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('A MatDatepicker can only be associated with a single input.');\n      }\n      this._inputStateChanges.unsubscribe();\n      this.datepickerInput = input;\n      this._inputStateChanges = input.stateChanges.subscribe(() => this.stateChanges.next(undefined));\n      return this._model;\n    }\n    /**\n     * Registers a portal containing action buttons with the datepicker.\n     * @param portal Portal to be registered.\n     */\n    registerActions(portal) {\n      if (this._actionsPortal && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('A MatDatepicker can only be associated with a single actions row.');\n      }\n      this._actionsPortal = portal;\n      this._componentRef?.instance._assignActions(portal, true);\n    }\n    /**\n     * Removes a portal containing action buttons from the datepicker.\n     * @param portal Portal to be removed.\n     */\n    removeActions(portal) {\n      if (portal === this._actionsPortal) {\n        this._actionsPortal = null;\n        this._componentRef?.instance._assignActions(null, true);\n      }\n    }\n    /** Open the calendar. */\n    open() {\n      // Skip reopening if there's an in-progress animation to avoid overlapping\n      // sequences which can cause \"changed after checked\" errors. See #25837.\n      if (this._opened || this.disabled || this._componentRef?.instance._isAnimating) {\n        return;\n      }\n      if (!this.datepickerInput && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error('Attempted to open an MatDatepicker with no associated input.');\n      }\n      this._focusedElementBeforeOpen = _getFocusedElementPierceShadowDom();\n      this._openOverlay();\n      this._opened = true;\n      this.openedStream.emit();\n    }\n    /** Close the calendar. */\n    close() {\n      // Skip reopening if there's an in-progress animation to avoid overlapping\n      // sequences which can cause \"changed after checked\" errors. See #25837.\n      if (!this._opened || this._componentRef?.instance._isAnimating) {\n        return;\n      }\n      const canRestoreFocus = this.restoreFocus && this._focusedElementBeforeOpen && typeof this._focusedElementBeforeOpen.focus === 'function';\n      const completeClose = () => {\n        // The `_opened` could've been reset already if\n        // we got two events in quick succession.\n        if (this._opened) {\n          this._opened = false;\n          this.closedStream.emit();\n        }\n      };\n      if (this._componentRef) {\n        const {\n          instance,\n          location\n        } = this._componentRef;\n        instance._animationDone.pipe(take(1)).subscribe(() => {\n          const activeElement = this._document.activeElement;\n          // Since we restore focus after the exit animation, we have to check that\n          // the user didn't move focus themselves inside the `close` handler.\n          if (canRestoreFocus && (!activeElement || activeElement === this._document.activeElement || location.nativeElement.contains(activeElement))) {\n            this._focusedElementBeforeOpen.focus();\n          }\n          this._focusedElementBeforeOpen = null;\n          this._destroyOverlay();\n        });\n        instance._startExitAnimation();\n      }\n      if (canRestoreFocus) {\n        // Because IE moves focus asynchronously, we can't count on it being restored before we've\n        // marked the datepicker as closed. If the event fires out of sequence and the element that\n        // we're refocusing opens the datepicker on focus, the user could be stuck with not being\n        // able to close the calendar at all. We work around it by making the logic, that marks\n        // the datepicker as closed, async as well.\n        setTimeout(completeClose);\n      } else {\n        completeClose();\n      }\n    }\n    /** Applies the current pending selection on the overlay to the model. */\n    _applyPendingSelection() {\n      this._componentRef?.instance?._applyPendingSelection();\n    }\n    /** Forwards relevant values from the datepicker to the datepicker content inside the overlay. */\n    _forwardContentValues(instance) {\n      instance.datepicker = this;\n      instance.color = this.color;\n      instance._dialogLabelId = this.datepickerInput.getOverlayLabelId();\n      instance._assignActions(this._actionsPortal, false);\n    }\n    /** Opens the overlay with the calendar. */\n    _openOverlay() {\n      this._destroyOverlay();\n      const isDialog = this.touchUi;\n      const portal = new ComponentPortal(MatDatepickerContent, this._viewContainerRef);\n      const overlayRef = this._overlayRef = createOverlayRef(this._injector, new OverlayConfig({\n        positionStrategy: isDialog ? this._getDialogStrategy() : this._getDropdownStrategy(),\n        hasBackdrop: true,\n        backdropClass: [isDialog ? 'cdk-overlay-dark-backdrop' : 'mat-overlay-transparent-backdrop', this._backdropHarnessClass],\n        direction: this._dir || 'ltr',\n        scrollStrategy: isDialog ? createBlockScrollStrategy(this._injector) : this._scrollStrategy(),\n        panelClass: `mat-datepicker-${isDialog ? 'dialog' : 'popup'}`,\n        disableAnimations: this._animationsDisabled\n      }));\n      this._getCloseStream(overlayRef).subscribe(event => {\n        if (event) {\n          event.preventDefault();\n        }\n        this.close();\n      });\n      // The `preventDefault` call happens inside the calendar as well, however focus moves into\n      // it inside a timeout which can give browsers a chance to fire off a keyboard event in-between\n      // that can scroll the page (see #24969). Always block default actions of arrow keys for the\n      // entire overlay so the page doesn't get scrolled by accident.\n      overlayRef.keydownEvents().subscribe(event => {\n        const keyCode = event.keyCode;\n        if (keyCode === UP_ARROW || keyCode === DOWN_ARROW || keyCode === LEFT_ARROW || keyCode === RIGHT_ARROW || keyCode === PAGE_UP || keyCode === PAGE_DOWN) {\n          event.preventDefault();\n        }\n      });\n      this._componentRef = overlayRef.attach(portal);\n      this._forwardContentValues(this._componentRef.instance);\n      // Update the position once the calendar has rendered. Only relevant in dropdown mode.\n      if (!isDialog) {\n        afterNextRender(() => {\n          overlayRef.updatePosition();\n        }, {\n          injector: this._injector\n        });\n      }\n    }\n    /** Destroys the current overlay. */\n    _destroyOverlay() {\n      if (this._overlayRef) {\n        this._overlayRef.dispose();\n        this._overlayRef = this._componentRef = null;\n      }\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDialogStrategy() {\n      return createGlobalPositionStrategy(this._injector).centerHorizontally().centerVertically();\n    }\n    /** Gets a position strategy that will open the calendar as a dropdown. */\n    _getDropdownStrategy() {\n      const strategy = createFlexibleConnectedPositionStrategy(this._injector, this.datepickerInput.getConnectedOverlayOrigin()).withTransformOriginOn('.mat-datepicker-content').withFlexibleDimensions(false).withViewportMargin(8).withLockedPosition();\n      return this._setConnectedPositions(strategy);\n    }\n    /** Sets the positions of the datepicker in dropdown mode based on the current configuration. */\n    _setConnectedPositions(strategy) {\n      const primaryX = this.xPosition === 'end' ? 'end' : 'start';\n      const secondaryX = primaryX === 'start' ? 'end' : 'start';\n      const primaryY = this.yPosition === 'above' ? 'bottom' : 'top';\n      const secondaryY = primaryY === 'top' ? 'bottom' : 'top';\n      return strategy.withPositions([{\n        originX: primaryX,\n        originY: secondaryY,\n        overlayX: primaryX,\n        overlayY: primaryY\n      }, {\n        originX: primaryX,\n        originY: primaryY,\n        overlayX: primaryX,\n        overlayY: secondaryY\n      }, {\n        originX: secondaryX,\n        originY: secondaryY,\n        overlayX: secondaryX,\n        overlayY: primaryY\n      }, {\n        originX: secondaryX,\n        originY: primaryY,\n        overlayX: secondaryX,\n        overlayY: secondaryY\n      }]);\n    }\n    /** Gets an observable that will emit when the overlay is supposed to be closed. */\n    _getCloseStream(overlayRef) {\n      const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n      return merge(overlayRef.backdropClick(), overlayRef.detachments(), overlayRef.keydownEvents().pipe(filter(event => {\n        // Closing on alt + up is only valid when there's an input associated with the datepicker.\n        return event.keyCode === ESCAPE && !hasModifierKey(event) || this.datepickerInput && hasModifierKey(event, 'altKey') && event.keyCode === UP_ARROW && ctrlShiftMetaModifiers.every(modifier => !hasModifierKey(event, modifier));\n      })));\n    }\n    static ɵfac = function MatDatepickerBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerBase)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerBase,\n      inputs: {\n        calendarHeaderComponent: \"calendarHeaderComponent\",\n        startAt: \"startAt\",\n        startView: \"startView\",\n        color: \"color\",\n        touchUi: [2, \"touchUi\", \"touchUi\", booleanAttribute],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        xPosition: \"xPosition\",\n        yPosition: \"yPosition\",\n        restoreFocus: [2, \"restoreFocus\", \"restoreFocus\", booleanAttribute],\n        dateClass: \"dateClass\",\n        panelClass: \"panelClass\",\n        opened: [2, \"opened\", \"opened\", booleanAttribute]\n      },\n      outputs: {\n        yearSelected: \"yearSelected\",\n        monthSelected: \"monthSelected\",\n        viewChanged: \"viewChanged\",\n        openedStream: \"opened\",\n        closedStream: \"closed\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatDatepickerBase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDatepicker\"). We can change this to a directive\n// if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the datepicker popup/dialog. */\nlet MatDatepicker = /*#__PURE__*/(() => {\n  class MatDatepicker extends MatDatepickerBase {\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatDatepicker_BaseFactory;\n      return function MatDatepicker_Factory(__ngFactoryType__) {\n        return (ɵMatDatepicker_BaseFactory || (ɵMatDatepicker_BaseFactory = i0.ɵɵgetInheritedFactory(MatDatepicker)))(__ngFactoryType__ || MatDatepicker);\n      };\n    })();\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepicker,\n      selectors: [[\"mat-datepicker\"]],\n      exportAs: [\"matDatepicker\"],\n      features: [i0.ɵɵProvidersFeature([MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, {\n        provide: MatDatepickerBase,\n        useExisting: MatDatepicker\n      }]), i0.ɵɵInheritDefinitionFeature],\n      decls: 0,\n      vars: 0,\n      template: function MatDatepicker_Template(rf, ctx) {},\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepicker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * An event used for datepicker input and change events. We don't always have access to a native\n * input or change event because the event may have been triggered by the user clicking on the\n * calendar popup. For consistency, we always use MatDatepickerInputEvent instead.\n */\nclass MatDatepickerInputEvent {\n  target;\n  targetElement;\n  /** The new value for the target datepicker input. */\n  value;\n  constructor(/** Reference to the datepicker input component that emitted the event. */\n  target, /** Reference to the native input element associated with the datepicker input. */\n  targetElement) {\n    this.target = target;\n    this.targetElement = targetElement;\n    this.value = this.target.value;\n  }\n}\n/** Base class for datepicker inputs. */\nlet MatDatepickerInputBase = /*#__PURE__*/(() => {\n  class MatDatepickerInputBase {\n    _elementRef = inject(ElementRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _dateFormats = inject(MAT_DATE_FORMATS, {\n      optional: true\n    });\n    /** Whether the component has been initialized. */\n    _isInitialized;\n    /** The value of the input. */\n    get value() {\n      return this._model ? this._getValueFromModel(this._model.selection) : this._pendingValue;\n    }\n    set value(value) {\n      this._assignValueProgrammatically(value);\n    }\n    _model;\n    /** Whether the datepicker-input is disabled. */\n    get disabled() {\n      return !!this._disabled || this._parentDisabled();\n    }\n    set disabled(value) {\n      const newValue = value;\n      const element = this._elementRef.nativeElement;\n      if (this._disabled !== newValue) {\n        this._disabled = newValue;\n        this.stateChanges.next(undefined);\n      }\n      // We need to null check the `blur` method, because it's undefined during SSR.\n      // In Ivy static bindings are invoked earlier, before the element is attached to the DOM.\n      // This can cause an error to be thrown in some browsers (IE/Edge) which assert that the\n      // element has been inserted.\n      if (newValue && this._isInitialized && element.blur) {\n        // Normally, native input elements automatically blur if they turn disabled. This behavior\n        // is problematic, because it would mean that it triggers another change detection cycle,\n        // which then causes a changed after checked error if the input element was focused before.\n        element.blur();\n      }\n    }\n    _disabled;\n    /** Emits when a `change` event is fired on this `<input>`. */\n    dateChange = new EventEmitter();\n    /** Emits when an `input` event is fired on this `<input>`. */\n    dateInput = new EventEmitter();\n    /** Emits when the internal state has changed */\n    stateChanges = new Subject();\n    _onTouched = () => {};\n    _validatorOnChange = () => {};\n    _cvaOnChange = () => {};\n    _valueChangesSubscription = Subscription.EMPTY;\n    _localeSubscription = Subscription.EMPTY;\n    /**\n     * Since the value is kept on the model which is assigned in an Input,\n     * we might get a value before we have a model. This property keeps track\n     * of the value until we have somewhere to assign it.\n     */\n    _pendingValue;\n    /** The form control validator for whether the input parses. */\n    _parseValidator = () => {\n      return this._lastValueValid ? null : {\n        'matDatepickerParse': {\n          'text': this._elementRef.nativeElement.value\n        }\n      };\n    };\n    /** The form control validator for the date filter. */\n    _filterValidator = control => {\n      const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      return !controlValue || this._matchesFilter(controlValue) ? null : {\n        'matDatepickerFilter': true\n      };\n    };\n    /** The form control validator for the min date. */\n    _minValidator = control => {\n      const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const min = this._getMinDate();\n      return !min || !controlValue || this._dateAdapter.compareDate(min, controlValue) <= 0 ? null : {\n        'matDatepickerMin': {\n          'min': min,\n          'actual': controlValue\n        }\n      };\n    };\n    /** The form control validator for the max date. */\n    _maxValidator = control => {\n      const controlValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const max = this._getMaxDate();\n      return !max || !controlValue || this._dateAdapter.compareDate(max, controlValue) >= 0 ? null : {\n        'matDatepickerMax': {\n          'max': max,\n          'actual': controlValue\n        }\n      };\n    };\n    /** Gets the base validator functions. */\n    _getValidators() {\n      return [this._parseValidator, this._minValidator, this._maxValidator, this._filterValidator];\n    }\n    /** Registers a date selection model with the input. */\n    _registerModel(model) {\n      this._model = model;\n      this._valueChangesSubscription.unsubscribe();\n      if (this._pendingValue) {\n        this._assignValue(this._pendingValue);\n      }\n      this._valueChangesSubscription = this._model.selectionChanged.subscribe(event => {\n        if (this._shouldHandleChangeEvent(event)) {\n          const value = this._getValueFromModel(event.selection);\n          this._lastValueValid = this._isValidValue(value);\n          this._cvaOnChange(value);\n          this._onTouched();\n          this._formatValue(value);\n          this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n          this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n        }\n      });\n    }\n    /** Whether the last value set on the input was valid. */\n    _lastValueValid = false;\n    constructor() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._dateAdapter) {\n          throw createMissingDateImplError('DateAdapter');\n        }\n        if (!this._dateFormats) {\n          throw createMissingDateImplError('MAT_DATE_FORMATS');\n        }\n      }\n      // Update the displayed date when the locale changes.\n      this._localeSubscription = this._dateAdapter.localeChanges.subscribe(() => {\n        this._assignValueProgrammatically(this.value);\n      });\n    }\n    ngAfterViewInit() {\n      this._isInitialized = true;\n    }\n    ngOnChanges(changes) {\n      if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n        this.stateChanges.next(undefined);\n      }\n    }\n    ngOnDestroy() {\n      this._valueChangesSubscription.unsubscribe();\n      this._localeSubscription.unsubscribe();\n      this.stateChanges.complete();\n    }\n    /** @docs-private */\n    registerOnValidatorChange(fn) {\n      this._validatorOnChange = fn;\n    }\n    /** @docs-private */\n    validate(c) {\n      return this._validator ? this._validator(c) : null;\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n      this._assignValueProgrammatically(value);\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n      this._cvaOnChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n    }\n    _onKeydown(event) {\n      const ctrlShiftMetaModifiers = ['ctrlKey', 'shiftKey', 'metaKey'];\n      const isAltDownArrow = hasModifierKey(event, 'altKey') && event.keyCode === DOWN_ARROW && ctrlShiftMetaModifiers.every(modifier => !hasModifierKey(event, modifier));\n      if (isAltDownArrow && !this._elementRef.nativeElement.readOnly) {\n        this._openPopup();\n        event.preventDefault();\n      }\n    }\n    _onInput(event) {\n      const value = event.target.value;\n      const lastValueWasValid = this._lastValueValid;\n      let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\n      this._lastValueValid = this._isValidValue(date);\n      date = this._dateAdapter.getValidDateOrNull(date);\n      const hasChanged = !this._dateAdapter.sameDate(date, this.value);\n      // We need to fire the CVA change event for all\n      // nulls, otherwise the validators won't run.\n      if (!date || hasChanged) {\n        this._cvaOnChange(date);\n      } else {\n        // Call the CVA change handler for invalid values\n        // since this is what marks the control as dirty.\n        if (value && !this.value) {\n          this._cvaOnChange(date);\n        }\n        if (lastValueWasValid !== this._lastValueValid) {\n          this._validatorOnChange();\n        }\n      }\n      if (hasChanged) {\n        this._assignValue(date);\n        this.dateInput.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n      }\n    }\n    _onChange() {\n      this.dateChange.emit(new MatDatepickerInputEvent(this, this._elementRef.nativeElement));\n    }\n    /** Handles blur events on the input. */\n    _onBlur() {\n      // Reformat the input only if we have a valid value.\n      if (this.value) {\n        this._formatValue(this.value);\n      }\n      this._onTouched();\n    }\n    /** Formats a value and sets it on the input element. */\n    _formatValue(value) {\n      this._elementRef.nativeElement.value = value != null ? this._dateAdapter.format(value, this._dateFormats.display.dateInput) : '';\n    }\n    /** Assigns a value to the model. */\n    _assignValue(value) {\n      // We may get some incoming values before the model was\n      // assigned. Save the value so that we can assign it later.\n      if (this._model) {\n        this._assignValueToModel(value);\n        this._pendingValue = null;\n      } else {\n        this._pendingValue = value;\n      }\n    }\n    /** Whether a value is considered valid. */\n    _isValidValue(value) {\n      return !value || this._dateAdapter.isValid(value);\n    }\n    /**\n     * Checks whether a parent control is disabled. This is in place so that it can be overridden\n     * by inputs extending this one which can be placed inside of a group that can be disabled.\n     */\n    _parentDisabled() {\n      return false;\n    }\n    /** Programmatically assigns a value to the input. */\n    _assignValueProgrammatically(value) {\n      value = this._dateAdapter.deserialize(value);\n      this._lastValueValid = this._isValidValue(value);\n      value = this._dateAdapter.getValidDateOrNull(value);\n      this._assignValue(value);\n      this._formatValue(value);\n    }\n    /** Gets whether a value matches the current date filter. */\n    _matchesFilter(value) {\n      const filter = this._getDateFilter();\n      return !filter || filter(value);\n    }\n    static ɵfac = function MatDatepickerInputBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerInputBase)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerInputBase,\n      inputs: {\n        value: \"value\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute]\n      },\n      outputs: {\n        dateChange: \"dateChange\",\n        dateInput: \"dateInput\"\n      },\n      features: [i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatDatepickerInputBase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Checks whether the `SimpleChanges` object from an `ngOnChanges`\n * callback has any changes, accounting for date objects.\n */\nfunction dateInputsHaveChanged(changes, adapter) {\n  const keys = Object.keys(changes);\n  for (let key of keys) {\n    const {\n      previousValue,\n      currentValue\n    } = changes[key];\n    if (adapter.isDateInstance(previousValue) && adapter.isDateInstance(currentValue)) {\n      if (!adapter.sameDate(previousValue, currentValue)) {\n        return true;\n      }\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\n/** @docs-private */\nconst MAT_DATEPICKER_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/** @docs-private */\nconst MAT_DATEPICKER_VALIDATORS = {\n  provide: NG_VALIDATORS,\n  useExisting: /*#__PURE__*/forwardRef(() => MatDatepickerInput),\n  multi: true\n};\n/** Directive used to connect an input to a MatDatepicker. */\nlet MatDatepickerInput = /*#__PURE__*/(() => {\n  class MatDatepickerInput extends MatDatepickerInputBase {\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true\n    });\n    _closedSubscription = Subscription.EMPTY;\n    _openedSubscription = Subscription.EMPTY;\n    /** The datepicker that this input is associated with. */\n    set matDatepicker(datepicker) {\n      if (datepicker) {\n        this._datepicker = datepicker;\n        this._ariaOwns.set(datepicker.opened ? datepicker.id : null);\n        this._closedSubscription = datepicker.closedStream.subscribe(() => {\n          this._onTouched();\n          this._ariaOwns.set(null);\n        });\n        this._openedSubscription = datepicker.openedStream.subscribe(() => {\n          this._ariaOwns.set(datepicker.id);\n        });\n        this._registerModel(datepicker.registerInput(this));\n      }\n    }\n    _datepicker;\n    /** The id of the panel owned by this input. */\n    _ariaOwns = signal(null);\n    /** The minimum valid date. */\n    get min() {\n      return this._min;\n    }\n    set min(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._min)) {\n        this._min = validValue;\n        this._validatorOnChange();\n      }\n    }\n    _min;\n    /** The maximum valid date. */\n    get max() {\n      return this._max;\n    }\n    set max(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._max)) {\n        this._max = validValue;\n        this._validatorOnChange();\n      }\n    }\n    _max;\n    /** Function that can be used to filter out dates within the datepicker. */\n    get dateFilter() {\n      return this._dateFilter;\n    }\n    set dateFilter(value) {\n      const wasMatchingValue = this._matchesFilter(this.value);\n      this._dateFilter = value;\n      if (this._matchesFilter(this.value) !== wasMatchingValue) {\n        this._validatorOnChange();\n      }\n    }\n    _dateFilter;\n    /** The combined form control validator for this input. */\n    _validator;\n    constructor() {\n      super();\n      this._validator = Validators.compose(super._getValidators());\n    }\n    /**\n     * Gets the element that the datepicker popup should be connected to.\n     * @return The element to connect the popup to.\n     */\n    getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n      if (this._formField) {\n        return this._formField.getLabelId();\n      }\n      return this._elementRef.nativeElement.getAttribute('aria-labelledby');\n    }\n    /** Returns the palette used by the input's form field, if any. */\n    getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the value at which the calendar should start. */\n    getStartValue() {\n      return this.value;\n    }\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this._closedSubscription.unsubscribe();\n      this._openedSubscription.unsubscribe();\n    }\n    /** Opens the associated datepicker. */\n    _openPopup() {\n      if (this._datepicker) {\n        this._datepicker.open();\n      }\n    }\n    _getValueFromModel(modelValue) {\n      return modelValue;\n    }\n    _assignValueToModel(value) {\n      if (this._model) {\n        this._model.updateSelection(value, this);\n      }\n    }\n    /** Gets the input's minimum date. */\n    _getMinDate() {\n      return this._min;\n    }\n    /** Gets the input's maximum date. */\n    _getMaxDate() {\n      return this._max;\n    }\n    /** Gets the input's date filtering function. */\n    _getDateFilter() {\n      return this._dateFilter;\n    }\n    _shouldHandleChangeEvent(event) {\n      return event.source !== this;\n    }\n    static ɵfac = function MatDatepickerInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerInput)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerInput,\n      selectors: [[\"input\", \"matDatepicker\", \"\"]],\n      hostAttrs: [1, \"mat-datepicker-input\"],\n      hostVars: 6,\n      hostBindings: function MatDatepickerInput_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function MatDatepickerInput_input_HostBindingHandler($event) {\n            return ctx._onInput($event);\n          })(\"change\", function MatDatepickerInput_change_HostBindingHandler() {\n            return ctx._onChange();\n          })(\"blur\", function MatDatepickerInput_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          })(\"keydown\", function MatDatepickerInput_keydown_HostBindingHandler($event) {\n            return ctx._onKeydown($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵdomProperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx._datepicker ? \"dialog\" : null)(\"aria-owns\", ctx._ariaOwns())(\"min\", ctx.min ? ctx._dateAdapter.toIso8601(ctx.min) : null)(\"max\", ctx.max ? ctx._dateAdapter.toIso8601(ctx.max) : null)(\"data-mat-calendar\", ctx._datepicker ? ctx._datepicker.id : null);\n        }\n      },\n      inputs: {\n        matDatepicker: \"matDatepicker\",\n        min: \"min\",\n        max: \"max\",\n        dateFilter: [0, \"matDatepickerFilter\", \"dateFilter\"]\n      },\n      exportAs: [\"matDatepickerInput\"],\n      features: [i0.ɵɵProvidersFeature([MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATEPICKER_VALIDATORS, {\n        provide: MAT_INPUT_VALUE_ACCESSOR,\n        useExisting: MatDatepickerInput\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatDatepickerInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Can be used to override the icon of a `matDatepickerToggle`. */\nlet MatDatepickerToggleIcon = /*#__PURE__*/(() => {\n  class MatDatepickerToggleIcon {\n    static ɵfac = function MatDatepickerToggleIcon_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerToggleIcon)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerToggleIcon,\n      selectors: [[\"\", \"matDatepickerToggleIcon\", \"\"]]\n    });\n  }\n  return MatDatepickerToggleIcon;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatDatepickerToggle = /*#__PURE__*/(() => {\n  class MatDatepickerToggle {\n    _intl = inject(MatDatepickerIntl);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _stateChanges = Subscription.EMPTY;\n    /** Datepicker instance that the button will toggle. */\n    datepicker;\n    /** Tabindex for the toggle. */\n    tabIndex;\n    /** Screen-reader label for the button. */\n    ariaLabel;\n    /** Whether the toggle button is disabled. */\n    get disabled() {\n      if (this._disabled === undefined && this.datepicker) {\n        return this.datepicker.disabled;\n      }\n      return !!this._disabled;\n    }\n    set disabled(value) {\n      this._disabled = value;\n    }\n    _disabled;\n    /** Whether ripples on the toggle should be disabled. */\n    disableRipple;\n    /** Custom icon set by the consumer. */\n    _customIcon;\n    /** Underlying button element. */\n    _button;\n    constructor() {\n      const defaultTabIndex = inject(new HostAttributeToken('tabindex'), {\n        optional: true\n      });\n      const parsedTabIndex = Number(defaultTabIndex);\n      this.tabIndex = parsedTabIndex || parsedTabIndex === 0 ? parsedTabIndex : null;\n    }\n    ngOnChanges(changes) {\n      if (changes['datepicker']) {\n        this._watchStateChanges();\n      }\n    }\n    ngOnDestroy() {\n      this._stateChanges.unsubscribe();\n    }\n    ngAfterContentInit() {\n      this._watchStateChanges();\n    }\n    _open(event) {\n      if (this.datepicker && !this.disabled) {\n        this.datepicker.open();\n        event.stopPropagation();\n      }\n    }\n    _watchStateChanges() {\n      const datepickerStateChanged = this.datepicker ? this.datepicker.stateChanges : of();\n      const inputStateChanged = this.datepicker && this.datepicker.datepickerInput ? this.datepicker.datepickerInput.stateChanges : of();\n      const datepickerToggled = this.datepicker ? merge(this.datepicker.openedStream, this.datepicker.closedStream) : of();\n      this._stateChanges.unsubscribe();\n      this._stateChanges = merge(this._intl.changes, datepickerStateChanged, inputStateChanged, datepickerToggled).subscribe(() => this._changeDetectorRef.markForCheck());\n    }\n    static ɵfac = function MatDatepickerToggle_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerToggle)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepickerToggle,\n      selectors: [[\"mat-datepicker-toggle\"]],\n      contentQueries: function MatDatepickerToggle_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatDatepickerToggleIcon, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._customIcon = _t.first);\n        }\n      },\n      viewQuery: function MatDatepickerToggle_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c2, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._button = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-datepicker-toggle\"],\n      hostVars: 8,\n      hostBindings: function MatDatepickerToggle_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatDatepickerToggle_click_HostBindingHandler($event) {\n            return ctx._open($event);\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"tabindex\", null)(\"data-mat-calendar\", ctx.datepicker ? ctx.datepicker.id : null);\n          i0.ɵɵclassProp(\"mat-datepicker-toggle-active\", ctx.datepicker && ctx.datepicker.opened)(\"mat-accent\", ctx.datepicker && ctx.datepicker.color === \"accent\")(\"mat-warn\", ctx.datepicker && ctx.datepicker.color === \"warn\");\n        }\n      },\n      inputs: {\n        datepicker: [0, \"for\", \"datepicker\"],\n        tabIndex: \"tabIndex\",\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        disableRipple: \"disableRipple\"\n      },\n      exportAs: [\"matDatepickerToggle\"],\n      features: [i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c4,\n      decls: 4,\n      vars: 7,\n      consts: [[\"button\", \"\"], [\"matIconButton\", \"\", \"type\", \"button\", 3, \"tabIndex\", \"disabled\", \"disableRipple\"], [\"viewBox\", \"0 0 24 24\", \"width\", \"24px\", \"height\", \"24px\", \"fill\", \"currentColor\", \"focusable\", \"false\", \"aria-hidden\", \"true\", 1, \"mat-datepicker-toggle-default-icon\"], [\"d\", \"M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z\"]],\n      template: function MatDatepickerToggle_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c3);\n          i0.ɵɵelementStart(0, \"button\", 1, 0);\n          i0.ɵɵconditionalCreate(2, MatDatepickerToggle_Conditional_2_Template, 2, 0, \":svg:svg\", 2);\n          i0.ɵɵprojection(3);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵproperty(\"tabIndex\", ctx.disabled ? -1 : ctx.tabIndex)(\"disabled\", ctx.disabled)(\"disableRipple\", ctx.disableRipple);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx.datepicker ? \"dialog\" : null)(\"aria-label\", ctx.ariaLabel || ctx._intl.openCalendarLabel)(\"aria-expanded\", ctx.datepicker ? ctx.datepicker.opened : null);\n          i0.ɵɵadvance(2);\n          i0.ɵɵconditional(!ctx._customIcon ? 2 : -1);\n        }\n      },\n      dependencies: [MatIconButton],\n      styles: [\".mat-datepicker-toggle{pointer-events:auto;color:var(--mat-datepicker-toggle-icon-color, var(--mat-sys-on-surface-variant))}.mat-datepicker-toggle-active{color:var(--mat-datepicker-toggle-active-state-icon-color, var(--mat-sys-on-surface-variant))}@media(forced-colors: active){.mat-datepicker-toggle-default-icon{color:CanvasText}}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepickerToggle;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatDateRangeInput = /*#__PURE__*/(() => {\n  class MatDateRangeInput {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _dateAdapter = inject(DateAdapter, {\n      optional: true\n    });\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true\n    });\n    _closedSubscription = Subscription.EMPTY;\n    _openedSubscription = Subscription.EMPTY;\n    _startInput;\n    _endInput;\n    /** Current value of the range input. */\n    get value() {\n      return this._model ? this._model.selection : null;\n    }\n    /** Unique ID for the group. */\n    id = inject(_IdGenerator).getId('mat-date-range-input-');\n    /** Whether the control is focused. */\n    focused = false;\n    /** Whether the control's label should float. */\n    get shouldLabelFloat() {\n      return this.focused || !this.empty;\n    }\n    /** Name of the form control. */\n    controlType = 'mat-date-range-input';\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * Set the placeholder attribute on `matStartDate` and `matEndDate`.\n     * @docs-private\n     */\n    get placeholder() {\n      const start = this._startInput?._getPlaceholder() || '';\n      const end = this._endInput?._getPlaceholder() || '';\n      return start || end ? `${start} ${this.separator} ${end}` : '';\n    }\n    /** The range picker that this input is associated with. */\n    get rangePicker() {\n      return this._rangePicker;\n    }\n    set rangePicker(rangePicker) {\n      if (rangePicker) {\n        this._model = rangePicker.registerInput(this);\n        this._rangePicker = rangePicker;\n        this._closedSubscription.unsubscribe();\n        this._openedSubscription.unsubscribe();\n        this._ariaOwns.set(this.rangePicker.opened ? rangePicker.id : null);\n        this._closedSubscription = rangePicker.closedStream.subscribe(() => {\n          this._startInput?._onTouched();\n          this._endInput?._onTouched();\n          this._ariaOwns.set(null);\n        });\n        this._openedSubscription = rangePicker.openedStream.subscribe(() => {\n          this._ariaOwns.set(rangePicker.id);\n        });\n        this._registerModel(this._model);\n      }\n    }\n    _rangePicker;\n    /** The id of the panel owned by this input. */\n    _ariaOwns = signal(null);\n    /** Whether the input is required. */\n    get required() {\n      return this._required ?? (this._isTargetRequired(this) || this._isTargetRequired(this._startInput) || this._isTargetRequired(this._endInput)) ?? false;\n    }\n    set required(value) {\n      this._required = value;\n    }\n    _required;\n    /** Function that can be used to filter out dates within the date range picker. */\n    get dateFilter() {\n      return this._dateFilter;\n    }\n    set dateFilter(value) {\n      const start = this._startInput;\n      const end = this._endInput;\n      const wasMatchingStart = start && start._matchesFilter(start.value);\n      const wasMatchingEnd = end && end._matchesFilter(start.value);\n      this._dateFilter = value;\n      if (start && start._matchesFilter(start.value) !== wasMatchingStart) {\n        start._validatorOnChange();\n      }\n      if (end && end._matchesFilter(end.value) !== wasMatchingEnd) {\n        end._validatorOnChange();\n      }\n    }\n    _dateFilter;\n    /** The minimum valid date. */\n    get min() {\n      return this._min;\n    }\n    set min(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._min)) {\n        this._min = validValue;\n        this._revalidate();\n      }\n    }\n    _min;\n    /** The maximum valid date. */\n    get max() {\n      return this._max;\n    }\n    set max(value) {\n      const validValue = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(value));\n      if (!this._dateAdapter.sameDate(validValue, this._max)) {\n        this._max = validValue;\n        this._revalidate();\n      }\n    }\n    _max;\n    /** Whether the input is disabled. */\n    get disabled() {\n      return this._startInput && this._endInput ? this._startInput.disabled && this._endInput.disabled : this._groupDisabled;\n    }\n    set disabled(value) {\n      if (value !== this._groupDisabled) {\n        this._groupDisabled = value;\n        this.stateChanges.next(undefined);\n      }\n    }\n    _groupDisabled = false;\n    /** Whether the input is in an error state. */\n    get errorState() {\n      if (this._startInput && this._endInput) {\n        return this._startInput.errorState || this._endInput.errorState;\n      }\n      return false;\n    }\n    /** Whether the datepicker input is empty. */\n    get empty() {\n      const startEmpty = this._startInput ? this._startInput.isEmpty() : false;\n      const endEmpty = this._endInput ? this._endInput.isEmpty() : false;\n      return startEmpty && endEmpty;\n    }\n    /** Value for the `aria-describedby` attribute of the inputs. */\n    _ariaDescribedBy = null;\n    /** Date selection model currently registered with the input. */\n    _model;\n    /** Separator text to be shown between the inputs. */\n    separator = '–';\n    /** Start of the comparison range that should be shown in the calendar. */\n    comparisonStart = null;\n    /** End of the comparison range that should be shown in the calendar. */\n    comparisonEnd = null;\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * TODO(crisbeto): change type to `AbstractControlDirective` after #18206 lands.\n     * @docs-private\n     */\n    ngControl;\n    /** Emits when the input's state has changed. */\n    stateChanges = new Subject();\n    /**\n     * Disable the automatic labeling to avoid issues like #27241.\n     * @docs-private\n     */\n    disableAutomaticLabeling = true;\n    constructor() {\n      if (!this._dateAdapter && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw createMissingDateImplError('DateAdapter');\n      }\n      // The datepicker module can be used both with MDC and non-MDC form fields. We have\n      // to conditionally add the MDC input class so that the range picker looks correctly.\n      if (this._formField?._elementRef.nativeElement.classList.contains('mat-mdc-form-field')) {\n        this._elementRef.nativeElement.classList.add('mat-mdc-input-element', 'mat-mdc-form-field-input-control', 'mdc-text-field__input');\n      }\n      // TODO(crisbeto): remove `as any` after #18206 lands.\n      this.ngControl = inject(ControlContainer, {\n        optional: true,\n        self: true\n      });\n    }\n    /**\n     * Implemented as part of MatFormFieldControl.\n     * @docs-private\n     */\n    get describedByIds() {\n      const element = this._elementRef.nativeElement;\n      const existingDescribedBy = element.getAttribute('aria-describedby');\n      return existingDescribedBy?.split(' ') || [];\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    setDescribedByIds(ids) {\n      this._ariaDescribedBy = ids.length ? ids.join(' ') : null;\n    }\n    /**\n     * Implemented as a part of `MatFormFieldControl`.\n     * @docs-private\n     */\n    onContainerClick() {\n      if (!this.focused && !this.disabled) {\n        if (!this._model || !this._model.selection.start) {\n          this._startInput.focus();\n        } else {\n          this._endInput.focus();\n        }\n      }\n    }\n    ngAfterContentInit() {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!this._startInput) {\n          throw Error('mat-date-range-input must contain a matStartDate input');\n        }\n        if (!this._endInput) {\n          throw Error('mat-date-range-input must contain a matEndDate input');\n        }\n      }\n      if (this._model) {\n        this._registerModel(this._model);\n      }\n      // We don't need to unsubscribe from this, because we\n      // know that the input streams will be completed on destroy.\n      merge(this._startInput.stateChanges, this._endInput.stateChanges).subscribe(() => {\n        this.stateChanges.next(undefined);\n      });\n    }\n    ngOnChanges(changes) {\n      if (dateInputsHaveChanged(changes, this._dateAdapter)) {\n        this.stateChanges.next(undefined);\n      }\n    }\n    ngOnDestroy() {\n      this._closedSubscription.unsubscribe();\n      this._openedSubscription.unsubscribe();\n      this.stateChanges.complete();\n    }\n    /** Gets the date at which the calendar should start. */\n    getStartValue() {\n      return this.value ? this.value.start : null;\n    }\n    /** Gets the input's theme palette. */\n    getThemePalette() {\n      return this._formField ? this._formField.color : undefined;\n    }\n    /** Gets the element to which the calendar overlay should be attached. */\n    getConnectedOverlayOrigin() {\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._elementRef;\n    }\n    /** Gets the ID of an element that should be used a description for the calendar overlay. */\n    getOverlayLabelId() {\n      return this._formField ? this._formField.getLabelId() : null;\n    }\n    /** Gets the value that is used to mirror the state input. */\n    _getInputMirrorValue(part) {\n      const input = part === 'start' ? this._startInput : this._endInput;\n      return input ? input.getMirrorValue() : '';\n    }\n    /** Whether the input placeholders should be hidden. */\n    _shouldHidePlaceholders() {\n      return this._startInput ? !this._startInput.isEmpty() : false;\n    }\n    /** Handles the value in one of the child inputs changing. */\n    _handleChildValueChange() {\n      this.stateChanges.next(undefined);\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Opens the date range picker associated with the input. */\n    _openDatepicker() {\n      if (this._rangePicker) {\n        this._rangePicker.open();\n      }\n    }\n    /** Whether the separate text should be hidden. */\n    _shouldHideSeparator() {\n      return (!this._formField || this._formField.getLabelId() && !this._formField._shouldLabelFloat()) && this.empty;\n    }\n    /** Gets the value for the `aria-labelledby` attribute of the inputs. */\n    _getAriaLabelledby() {\n      const formField = this._formField;\n      return formField && formField._hasFloatingLabel() ? formField._labelId : null;\n    }\n    _getStartDateAccessibleName() {\n      return this._startInput._getAccessibleName();\n    }\n    _getEndDateAccessibleName() {\n      return this._endInput._getAccessibleName();\n    }\n    /** Updates the focused state of the range input. */\n    _updateFocus(origin) {\n      this.focused = origin !== null;\n      this.stateChanges.next();\n    }\n    /** Re-runs the validators on the start/end inputs. */\n    _revalidate() {\n      if (this._startInput) {\n        this._startInput._validatorOnChange();\n      }\n      if (this._endInput) {\n        this._endInput._validatorOnChange();\n      }\n    }\n    /** Registers the current date selection model with the start/end inputs. */\n    _registerModel(model) {\n      if (this._startInput) {\n        this._startInput._registerModel(model);\n      }\n      if (this._endInput) {\n        this._endInput._registerModel(model);\n      }\n    }\n    /** Checks whether a specific range input directive is required. */\n    _isTargetRequired(target) {\n      return target?.ngControl?.control?.hasValidator(Validators.required);\n    }\n    static ɵfac = function MatDateRangeInput_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDateRangeInput)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDateRangeInput,\n      selectors: [[\"mat-date-range-input\"]],\n      hostAttrs: [\"role\", \"group\", 1, \"mat-date-range-input\"],\n      hostVars: 8,\n      hostBindings: function MatDateRangeInput_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵattribute(\"id\", ctx.id)(\"aria-labelledby\", ctx._getAriaLabelledby())(\"aria-describedby\", ctx._ariaDescribedBy)(\"data-mat-calendar\", ctx.rangePicker ? ctx.rangePicker.id : null);\n          i0.ɵɵclassProp(\"mat-date-range-input-hide-placeholders\", ctx._shouldHidePlaceholders())(\"mat-date-range-input-required\", ctx.required);\n        }\n      },\n      inputs: {\n        rangePicker: \"rangePicker\",\n        required: [2, \"required\", \"required\", booleanAttribute],\n        dateFilter: \"dateFilter\",\n        min: \"min\",\n        max: \"max\",\n        disabled: [2, \"disabled\", \"disabled\", booleanAttribute],\n        separator: \"separator\",\n        comparisonStart: \"comparisonStart\",\n        comparisonEnd: \"comparisonEnd\"\n      },\n      exportAs: [\"matDateRangeInput\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MatFormFieldControl,\n        useExisting: MatDateRangeInput\n      }]), i0.ɵɵNgOnChangesFeature],\n      ngContentSelectors: _c6,\n      decls: 11,\n      vars: 5,\n      consts: [[\"cdkMonitorSubtreeFocus\", \"\", 1, \"mat-date-range-input-container\", 3, \"cdkFocusChange\"], [1, \"mat-date-range-input-wrapper\"], [\"aria-hidden\", \"true\", 1, \"mat-date-range-input-mirror\"], [1, \"mat-date-range-input-separator\"], [1, \"mat-date-range-input-wrapper\", \"mat-date-range-input-end-wrapper\"]],\n      template: function MatDateRangeInput_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c5);\n          i0.ɵɵelementStart(0, \"div\", 0);\n          i0.ɵɵlistener(\"cdkFocusChange\", function MatDateRangeInput_Template_div_cdkFocusChange_0_listener($event) {\n            return ctx._updateFocus($event);\n          });\n          i0.ɵɵelementStart(1, \"div\", 1);\n          i0.ɵɵprojection(2);\n          i0.ɵɵelementStart(3, \"span\", 2);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"span\", 3);\n          i0.ɵɵtext(6);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(7, \"div\", 4);\n          i0.ɵɵprojection(8, 1);\n          i0.ɵɵelementStart(9, \"span\", 2);\n          i0.ɵɵtext(10);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx._getInputMirrorValue(\"start\"));\n          i0.ɵɵadvance();\n          i0.ɵɵclassProp(\"mat-date-range-input-separator-hidden\", ctx._shouldHideSeparator());\n          i0.ɵɵadvance();\n          i0.ɵɵtextInterpolate(ctx.separator);\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate(ctx._getInputMirrorValue(\"end\"));\n        }\n      },\n      dependencies: [CdkMonitorFocus],\n      styles: [\".mat-date-range-input{display:block;width:100%}.mat-date-range-input-container{display:flex;align-items:center}.mat-date-range-input-separator{transition:opacity 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1);margin:0 4px;color:var(--mat-datepicker-range-input-separator-color, var(--mat-sys-on-surface))}.mat-form-field-disabled .mat-date-range-input-separator{color:var(--mat-datepicker-range-input-disabled-state-separator-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}._mat-animation-noopable .mat-date-range-input-separator{transition:none}.mat-date-range-input-separator-hidden{-webkit-user-select:none;user-select:none;opacity:0;transition:none}.mat-date-range-input-wrapper{position:relative;overflow:hidden;max-width:calc(50% - 4px)}.mat-date-range-input-end-wrapper{flex-grow:1}.mat-date-range-input-inner{position:absolute;top:0;left:0;font:inherit;background:rgba(0,0,0,0);color:currentColor;border:none;outline:none;padding:0;margin:0;vertical-align:bottom;text-align:inherit;-webkit-appearance:none;width:100%;height:100%}.mat-date-range-input-inner:-moz-ui-invalid{box-shadow:none}.mat-date-range-input-inner::placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-moz-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner::-webkit-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner:-ms-input-placeholder{transition:color 400ms 133.3333333333ms cubic-bezier(0.25, 0.8, 0.25, 1)}.mat-date-range-input-inner[disabled]{color:var(--mat-datepicker-range-input-disabled-state-text-color, color-mix(in srgb, var(--mat-sys-on-surface) 38%, transparent))}.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-moz-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-moz-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner::-webkit-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner::-webkit-input-placeholder{opacity:0}}.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{-webkit-user-select:none;user-select:none;color:rgba(0,0,0,0) !important;-webkit-text-fill-color:rgba(0,0,0,0);transition:none}@media(forced-colors: active){.mat-form-field-hide-placeholder .mat-date-range-input-inner:-ms-input-placeholder,.mat-date-range-input-hide-placeholders .mat-date-range-input-inner:-ms-input-placeholder{opacity:0}}._mat-animation-noopable .mat-date-range-input-inner::placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-moz-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner::-webkit-input-placeholder{transition:none}._mat-animation-noopable .mat-date-range-input-inner:-ms-input-placeholder{transition:none}.mat-date-range-input-mirror{-webkit-user-select:none;user-select:none;visibility:hidden;white-space:nowrap;display:inline-block;min-width:2px}.mat-mdc-form-field-type-mat-date-range-input .mat-mdc-form-field-infix{width:200px}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDateRangeInput;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// This file contains the `_computeAriaAccessibleName` function, which computes what the *expected*\n// ARIA accessible name would be for a given element. Implements a subset of ARIA specification\n// [Accessible Name and Description Computation 1.2](https://www.w3.org/TR/accname-1.2/).\n//\n// Specification accname-1.2 can be summarized by returning the result of the first method\n// available.\n//\n//  1. `aria-labelledby` attribute\n//     ```\n//       <!-- example using aria-labelledby-->\n//       <label id='label-id'>Start Date</label>\n//       <input aria-labelledby='label-id'/>\n//     ```\n//  2. `aria-label` attribute (e.g. `<input aria-label=\"Departure\"/>`)\n//  3. Label with `for`/`id`\n//     ```\n//       <!-- example using for/id -->\n//       <label for=\"current-node\">Label</label>\n//       <input id=\"current-node\"/>\n//     ```\n//  4. `placeholder` attribute (e.g. `<input placeholder=\"06/03/1990\"/>`)\n//  5. `title` attribute (e.g. `<input title=\"Check-In\"/>`)\n//  6. text content\n//     ```\n//       <!-- example using text content -->\n//       <label for=\"current-node\"><span>Departure</span> Date</label>\n//       <input id=\"current-node\"/>\n//     ```\n/**\n * Computes the *expected* ARIA accessible name for argument element based on [accname-1.2\n * specification](https://www.w3.org/TR/accname-1.2/). Implements a subset of accname-1.2,\n * and should only be used for the Datepicker's specific use case.\n *\n * Intended use:\n * This is not a general use implementation. Only implements the parts of accname-1.2 that are\n * required for the Datepicker's specific use case. This function is not intended for any other\n * use.\n *\n * Limitations:\n *  - Only covers the needs of `matStartDate` and `matEndDate`. Does not support other use cases.\n *  - See NOTES's in implementation for specific details on what parts of the accname-1.2\n *  specification are not implemented.\n *\n *  @param element {HTMLInputElement} native &lt;input/&gt; element of `matStartDate` or\n *  `matEndDate` component. Corresponds to the 'Root Element' from accname-1.2\n *\n *  @return expected ARIA accessible name of argument &lt;input/&gt;\n */\nfunction _computeAriaAccessibleName(element) {\n  return _computeAriaAccessibleNameInternal(element, true);\n}\n/**\n * Determine if argument node is an Element based on `nodeType` property. This function is safe to\n * use with server-side rendering.\n */\nfunction ssrSafeIsElement(node) {\n  return node.nodeType === Node.ELEMENT_NODE;\n}\n/**\n * Determine if argument node is an HTMLInputElement based on `nodeName` property. This funciton is\n * safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLInputElement(node) {\n  return node.nodeName === 'INPUT';\n}\n/**\n * Determine if argument node is an HTMLTextAreaElement based on `nodeName` property. This\n * funciton is safe to use with server-side rendering.\n */\nfunction ssrSafeIsHTMLTextAreaElement(node) {\n  return node.nodeName === 'TEXTAREA';\n}\n/**\n * Calculate the expected ARIA accessible name for given DOM Node. Given DOM Node may be either the\n * \"Root node\" passed to `_computeAriaAccessibleName` or \"Current node\" as result of recursion.\n *\n * @return the accessible name of argument DOM Node\n *\n * @param currentNode node to determine accessible name of\n * @param isDirectlyReferenced true if `currentNode` is the root node to calculate ARIA accessible\n * name of. False if it is a result of recursion.\n */\nfunction _computeAriaAccessibleNameInternal(currentNode, isDirectlyReferenced) {\n  // NOTE: this differs from accname-1.2 specification.\n  //  - Does not implement Step 1. of accname-1.2: '''If `currentNode`'s role prohibits naming,\n  //    return the empty string (\"\")'''.\n  //  - Does not implement Step 2.A. of accname-1.2: '''if current node is hidden and not directly\n  //    referenced by aria-labelledby... return the empty string.'''\n  // acc-name-1.2 Step 2.B.: aria-labelledby\n  if (ssrSafeIsElement(currentNode) && isDirectlyReferenced) {\n    const labelledbyIds = currentNode.getAttribute?.('aria-labelledby')?.split(/\\s+/g) || [];\n    const validIdRefs = labelledbyIds.reduce((validIds, id) => {\n      const elem = document.getElementById(id);\n      if (elem) {\n        validIds.push(elem);\n      }\n      return validIds;\n    }, []);\n    if (validIdRefs.length) {\n      return validIdRefs.map(idRef => {\n        return _computeAriaAccessibleNameInternal(idRef, false);\n      }).join(' ');\n    }\n  }\n  // acc-name-1.2 Step 2.C.: aria-label\n  if (ssrSafeIsElement(currentNode)) {\n    const ariaLabel = currentNode.getAttribute('aria-label')?.trim();\n    if (ariaLabel) {\n      return ariaLabel;\n    }\n  }\n  // acc-name-1.2 Step 2.D. attribute or element that defines a text alternative\n  //\n  // NOTE: this differs from accname-1.2 specification.\n  // Only implements Step 2.D. for `<label>`,`<input/>`, and `<textarea/>` element. Does not\n  // implement other elements that have an attribute or element that defines a text alternative.\n  if (ssrSafeIsHTMLInputElement(currentNode) || ssrSafeIsHTMLTextAreaElement(currentNode)) {\n    // use label with a `for` attribute referencing the current node\n    if (currentNode.labels?.length) {\n      return Array.from(currentNode.labels).map(x => _computeAriaAccessibleNameInternal(x, false)).join(' ');\n    }\n    // use placeholder if available\n    const placeholder = currentNode.getAttribute('placeholder')?.trim();\n    if (placeholder) {\n      return placeholder;\n    }\n    // use title if available\n    const title = currentNode.getAttribute('title')?.trim();\n    if (title) {\n      return title;\n    }\n  }\n  // NOTE: this differs from accname-1.2 specification.\n  //  - does not implement acc-name-1.2 Step 2.E.: '''if the current node is a control embedded\n  //     within the label... then include the embedded control as part of the text alternative in\n  //     the following manner...'''. Step 2E applies to embedded controls such as textbox, listbox,\n  //     range, etc.\n  //  - does not implement acc-name-1.2 step 2.F.: check that '''role allows name from content''',\n  //    which applies to `currentNode` and its children.\n  //  - does not implement acc-name-1.2 Step 2.F.ii.: '''Check for CSS generated textual content'''\n  //    (e.g. :before and :after).\n  //  - does not implement acc-name-1.2 Step 2.I.: '''if the current node has a Tooltip attribute,\n  //    return its value'''\n  // Return text content with whitespace collapsed into a single space character. Accomplish\n  // acc-name-1.2 steps 2F, 2G, and 2H.\n  return (currentNode.textContent || '').replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Base class for the individual inputs that can be projected inside a `mat-date-range-input`.\n */\nlet MatDateRangeInputPartBase = /*#__PURE__*/(() => {\n  class MatDateRangeInputPartBase extends MatDatepickerInputBase {\n    _rangeInput = inject(MatDateRangeInput);\n    _elementRef = inject(ElementRef);\n    _defaultErrorStateMatcher = inject(ErrorStateMatcher);\n    _injector = inject(Injector);\n    _rawValue = signal('');\n    _parentForm = inject(NgForm, {\n      optional: true\n    });\n    _parentFormGroup = inject(FormGroupDirective, {\n      optional: true\n    });\n    /**\n     * Form control bound to this input part.\n     * @docs-private\n     */\n    ngControl;\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _errorStateTracker;\n    /** Object used to control when error messages are shown. */\n    get errorStateMatcher() {\n      return this._errorStateTracker.matcher;\n    }\n    set errorStateMatcher(value) {\n      this._errorStateTracker.matcher = value;\n    }\n    /** Whether the input is in an error state. */\n    get errorState() {\n      return this._errorStateTracker.errorState;\n    }\n    set errorState(value) {\n      this._errorStateTracker.errorState = value;\n    }\n    constructor() {\n      super();\n      this._errorStateTracker = new _ErrorStateTracker(this._defaultErrorStateMatcher, null, this._parentFormGroup, this._parentForm, this.stateChanges);\n    }\n    ngOnInit() {\n      // We need the date input to provide itself as a `ControlValueAccessor` and a `Validator`, while\n      // injecting its `NgControl` so that the error state is handled correctly. This introduces a\n      // circular dependency, because both `ControlValueAccessor` and `Validator` depend on the input\n      // itself. Usually we can work around it for the CVA, but there's no API to do it for the\n      // validator. We work around it here by injecting the `NgControl` in `ngOnInit`, after\n      // everything has been resolved.\n      const ngControl = this._injector.get(NgControl, null, {\n        optional: true,\n        self: true\n      });\n      if (ngControl) {\n        this.ngControl = ngControl;\n        this._errorStateTracker.ngControl = ngControl;\n      }\n    }\n    ngAfterContentInit() {\n      this._register();\n    }\n    ngDoCheck() {\n      if (this.ngControl) {\n        // We need to re-evaluate this on every change detection cycle, because there are some\n        // error triggers that we can't subscribe to (e.g. parent form submissions). This means\n        // that whatever logic is in here has to be super lean or we risk destroying the performance.\n        this.updateErrorState();\n      }\n      this._rawValue.set(this._elementRef.nativeElement.value);\n    }\n    /** Gets whether the input is empty. */\n    isEmpty() {\n      return this._rawValue().length === 0;\n    }\n    /** Gets the placeholder of the input. */\n    _getPlaceholder() {\n      return this._elementRef.nativeElement.placeholder;\n    }\n    /** Focuses the input. */\n    focus() {\n      this._elementRef.nativeElement.focus();\n    }\n    /** Gets the value that should be used when mirroring the input's size. */\n    getMirrorValue() {\n      const value = this._rawValue();\n      return value.length > 0 ? value : this._getPlaceholder();\n    }\n    /** Refreshes the error state of the input. */\n    updateErrorState() {\n      this._errorStateTracker.updateErrorState();\n    }\n    /** Handles `input` events on the input element. */\n    _onInput(event) {\n      super._onInput(event);\n      this._rangeInput._handleChildValueChange();\n    }\n    /** Opens the datepicker associated with the input. */\n    _openPopup() {\n      this._rangeInput._openDatepicker();\n    }\n    /** Gets the minimum date from the range input. */\n    _getMinDate() {\n      return this._rangeInput.min;\n    }\n    /** Gets the maximum date from the range input. */\n    _getMaxDate() {\n      return this._rangeInput.max;\n    }\n    /** Gets the date filter function from the range input. */\n    _getDateFilter() {\n      return this._rangeInput.dateFilter;\n    }\n    _parentDisabled() {\n      return this._rangeInput._groupDisabled;\n    }\n    _shouldHandleChangeEvent({\n      source\n    }) {\n      return source !== this._rangeInput._startInput && source !== this._rangeInput._endInput;\n    }\n    _assignValueProgrammatically(value) {\n      super._assignValueProgrammatically(value);\n      const opposite = this === this._rangeInput._startInput ? this._rangeInput._endInput : this._rangeInput._startInput;\n      opposite?._validatorOnChange();\n      this._rawValue.set(this._elementRef.nativeElement.value);\n    }\n    _formatValue(value) {\n      super._formatValue(value);\n      // Any time the input value is reformatted we need to tell the parent.\n      this._rangeInput._handleChildValueChange();\n    }\n    /** return the ARIA accessible name of the input element */\n    _getAccessibleName() {\n      return _computeAriaAccessibleName(this._elementRef.nativeElement);\n    }\n    static ɵfac = function MatDateRangeInputPartBase_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDateRangeInputPartBase)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDateRangeInputPartBase,\n      inputs: {\n        errorStateMatcher: \"errorStateMatcher\"\n      },\n      features: [i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatDateRangeInputPartBase;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Input for entering the start date in a `mat-date-range-input`. */\nlet MatStartDate = /*#__PURE__*/(() => {\n  class MatStartDate extends MatDateRangeInputPartBase {\n    /** Validator that checks that the start date isn't after the end date. */\n    _startValidator = control => {\n      const start = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const end = this._model ? this._model.selection.end : null;\n      return !start || !end || this._dateAdapter.compareDate(start, end) <= 0 ? null : {\n        'matStartDateInvalid': {\n          'end': end,\n          'actual': start\n        }\n      };\n    };\n    _validator = Validators.compose([...super._getValidators(), this._startValidator]);\n    _register() {\n      this._rangeInput._startInput = this;\n    }\n    _getValueFromModel(modelValue) {\n      return modelValue.start;\n    }\n    _shouldHandleChangeEvent(change) {\n      if (!super._shouldHandleChangeEvent(change)) {\n        return false;\n      } else {\n        return !change.oldValue?.start ? !!change.selection.start : !change.selection.start || !!this._dateAdapter.compareDate(change.oldValue.start, change.selection.start);\n      }\n    }\n    _assignValueToModel(value) {\n      if (this._model) {\n        const range = new DateRange(value, this._model.selection.end);\n        this._model.updateSelection(range, this);\n        this._rangeInput._handleChildValueChange();\n      }\n    }\n    _onKeydown(event) {\n      const endInput = this._rangeInput._endInput;\n      const element = this._elementRef.nativeElement;\n      const isLtr = this._dir?.value !== 'rtl';\n      // If the user hits RIGHT (LTR) when at the end of the input (and no\n      // selection), move the cursor to the start of the end input.\n      if ((event.keyCode === RIGHT_ARROW && isLtr || event.keyCode === LEFT_ARROW && !isLtr) && element.selectionStart === element.value.length && element.selectionEnd === element.value.length) {\n        event.preventDefault();\n        endInput._elementRef.nativeElement.setSelectionRange(0, 0);\n        endInput.focus();\n      } else {\n        super._onKeydown(event);\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatStartDate_BaseFactory;\n      return function MatStartDate_Factory(__ngFactoryType__) {\n        return (ɵMatStartDate_BaseFactory || (ɵMatStartDate_BaseFactory = i0.ɵɵgetInheritedFactory(MatStartDate)))(__ngFactoryType__ || MatStartDate);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatStartDate,\n      selectors: [[\"input\", \"matStartDate\", \"\"]],\n      hostAttrs: [\"type\", \"text\", 1, \"mat-start-date\", \"mat-date-range-input-inner\"],\n      hostVars: 5,\n      hostBindings: function MatStartDate_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function MatStartDate_input_HostBindingHandler($event) {\n            return ctx._onInput($event);\n          })(\"change\", function MatStartDate_change_HostBindingHandler() {\n            return ctx._onChange();\n          })(\"keydown\", function MatStartDate_keydown_HostBindingHandler($event) {\n            return ctx._onKeydown($event);\n          })(\"blur\", function MatStartDate_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵdomProperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", ctx._rangeInput._ariaOwns() || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n        }\n      },\n      outputs: {\n        dateChange: \"dateChange\",\n        dateInput: \"dateInput\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatStartDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatStartDate,\n        multi: true\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatStartDate;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Input for entering the end date in a `mat-date-range-input`. */\nlet MatEndDate = /*#__PURE__*/(() => {\n  class MatEndDate extends MatDateRangeInputPartBase {\n    /** Validator that checks that the end date isn't before the start date. */\n    _endValidator = control => {\n      const end = this._dateAdapter.getValidDateOrNull(this._dateAdapter.deserialize(control.value));\n      const start = this._model ? this._model.selection.start : null;\n      return !end || !start || this._dateAdapter.compareDate(end, start) >= 0 ? null : {\n        'matEndDateInvalid': {\n          'start': start,\n          'actual': end\n        }\n      };\n    };\n    _register() {\n      this._rangeInput._endInput = this;\n    }\n    _validator = Validators.compose([...super._getValidators(), this._endValidator]);\n    _getValueFromModel(modelValue) {\n      return modelValue.end;\n    }\n    _shouldHandleChangeEvent(change) {\n      if (!super._shouldHandleChangeEvent(change)) {\n        return false;\n      } else {\n        return !change.oldValue?.end ? !!change.selection.end : !change.selection.end || !!this._dateAdapter.compareDate(change.oldValue.end, change.selection.end);\n      }\n    }\n    _assignValueToModel(value) {\n      if (this._model) {\n        const range = new DateRange(this._model.selection.start, value);\n        this._model.updateSelection(range, this);\n      }\n    }\n    _moveCaretToEndOfStartInput() {\n      const startInput = this._rangeInput._startInput._elementRef.nativeElement;\n      const value = startInput.value;\n      if (value.length > 0) {\n        startInput.setSelectionRange(value.length, value.length);\n      }\n      startInput.focus();\n    }\n    _onKeydown(event) {\n      const element = this._elementRef.nativeElement;\n      const isLtr = this._dir?.value !== 'rtl';\n      // If the user is pressing backspace on an empty end input, move focus back to the start.\n      if (event.keyCode === BACKSPACE && !element.value) {\n        this._moveCaretToEndOfStartInput();\n      }\n      // If the user hits LEFT (LTR) when at the start of the input (and no\n      // selection), move the cursor to the end of the start input.\n      else if ((event.keyCode === LEFT_ARROW && isLtr || event.keyCode === RIGHT_ARROW && !isLtr) && element.selectionStart === 0 && element.selectionEnd === 0) {\n        event.preventDefault();\n        this._moveCaretToEndOfStartInput();\n      } else {\n        super._onKeydown(event);\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatEndDate_BaseFactory;\n      return function MatEndDate_Factory(__ngFactoryType__) {\n        return (ɵMatEndDate_BaseFactory || (ɵMatEndDate_BaseFactory = i0.ɵɵgetInheritedFactory(MatEndDate)))(__ngFactoryType__ || MatEndDate);\n      };\n    })();\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatEndDate,\n      selectors: [[\"input\", \"matEndDate\", \"\"]],\n      hostAttrs: [\"type\", \"text\", 1, \"mat-end-date\", \"mat-date-range-input-inner\"],\n      hostVars: 5,\n      hostBindings: function MatEndDate_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"input\", function MatEndDate_input_HostBindingHandler($event) {\n            return ctx._onInput($event);\n          })(\"change\", function MatEndDate_change_HostBindingHandler() {\n            return ctx._onChange();\n          })(\"keydown\", function MatEndDate_keydown_HostBindingHandler($event) {\n            return ctx._onKeydown($event);\n          })(\"blur\", function MatEndDate_blur_HostBindingHandler() {\n            return ctx._onBlur();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵdomProperty(\"disabled\", ctx.disabled);\n          i0.ɵɵattribute(\"aria-haspopup\", ctx._rangeInput.rangePicker ? \"dialog\" : null)(\"aria-owns\", ctx._rangeInput._ariaOwns() || null)(\"min\", ctx._getMinDate() ? ctx._dateAdapter.toIso8601(ctx._getMinDate()) : null)(\"max\", ctx._getMaxDate() ? ctx._dateAdapter.toIso8601(ctx._getMaxDate()) : null);\n        }\n      },\n      outputs: {\n        dateChange: \"dateChange\",\n        dateInput: \"dateInput\"\n      },\n      features: [i0.ɵɵProvidersFeature([{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: MatEndDate,\n        multi: true\n      }, {\n        provide: NG_VALIDATORS,\n        useExisting: MatEndDate,\n        multi: true\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n  return MatEndDate;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n// TODO(mmalerba): We use a component instead of a directive here so the user can use implicit\n// template reference variables (e.g. #d vs #d=\"matDateRangePicker\"). We can change this to a\n// directive if angular adds support for `exportAs: '$implicit'` on directives.\n/** Component responsible for managing the date range picker popup/dialog. */\nlet MatDateRangePicker = /*#__PURE__*/(() => {\n  class MatDateRangePicker extends MatDatepickerBase {\n    _forwardContentValues(instance) {\n      super._forwardContentValues(instance);\n      const input = this.datepickerInput;\n      if (input) {\n        instance.comparisonStart = input.comparisonStart;\n        instance.comparisonEnd = input.comparisonEnd;\n        instance.startDateAccessibleName = input._getStartDateAccessibleName();\n        instance.endDateAccessibleName = input._getEndDateAccessibleName();\n      }\n    }\n    static ɵfac = /* @__PURE__ */(() => {\n      let ɵMatDateRangePicker_BaseFactory;\n      return function MatDateRangePicker_Factory(__ngFactoryType__) {\n        return (ɵMatDateRangePicker_BaseFactory || (ɵMatDateRangePicker_BaseFactory = i0.ɵɵgetInheritedFactory(MatDateRangePicker)))(__ngFactoryType__ || MatDateRangePicker);\n      };\n    })();\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDateRangePicker,\n      selectors: [[\"mat-date-range-picker\"]],\n      exportAs: [\"matDateRangePicker\"],\n      features: [i0.ɵɵProvidersFeature([MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_CALENDAR_RANGE_STRATEGY_PROVIDER, {\n        provide: MatDatepickerBase,\n        useExisting: MatDateRangePicker\n      }]), i0.ɵɵInheritDefinitionFeature],\n      decls: 0,\n      vars: 0,\n      template: function MatDateRangePicker_Template(rf, ctx) {},\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDateRangePicker;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/** Button that will close the datepicker and assign the current selection to the data model. */\nlet MatDatepickerApply = /*#__PURE__*/(() => {\n  class MatDatepickerApply {\n    _datepicker = inject(MatDatepickerBase);\n    constructor() {}\n    _applySelection() {\n      this._datepicker._applyPendingSelection();\n      this._datepicker.close();\n    }\n    static ɵfac = function MatDatepickerApply_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerApply)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerApply,\n      selectors: [[\"\", \"matDatepickerApply\", \"\"], [\"\", \"matDateRangePickerApply\", \"\"]],\n      hostBindings: function MatDatepickerApply_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatDatepickerApply_click_HostBindingHandler() {\n            return ctx._applySelection();\n          });\n        }\n      }\n    });\n  }\n  return MatDatepickerApply;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Button that will close the datepicker and discard the current selection. */\nlet MatDatepickerCancel = /*#__PURE__*/(() => {\n  class MatDatepickerCancel {\n    _datepicker = inject(MatDatepickerBase);\n    constructor() {}\n    static ɵfac = function MatDatepickerCancel_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerCancel)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatDatepickerCancel,\n      selectors: [[\"\", \"matDatepickerCancel\", \"\"], [\"\", \"matDateRangePickerCancel\", \"\"]],\n      hostBindings: function MatDatepickerCancel_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"click\", function MatDatepickerCancel_click_HostBindingHandler() {\n            return ctx._datepicker.close();\n          });\n        }\n      }\n    });\n  }\n  return MatDatepickerCancel;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Container that can be used to project a row of action buttons\n * to the bottom of a datepicker or date range picker.\n */\nlet MatDatepickerActions = /*#__PURE__*/(() => {\n  class MatDatepickerActions {\n    _datepicker = inject(MatDatepickerBase);\n    _viewContainerRef = inject(ViewContainerRef);\n    _template;\n    _portal;\n    constructor() {}\n    ngAfterViewInit() {\n      this._portal = new TemplatePortal(this._template, this._viewContainerRef);\n      this._datepicker.registerActions(this._portal);\n    }\n    ngOnDestroy() {\n      this._datepicker.removeActions(this._portal);\n      // Needs to be null checked since we initialize it in `ngAfterViewInit`.\n      if (this._portal && this._portal.isAttached) {\n        this._portal?.detach();\n      }\n    }\n    static ɵfac = function MatDatepickerActions_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerActions)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatDatepickerActions,\n      selectors: [[\"mat-datepicker-actions\"], [\"mat-date-range-picker-actions\"]],\n      viewQuery: function MatDatepickerActions_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TemplateRef, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._template = _t.first);\n        }\n      },\n      ngContentSelectors: _c1,\n      decls: 1,\n      vars: 0,\n      consts: [[1, \"mat-datepicker-actions\"]],\n      template: function MatDatepickerActions_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, MatDatepickerActions_ng_template_0_Template, 2, 0, \"ng-template\");\n        }\n      },\n      styles: [\".mat-datepicker-actions{display:flex;justify-content:flex-end;align-items:center;padding:0 8px 8px 8px}.mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-datepicker-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatDatepickerActions;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatDatepickerModule = /*#__PURE__*/(() => {\n  class MatDatepickerModule {\n    static ɵfac = function MatDatepickerModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatDatepickerModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatDatepickerModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MatDatepickerIntl, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER],\n      imports: [MatButtonModule, OverlayModule, A11yModule, PortalModule, MatCommonModule, MatDatepickerContent, MatDatepickerToggle, MatCalendarHeader, CdkScrollableModule]\n    });\n  }\n  return MatDatepickerModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Animations used by the Material datepicker.\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst matDatepickerAnimations = {\n  // Represents:\n  // trigger('transformPanel', [\n  //   transition(\n  //     'void => enter-dropdown',\n  //     animate(\n  //       '120ms cubic-bezier(0, 0, 0.2, 1)',\n  //       keyframes([\n  //         style({opacity: 0, transform: 'scale(1, 0.8)'}),\n  //         style({opacity: 1, transform: 'scale(1, 1)'}),\n  //       ]),\n  //     ),\n  //   ),\n  //   transition(\n  //     'void => enter-dialog',\n  //     animate(\n  //       '150ms cubic-bezier(0, 0, 0.2, 1)',\n  //       keyframes([\n  //         style({opacity: 0, transform: 'scale(0.7)'}),\n  //         style({transform: 'none', opacity: 1}),\n  //       ]),\n  //     ),\n  //   ),\n  //   transition('* => void', animate('100ms linear', style({opacity: 0}))),\n  // ])\n  /** Transforms the height of the datepicker's calendar. */\n  transformPanel: {\n    type: 7,\n    name: 'transformPanel',\n    definitions: [{\n      type: 1,\n      expr: 'void => enter-dropdown',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          steps: [{\n            type: 6,\n            styles: {\n              opacity: 0,\n              transform: 'scale(1, 0.8)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              opacity: 1,\n              transform: 'scale(1, 1)'\n            },\n            offset: null\n          }]\n        },\n        timings: '120ms cubic-bezier(0, 0, 0.2, 1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: 'void => enter-dialog',\n      animation: {\n        type: 4,\n        styles: {\n          type: 5,\n          steps: [{\n            type: 6,\n            styles: {\n              opacity: 0,\n              transform: 'scale(0.7)'\n            },\n            offset: null\n          }, {\n            type: 6,\n            styles: {\n              transform: 'none',\n              opacity: 1\n            },\n            offset: null\n          }]\n        },\n        timings: '150ms cubic-bezier(0, 0, 0.2, 1)'\n      },\n      options: null\n    }, {\n      type: 1,\n      expr: '* => void',\n      animation: {\n        type: 4,\n        styles: {\n          type: 6,\n          styles: {\n            opacity: 0\n          },\n          offset: null\n        },\n        timings: '100ms linear'\n      },\n      options: null\n    }],\n    options: {}\n  },\n  // Represents:\n  // trigger('fadeInCalendar', [\n  //   state('void', style({opacity: 0})),\n  //   state('enter', style({opacity: 1})),\n  //   // TODO(crisbeto): this animation should be removed since it isn't quite on spec, but we\n  //   // need to keep it until #12440 gets in, otherwise the exit animation will look glitchy.\n  //   transition('void => *', animate('120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)')),\n  // ])\n  /** Fades in the content of the calendar. */\n  fadeInCalendar: {\n    type: 7,\n    name: 'fadeInCalendar',\n    definitions: [{\n      type: 0,\n      name: 'void',\n      styles: {\n        type: 6,\n        styles: {\n          opacity: 0\n        },\n        offset: null\n      }\n    }, {\n      type: 0,\n      name: 'enter',\n      styles: {\n        type: 6,\n        styles: {\n          opacity: 1\n        },\n        offset: null\n      }\n    }, {\n      type: 1,\n      expr: 'void => *',\n      animation: {\n        type: 4,\n        styles: null,\n        timings: '120ms 100ms cubic-bezier(0.55, 0, 0.55, 0.2)'\n      },\n      options: null\n    }],\n    options: {}\n  }\n};\nexport { DateRange, DefaultMatCalendarRangeStrategy, MAT_DATEPICKER_SCROLL_STRATEGY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY, MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_DATEPICKER_VALIDATORS, MAT_DATEPICKER_VALUE_ACCESSOR, MAT_DATE_RANGE_SELECTION_STRATEGY, MAT_RANGE_DATE_SELECTION_MODEL_FACTORY, MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER, MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY, MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER, MatCalendar, MatCalendarBody, MatCalendarCell, MatCalendarHeader, MatDateRangeInput, MatDateRangePicker, MatDateSelectionModel, MatDatepicker, MatDatepickerActions, MatDatepickerApply, MatDatepickerCancel, MatDatepickerContent, MatDatepickerInput, MatDatepickerInputEvent, MatDatepickerIntl, MatDatepickerModule, MatDatepickerToggle, MatDatepickerToggleIcon, MatEndDate, MatMonthView, MatMultiYearView, MatRangeDateSelectionModel, MatSingleDateSelectionModel, MatStartDate, MatYearView, matDatepickerAnimations, yearsPerPage, yearsPerRow };\n","export { _ as _MatInternalFormField } from './internal-form-field-D5iFxU6d.mjs';\nimport * as i0 from '@angular/core';\nimport { Version, inject, Injectable, NgModule } from '@angular/core';\nexport { A as AnimationCurves, a as AnimationDurations, M as MATERIAL_ANIMATIONS, _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nexport { a as MATERIAL_SANITY_CHECKS, M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nexport { _ as _ErrorStateTracker } from './error-state-Dtb1IHM-.mjs';\nimport { D as DateAdapter, M as MAT_DATE_LOCALE, a as MAT_DATE_FORMATS } from './date-formats-K6TQue-Y.mjs';\nexport { b as MAT_DATE_LOCALE_FACTORY } from './date-formats-K6TQue-Y.mjs';\nexport { E as ErrorStateMatcher, S as ShowOnDirtyErrorStateMatcher } from './error-options-DCNQlTOA.mjs';\nexport { _ as _StructuralStylesLoader } from './structural-styles-CObeNzjn.mjs';\nexport { M as MatLine, a as MatLineModule, s as setLines } from './line-Bz5f9Cyx.mjs';\nexport { d as MAT_OPTGROUP, c as MAT_OPTION_PARENT_COMPONENT, a as MatOptgroup, M as MatOption, e as MatOptionSelectionChange, _ as _countGroupLabelsBeforeOption, b as _getOptionScrollPosition } from './option-BzhYL_xC.mjs';\nexport { M as MatOptionModule } from './index-DwiL-HGk.mjs';\nexport { M as MatRippleLoader } from './ripple-loader-BnMiRtmT.mjs';\nexport { a as MAT_RIPPLE_GLOBAL_OPTIONS, M as MatRipple, c as RippleRef, R as RippleRenderer, b as RippleState, d as defaultRippleAnimationConfig } from './ripple-BYgV4oZC.mjs';\nexport { M as MatRippleModule } from './index-BFRo2fUq.mjs';\nexport { M as MatPseudoCheckbox } from './pseudo-checkbox-DDmgx3P4.mjs';\nexport { M as MatPseudoCheckboxModule } from './pseudo-checkbox-module-4F8Up4PL.mjs';\nimport '@angular/cdk/layout';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\nimport 'rxjs';\nimport 'rxjs/operators';\nimport '@angular/cdk/keycodes';\nimport '@angular/cdk/private';\nimport '@angular/cdk/platform';\nimport '@angular/cdk/coercion';\n\n/** Current version of Angular Material. */\nconst VERSION = /*#__PURE__*/new Version('20.0.1');\n\n/**\n * Matches strings that have the form of a valid RFC 3339 string\n * (https://tools.ietf.org/html/rfc3339). Note that the string may not actually be a valid date\n * because the regex will match strings with an out of bounds month, date, etc.\n */\nconst ISO_8601_REGEX = /^\\d{4}-\\d{2}-\\d{2}(?:T\\d{2}:\\d{2}:\\d{2}(?:\\.\\d+)?(?:Z|(?:(?:\\+|-)\\d{2}:\\d{2}))?)?$/;\n/**\n * Matches a time string. Supported formats:\n * - {{hours}}:{{minutes}}\n * - {{hours}}:{{minutes}}:{{seconds}}\n * - {{hours}}:{{minutes}} AM/PM\n * - {{hours}}:{{minutes}}:{{seconds}} AM/PM\n * - {{hours}}.{{minutes}}\n * - {{hours}}.{{minutes}}.{{seconds}}\n * - {{hours}}.{{minutes}} AM/PM\n * - {{hours}}.{{minutes}}.{{seconds}} AM/PM\n */\nconst TIME_REGEX = /^(\\d?\\d)[:.](\\d?\\d)(?:[:.](\\d?\\d))?\\s*(AM|PM)?$/i;\n/** Creates an array and fills it with values. */\nfunction range(length, valueFunction) {\n  const valuesArray = Array(length);\n  for (let i = 0; i < length; i++) {\n    valuesArray[i] = valueFunction(i);\n  }\n  return valuesArray;\n}\n/** Adapts the native JS Date for use with cdk-based components that work with dates. */\nlet NativeDateAdapter = /*#__PURE__*/(() => {\n  class NativeDateAdapter extends DateAdapter {\n    /**\n     * @deprecated No longer being used. To be removed.\n     * @breaking-change 14.0.0\n     */\n    useUtcForDisplay = false;\n    /** The injected locale. */\n    _matDateLocale = inject(MAT_DATE_LOCALE, {\n      optional: true\n    });\n    constructor() {\n      super();\n      const matDateLocale = inject(MAT_DATE_LOCALE, {\n        optional: true\n      });\n      if (matDateLocale !== undefined) {\n        this._matDateLocale = matDateLocale;\n      }\n      super.setLocale(this._matDateLocale);\n    }\n    getYear(date) {\n      return date.getFullYear();\n    }\n    getMonth(date) {\n      return date.getMonth();\n    }\n    getDate(date) {\n      return date.getDate();\n    }\n    getDayOfWeek(date) {\n      return date.getDay();\n    }\n    getMonthNames(style) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        month: style,\n        timeZone: 'utc'\n      });\n      return range(12, i => this._format(dtf, new Date(2017, i, 1)));\n    }\n    getDateNames() {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        day: 'numeric',\n        timeZone: 'utc'\n      });\n      return range(31, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getDayOfWeekNames(style) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        weekday: style,\n        timeZone: 'utc'\n      });\n      return range(7, i => this._format(dtf, new Date(2017, 0, i + 1)));\n    }\n    getYearName(date) {\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        year: 'numeric',\n        timeZone: 'utc'\n      });\n      return this._format(dtf, date);\n    }\n    getFirstDayOfWeek() {\n      // At the time of writing `Intl.Locale` isn't available\n      // in the internal types so we need to cast to `any`.\n      if (typeof Intl !== 'undefined' && Intl.Locale) {\n        const locale = new Intl.Locale(this.locale);\n        // Some browsers implement a `getWeekInfo` method while others have a `weekInfo` getter.\n        // Note that this isn't supported in all browsers so we need to null check it.\n        const firstDay = (locale.getWeekInfo?.() || locale.weekInfo)?.firstDay ?? 0;\n        // `weekInfo.firstDay` is a number between 1 and 7 where, starting from Monday,\n        // whereas our representation is 0 to 6 where 0 is Sunday so we need to normalize it.\n        return firstDay === 7 ? 0 : firstDay;\n      }\n      // Default to Sunday if the browser doesn't provide the week information.\n      return 0;\n    }\n    getNumDaysInMonth(date) {\n      return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));\n    }\n    clone(date) {\n      return new Date(date.getTime());\n    }\n    createDate(year, month, date) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        // Check for invalid month and date (except upper bound on date which we have to check after\n        // creating the Date).\n        if (month < 0 || month > 11) {\n          throw Error(`Invalid month index \"${month}\". Month index has to be between 0 and 11.`);\n        }\n        if (date < 1) {\n          throw Error(`Invalid date \"${date}\". Date has to be greater than 0.`);\n        }\n      }\n      let result = this._createDateWithOverflow(year, month, date);\n      // Check that the date wasn't above the upper bound for the month, causing the month to overflow\n      if (result.getMonth() != month && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw Error(`Invalid date \"${date}\" for month with index \"${month}\".`);\n      }\n      return result;\n    }\n    today() {\n      return new Date();\n    }\n    parse(value, parseFormat) {\n      // We have no way using the native JS Date to set the parse format or locale, so we ignore these\n      // parameters.\n      if (typeof value == 'number') {\n        return new Date(value);\n      }\n      return value ? new Date(Date.parse(value)) : null;\n    }\n    format(date, displayFormat) {\n      if (!this.isValid(date)) {\n        throw Error('NativeDateAdapter: Cannot format invalid date.');\n      }\n      const dtf = new Intl.DateTimeFormat(this.locale, {\n        ...displayFormat,\n        timeZone: 'utc'\n      });\n      return this._format(dtf, date);\n    }\n    addCalendarYears(date, years) {\n      return this.addCalendarMonths(date, years * 12);\n    }\n    addCalendarMonths(date, months) {\n      let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));\n      // It's possible to wind up in the wrong month if the original month has more days than the new\n      // month. In this case we want to go to the last day of the desired month.\n      // Note: the additional + 12 % 12 ensures we end up with a positive number, since JS % doesn't\n      // guarantee this.\n      if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {\n        newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);\n      }\n      return newDate;\n    }\n    addCalendarDays(date, days) {\n      return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);\n    }\n    toIso8601(date) {\n      return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join('-');\n    }\n    /**\n     * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings\n     * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an\n     * invalid date for all other values.\n     */\n    deserialize(value) {\n      if (typeof value === 'string') {\n        if (!value) {\n          return null;\n        }\n        // The `Date` constructor accepts formats other than ISO 8601, so we need to make sure the\n        // string is the right format first.\n        if (ISO_8601_REGEX.test(value)) {\n          let date = new Date(value);\n          if (this.isValid(date)) {\n            return date;\n          }\n        }\n      }\n      return super.deserialize(value);\n    }\n    isDateInstance(obj) {\n      return obj instanceof Date;\n    }\n    isValid(date) {\n      return !isNaN(date.getTime());\n    }\n    invalid() {\n      return new Date(NaN);\n    }\n    setTime(target, hours, minutes, seconds) {\n      if (typeof ngDevMode === 'undefined' || ngDevMode) {\n        if (!inRange(hours, 0, 23)) {\n          throw Error(`Invalid hours \"${hours}\". Hours value must be between 0 and 23.`);\n        }\n        if (!inRange(minutes, 0, 59)) {\n          throw Error(`Invalid minutes \"${minutes}\". Minutes value must be between 0 and 59.`);\n        }\n        if (!inRange(seconds, 0, 59)) {\n          throw Error(`Invalid seconds \"${seconds}\". Seconds value must be between 0 and 59.`);\n        }\n      }\n      const clone = this.clone(target);\n      clone.setHours(hours, minutes, seconds, 0);\n      return clone;\n    }\n    getHours(date) {\n      return date.getHours();\n    }\n    getMinutes(date) {\n      return date.getMinutes();\n    }\n    getSeconds(date) {\n      return date.getSeconds();\n    }\n    parseTime(userValue, parseFormat) {\n      if (typeof userValue !== 'string') {\n        return userValue instanceof Date ? new Date(userValue.getTime()) : null;\n      }\n      const value = userValue.trim();\n      if (value.length === 0) {\n        return null;\n      }\n      // Attempt to parse the value directly.\n      let result = this._parseTimeString(value);\n      // Some locales add extra characters around the time, but are otherwise parseable\n      // (e.g. `00:05 ч.` in bg-BG). Try replacing all non-number and non-colon characters.\n      if (result === null) {\n        const withoutExtras = value.replace(/[^0-9:(AM|PM)]/gi, '').trim();\n        if (withoutExtras.length > 0) {\n          result = this._parseTimeString(withoutExtras);\n        }\n      }\n      return result || this.invalid();\n    }\n    addSeconds(date, amount) {\n      return new Date(date.getTime() + amount * 1000);\n    }\n    /** Creates a date but allows the month and date to overflow. */\n    _createDateWithOverflow(year, month, date) {\n      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n      // To work around this we use `setFullYear` and `setHours` instead.\n      const d = new Date();\n      d.setFullYear(year, month, date);\n      d.setHours(0, 0, 0, 0);\n      return d;\n    }\n    /**\n     * Pads a number to make it two digits.\n     * @param n The number to pad.\n     * @returns The padded number.\n     */\n    _2digit(n) {\n      return ('00' + n).slice(-2);\n    }\n    /**\n     * When converting Date object to string, javascript built-in functions may return wrong\n     * results because it applies its internal DST rules. The DST rules around the world change\n     * very frequently, and the current valid rule is not always valid in previous years though.\n     * We work around this problem building a new Date object which has its internal UTC\n     * representation with the local date and time.\n     * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have\n     *    timeZone set to 'utc' to work fine.\n     * @param date Date from which we want to get the string representation according to dtf\n     * @returns A Date object with its UTC representation based on the passed in date info\n     */\n    _format(dtf, date) {\n      // Passing the year to the constructor causes year numbers <100 to be converted to 19xx.\n      // To work around this we use `setUTCFullYear` and `setUTCHours` instead.\n      const d = new Date();\n      d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());\n      d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n      return dtf.format(d);\n    }\n    /**\n     * Attempts to parse a time string into a date object. Returns null if it cannot be parsed.\n     * @param value Time string to parse.\n     */\n    _parseTimeString(value) {\n      // Note: we can technically rely on the browser for the time parsing by generating\n      // an ISO string and appending the string to the end of it. We don't do it, because\n      // browsers aren't consistent in what they support. Some examples:\n      // - Safari doesn't support AM/PM.\n      // - Firefox produces a valid date object if the time string has overflows (e.g. 12:75) while\n      //   other browsers produce an invalid date.\n      // - Safari doesn't allow padded numbers.\n      const parsed = value.toUpperCase().match(TIME_REGEX);\n      if (parsed) {\n        let hours = parseInt(parsed[1]);\n        const minutes = parseInt(parsed[2]);\n        let seconds = parsed[3] == null ? undefined : parseInt(parsed[3]);\n        const amPm = parsed[4];\n        if (hours === 12) {\n          hours = amPm === 'AM' ? 0 : hours;\n        } else if (amPm === 'PM') {\n          hours += 12;\n        }\n        if (inRange(hours, 0, 23) && inRange(minutes, 0, 59) && (seconds == null || inRange(seconds, 0, 59))) {\n          return this.setTime(this.today(), hours, minutes, seconds || 0);\n        }\n      }\n      return null;\n    }\n    static ɵfac = function NativeDateAdapter_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NativeDateAdapter)();\n    };\n    static ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NativeDateAdapter,\n      factory: NativeDateAdapter.ɵfac\n    });\n  }\n  return NativeDateAdapter;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/** Checks whether a number is within a certain range. */\nfunction inRange(value, min, max) {\n  return !isNaN(value) && value >= min && value <= max;\n}\nconst MAT_NATIVE_DATE_FORMATS = {\n  parse: {\n    dateInput: null,\n    timeInput: null\n  },\n  display: {\n    dateInput: {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    },\n    timeInput: {\n      hour: 'numeric',\n      minute: 'numeric'\n    },\n    monthYearLabel: {\n      year: 'numeric',\n      month: 'short'\n    },\n    dateA11yLabel: {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    },\n    monthYearA11yLabel: {\n      year: 'numeric',\n      month: 'long'\n    },\n    timeOptionLabel: {\n      hour: 'numeric',\n      minute: 'numeric'\n    }\n  }\n};\nlet NativeDateModule = /*#__PURE__*/(() => {\n  class NativeDateModule {\n    static ɵfac = function NativeDateModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || NativeDateModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NativeDateModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [{\n        provide: DateAdapter,\n        useClass: NativeDateAdapter\n      }]\n    });\n  }\n  return NativeDateModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatNativeDateModule = /*#__PURE__*/(() => {\n  class MatNativeDateModule {\n    static ɵfac = function MatNativeDateModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatNativeDateModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatNativeDateModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [provideNativeDateAdapter()]\n    });\n  }\n  return MatNativeDateModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nfunction provideNativeDateAdapter(formats = MAT_NATIVE_DATE_FORMATS) {\n  return [{\n    provide: DateAdapter,\n    useClass: NativeDateAdapter\n  }, {\n    provide: MAT_DATE_FORMATS,\n    useValue: formats\n  }];\n}\nexport { DateAdapter, MAT_DATE_FORMATS, MAT_DATE_LOCALE, MAT_NATIVE_DATE_FORMATS, MatNativeDateModule, NativeDateAdapter, NativeDateModule, VERSION, provideNativeDateAdapter };\n","import * as i0 from '@angular/core';\nimport { Directive, inject, ElementRef, DOCUMENT, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, ContentChildren, NgModule } from '@angular/core';\nimport { Platform } from '@angular/cdk/platform';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport '@angular/cdk/a11y';\nimport '@angular/cdk/bidi';\nconst _c0 = [\"*\", [[\"mat-toolbar-row\"]]];\nconst _c1 = [\"*\", \"mat-toolbar-row\"];\nlet MatToolbarRow = /*#__PURE__*/(() => {\n  class MatToolbarRow {\n    static ɵfac = function MatToolbarRow_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatToolbarRow)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatToolbarRow,\n      selectors: [[\"mat-toolbar-row\"]],\n      hostAttrs: [1, \"mat-toolbar-row\"],\n      exportAs: [\"matToolbarRow\"]\n    });\n  }\n  return MatToolbarRow;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatToolbar = /*#__PURE__*/(() => {\n  class MatToolbar {\n    _elementRef = inject(ElementRef);\n    _platform = inject(Platform);\n    _document = inject(DOCUMENT);\n    // TODO: should be typed as `ThemePalette` but internal apps pass in arbitrary strings.\n    /**\n     * Theme color of the toolbar. This API is supported in M2 themes only, it has\n     * no effect in M3 themes. For color customization in M3, see https://material.angular.dev/components/toolbar/styling.\n     *\n     * For information on applying color variants in M3, see\n     * https://material.angular.dev/guide/material-2-theming#optional-add-backwards-compatibility-styles-for-color-variants\n     */\n    color;\n    /** Reference to all toolbar row elements that have been projected. */\n    _toolbarRows;\n    constructor() {}\n    ngAfterViewInit() {\n      if (this._platform.isBrowser) {\n        this._checkToolbarMixedModes();\n        this._toolbarRows.changes.subscribe(() => this._checkToolbarMixedModes());\n      }\n    }\n    /**\n     * Throws an exception when developers are attempting to combine the different toolbar row modes.\n     */\n    _checkToolbarMixedModes() {\n      if (this._toolbarRows.length && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        // Check if there are any other DOM nodes that can display content but aren't inside of\n        // a <mat-toolbar-row> element.\n        const isCombinedUsage = Array.from(this._elementRef.nativeElement.childNodes).filter(node => !(node.classList && node.classList.contains('mat-toolbar-row'))).filter(node => node.nodeType !== (this._document ? this._document.COMMENT_NODE : 8)).some(node => !!(node.textContent && node.textContent.trim()));\n        if (isCombinedUsage) {\n          throwToolbarMixedModesError();\n        }\n      }\n    }\n    static ɵfac = function MatToolbar_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatToolbar)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatToolbar,\n      selectors: [[\"mat-toolbar\"]],\n      contentQueries: function MatToolbar_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatToolbarRow, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._toolbarRows = _t);\n        }\n      },\n      hostAttrs: [1, \"mat-toolbar\"],\n      hostVars: 6,\n      hostBindings: function MatToolbar_HostBindings(rf, ctx) {\n        if (rf & 2) {\n          i0.ɵɵclassMap(ctx.color ? \"mat-\" + ctx.color : \"\");\n          i0.ɵɵclassProp(\"mat-toolbar-multiple-rows\", ctx._toolbarRows.length > 0)(\"mat-toolbar-single-row\", ctx._toolbarRows.length === 0);\n        }\n      },\n      inputs: {\n        color: \"color\"\n      },\n      exportAs: [\"matToolbar\"],\n      ngContentSelectors: _c1,\n      decls: 2,\n      vars: 0,\n      template: function MatToolbar_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef(_c0);\n          i0.ɵɵprojection(0);\n          i0.ɵɵprojection(1, 1);\n        }\n      },\n      styles: [\".mat-toolbar{background:var(--mat-toolbar-container-background-color, var(--mat-sys-surface));color:var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font-family:var(--mat-toolbar-title-text-font, var(--mat-sys-title-large-font));font-size:var(--mat-toolbar-title-text-size, var(--mat-sys-title-large-size));line-height:var(--mat-toolbar-title-text-line-height, var(--mat-sys-title-large-line-height));font-weight:var(--mat-toolbar-title-text-weight, var(--mat-sys-title-large-weight));letter-spacing:var(--mat-toolbar-title-text-tracking, var(--mat-sys-title-large-tracking));margin:0}@media(forced-colors: active){.mat-toolbar{outline:solid 1px}}.mat-toolbar .mat-form-field-underline,.mat-toolbar .mat-form-field-ripple,.mat-toolbar .mat-focused .mat-form-field-ripple{background-color:currentColor}.mat-toolbar .mat-form-field-label,.mat-toolbar .mat-focused .mat-form-field-label,.mat-toolbar .mat-select-value,.mat-toolbar .mat-select-arrow,.mat-toolbar .mat-form-field.mat-focused .mat-select-arrow{color:inherit}.mat-toolbar .mat-input-element{caret-color:currentColor}.mat-toolbar .mat-mdc-button-base.mat-mdc-button-base.mat-unthemed{--mat-button-text-label-text-color: var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface));--mat-button-outlined-label-text-color: var(--mat-toolbar-container-text-color, var(--mat-sys-on-surface))}.mat-toolbar-row,.mat-toolbar-single-row{display:flex;box-sizing:border-box;padding:0 16px;width:100%;flex-direction:row;align-items:center;white-space:nowrap;height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-row,.mat-toolbar-single-row{height:var(--mat-toolbar-mobile-height, 56px)}}.mat-toolbar-multiple-rows{display:flex;box-sizing:border-box;flex-direction:column;width:100%;min-height:var(--mat-toolbar-standard-height, 64px)}@media(max-width: 599px){.mat-toolbar-multiple-rows{min-height:var(--mat-toolbar-mobile-height, 56px)}}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatToolbar;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\n * Throws an exception when attempting to combine the different toolbar row modes.\n * @docs-private\n */\nfunction throwToolbarMixedModesError() {\n  throw Error('MatToolbar: Attempting to combine different toolbar modes. ' + 'Either specify multiple `<mat-toolbar-row>` elements explicitly or just place content ' + 'inside of a `<mat-toolbar>` for a single row.');\n}\nlet MatToolbarModule = /*#__PURE__*/(() => {\n  class MatToolbarModule {\n    static ɵfac = function MatToolbarModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatToolbarModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatToolbarModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [MatCommonModule, MatCommonModule]\n    });\n  }\n  return MatToolbarModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { MatToolbar, MatToolbarModule, MatToolbarRow, throwToolbarMixedModesError };\n","import { c as MAT_OPTION_PARENT_COMPONENT, M as MatOption, d as MAT_OPTGROUP, e as MatOptionSelectionChange, _ as _countGroupLabelsBeforeOption, b as _getOptionScrollPosition } from './option-BzhYL_xC.mjs';\nconst _c0 = [\"panel\"];\nconst _c1 = [\"*\"];\nfunction MatAutocomplete_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 1, 0);\n    i0.ɵɵprojection(2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const formFieldId_r1 = ctx.id;\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1._classList);\n    i0.ɵɵclassProp(\"mat-mdc-autocomplete-visible\", ctx_r1.showPanel)(\"mat-mdc-autocomplete-hidden\", !ctx_r1.showPanel)(\"mat-autocomplete-panel-animations-enabled\", !ctx_r1._animationsDisabled)(\"mat-primary\", ctx_r1._color === \"primary\")(\"mat-accent\", ctx_r1._color === \"accent\")(\"mat-warn\", ctx_r1._color === \"warn\");\n    i0.ɵɵproperty(\"id\", ctx_r1.id);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.ariaLabel || null)(\"aria-labelledby\", ctx_r1._getPanelAriaLabelledby(formFieldId_r1));\n  }\n}\nexport { a as MatOptgroup } from './option-BzhYL_xC.mjs';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, inject, ChangeDetectorRef, ElementRef, EventEmitter, booleanAttribute, TemplateRef, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, ContentChildren, Input, Output, Directive, forwardRef, Injector, EnvironmentInjector, ViewContainerRef, NgZone, Renderer2, afterNextRender, NgModule } from '@angular/core';\nimport { ViewportRuler, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { createRepositionScrollStrategy, createOverlayRef, OverlayConfig, createFlexibleConnectedPositionStrategy, OverlayModule } from '@angular/cdk/overlay';\nimport { _IdGenerator, ActiveDescendantKeyManager, removeAriaReferencedId, addAriaReferencedId } from '@angular/cdk/a11y';\nimport { Platform, _getFocusedElementPierceShadowDom, _getEventTarget } from '@angular/cdk/platform';\nimport { Subscription, Subject, merge, of, defer, Observable } from 'rxjs';\nimport { _ as _animationsDisabled } from './animation-DfMFjxHu.mjs';\nimport { Directionality } from '@angular/cdk/bidi';\nimport { hasModifierKey, ESCAPE, ENTER, TAB, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { coerceArray } from '@angular/cdk/coercion';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { filter, map, startWith, switchMap, tap, delay, take } from 'rxjs/operators';\nimport { h as MAT_FORM_FIELD } from './form-field-C9DZXojn.mjs';\nimport { M as MatOptionModule } from './index-DwiL-HGk.mjs';\nimport { M as MatCommonModule } from './common-module-cKSwHniA.mjs';\nimport './ripple-BYgV4oZC.mjs';\nimport '@angular/cdk/private';\nimport './pseudo-checkbox-DDmgx3P4.mjs';\nimport './structural-styles-CObeNzjn.mjs';\nimport '@angular/common';\nimport '@angular/cdk/observers/private';\nimport './index-BFRo2fUq.mjs';\nimport './pseudo-checkbox-module-4F8Up4PL.mjs';\n\n/** Event object that is emitted when an autocomplete option is selected. */\nclass MatAutocompleteSelectedEvent {\n  source;\n  option;\n  constructor(/** Reference to the autocomplete panel that emitted the event. */\n  source, /** Option that was selected. */\n  option) {\n    this.source = source;\n    this.option = option;\n  }\n}\n/** Injection token to be used to override the default options for `mat-autocomplete`. */\nconst MAT_AUTOCOMPLETE_DEFAULT_OPTIONS = /*#__PURE__*/new InjectionToken('mat-autocomplete-default-options', {\n  providedIn: 'root',\n  factory: MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY() {\n  return {\n    autoActiveFirstOption: false,\n    autoSelectActiveOption: false,\n    hideSingleSelectionIndicator: false,\n    requireSelection: false,\n    hasBackdrop: false\n  };\n}\n/** Autocomplete component. */\nlet MatAutocomplete = /*#__PURE__*/(() => {\n  class MatAutocomplete {\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _elementRef = inject(ElementRef);\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS);\n    _animationsDisabled = _animationsDisabled();\n    _activeOptionChanges = Subscription.EMPTY;\n    /** Manages active item in option list based on key events. */\n    _keyManager;\n    /** Whether the autocomplete panel should be visible, depending on option length. */\n    showPanel = false;\n    /** Whether the autocomplete panel is open. */\n    get isOpen() {\n      return this._isOpen && this.showPanel;\n    }\n    _isOpen = false;\n    /** Latest trigger that opened the autocomplete. */\n    _latestOpeningTrigger;\n    /** @docs-private Sets the theme color of the panel. */\n    _setColor(value) {\n      this._color = value;\n      this._changeDetectorRef.markForCheck();\n    }\n    /** @docs-private theme color of the panel */\n    _color;\n    // The @ViewChild query for TemplateRef here needs to be static because some code paths\n    // lead to the overlay being created before change detection has finished for this component.\n    // Notably, another component may trigger `focus` on the autocomplete-trigger.\n    /** @docs-private */\n    template;\n    /** Element for the panel containing the autocomplete options. */\n    panel;\n    /** Reference to all options within the autocomplete. */\n    options;\n    /** Reference to all option groups within the autocomplete. */\n    optionGroups;\n    /** Aria label of the autocomplete. */\n    ariaLabel;\n    /** Input that can be used to specify the `aria-labelledby` attribute. */\n    ariaLabelledby;\n    /** Function that maps an option's control value to its display value in the trigger. */\n    displayWith = null;\n    /**\n     * Whether the first option should be highlighted when the autocomplete panel is opened.\n     * Can be configured globally through the `MAT_AUTOCOMPLETE_DEFAULT_OPTIONS` token.\n     */\n    autoActiveFirstOption;\n    /** Whether the active option should be selected as the user is navigating. */\n    autoSelectActiveOption;\n    /**\n     * Whether the user is required to make a selection when they're interacting with the\n     * autocomplete. If the user moves away from the autocomplete without selecting an option from\n     * the list, the value will be reset. If the user opens the panel and closes it without\n     * interacting or selecting a value, the initial value will be kept.\n     */\n    requireSelection;\n    /**\n     * Specify the width of the autocomplete panel.  Can be any CSS sizing value, otherwise it will\n     * match the width of its host.\n     */\n    panelWidth;\n    /** Whether ripples are disabled within the autocomplete panel. */\n    disableRipple;\n    /** Event that is emitted whenever an option from the list is selected. */\n    optionSelected = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is opened. */\n    opened = new EventEmitter();\n    /** Event that is emitted when the autocomplete panel is closed. */\n    closed = new EventEmitter();\n    /** Emits whenever an option is activated. */\n    optionActivated = new EventEmitter();\n    /**\n     * Takes classes set on the host mat-autocomplete element and applies them to the panel\n     * inside the overlay container to allow for easy styling.\n     */\n    set classList(value) {\n      this._classList = value;\n      this._elementRef.nativeElement.className = '';\n    }\n    _classList;\n    /** Whether checkmark indicator for single-selection options is hidden. */\n    get hideSingleSelectionIndicator() {\n      return this._hideSingleSelectionIndicator;\n    }\n    set hideSingleSelectionIndicator(value) {\n      this._hideSingleSelectionIndicator = value;\n      this._syncParentProperties();\n    }\n    _hideSingleSelectionIndicator;\n    /** Syncs the parent state with the individual options. */\n    _syncParentProperties() {\n      if (this.options) {\n        for (const option of this.options) {\n          option._changeDetectorRef.markForCheck();\n        }\n      }\n    }\n    /** Unique ID to be used by autocomplete trigger's \"aria-owns\" property. */\n    id = inject(_IdGenerator).getId('mat-autocomplete-');\n    /**\n     * Tells any descendant `mat-optgroup` to use the inert a11y pattern.\n     * @docs-private\n     */\n    inertGroups;\n    constructor() {\n      const platform = inject(Platform);\n      // TODO(crisbeto): the problem that the `inertGroups` option resolves is only present on\n      // Safari using VoiceOver. We should occasionally check back to see whether the bug\n      // wasn't resolved in VoiceOver, and if it has, we can remove this and the `inertGroups`\n      // option altogether.\n      this.inertGroups = platform?.SAFARI || false;\n      this.autoActiveFirstOption = !!this._defaults.autoActiveFirstOption;\n      this.autoSelectActiveOption = !!this._defaults.autoSelectActiveOption;\n      this.requireSelection = !!this._defaults.requireSelection;\n      this._hideSingleSelectionIndicator = this._defaults.hideSingleSelectionIndicator ?? false;\n    }\n    ngAfterContentInit() {\n      this._keyManager = new ActiveDescendantKeyManager(this.options).withWrap().skipPredicate(this._skipPredicate);\n      this._activeOptionChanges = this._keyManager.change.subscribe(index => {\n        if (this.isOpen) {\n          this.optionActivated.emit({\n            source: this,\n            option: this.options.toArray()[index] || null\n          });\n        }\n      });\n      // Set the initial visibility state.\n      this._setVisibility();\n    }\n    ngOnDestroy() {\n      this._keyManager?.destroy();\n      this._activeOptionChanges.unsubscribe();\n    }\n    /**\n     * Sets the panel scrollTop. This allows us to manually scroll to display options\n     * above or below the fold, as they are not actually being focused when active.\n     */\n    _setScrollTop(scrollTop) {\n      if (this.panel) {\n        this.panel.nativeElement.scrollTop = scrollTop;\n      }\n    }\n    /** Returns the panel's scrollTop. */\n    _getScrollTop() {\n      return this.panel ? this.panel.nativeElement.scrollTop : 0;\n    }\n    /** Panel should hide itself when the option list is empty. */\n    _setVisibility() {\n      this.showPanel = !!this.options?.length;\n      this._changeDetectorRef.markForCheck();\n    }\n    /** Emits the `select` event. */\n    _emitSelectEvent(option) {\n      const event = new MatAutocompleteSelectedEvent(this, option);\n      this.optionSelected.emit(event);\n    }\n    /** Gets the aria-labelledby for the autocomplete panel. */\n    _getPanelAriaLabelledby(labelId) {\n      if (this.ariaLabel) {\n        return null;\n      }\n      const labelExpression = labelId ? labelId + ' ' : '';\n      return this.ariaLabelledby ? labelExpression + this.ariaLabelledby : labelId;\n    }\n    // `skipPredicate` determines if key manager should avoid putting a given option in the tab\n    // order. Allow disabled list items to receive focus via keyboard to align with WAI ARIA\n    // recommendation.\n    //\n    // Normally WAI ARIA's instructions are to exclude disabled items from the tab order, but it\n    // makes a few exceptions for compound widgets.\n    //\n    // From [Developing a Keyboard Interface](\n    // https://www.w3.org/WAI/ARIA/apg/practices/keyboard-interface/):\n    //   \"For the following composite widget elements, keep them focusable when disabled: Options in a\n    //   Listbox...\"\n    //\n    // The user can focus disabled options using the keyboard, but the user cannot click disabled\n    // options.\n    _skipPredicate() {\n      return false;\n    }\n    static ɵfac = function MatAutocomplete_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocomplete)();\n    };\n    static ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatAutocomplete,\n      selectors: [[\"mat-autocomplete\"]],\n      contentQueries: function MatAutocomplete_ContentQueries(rf, ctx, dirIndex) {\n        if (rf & 1) {\n          i0.ɵɵcontentQuery(dirIndex, MatOption, 5);\n          i0.ɵɵcontentQuery(dirIndex, MAT_OPTGROUP, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.options = _t);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.optionGroups = _t);\n        }\n      },\n      viewQuery: function MatAutocomplete_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(TemplateRef, 7);\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.template = _t.first);\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.panel = _t.first);\n        }\n      },\n      hostAttrs: [1, \"mat-mdc-autocomplete\"],\n      inputs: {\n        ariaLabel: [0, \"aria-label\", \"ariaLabel\"],\n        ariaLabelledby: [0, \"aria-labelledby\", \"ariaLabelledby\"],\n        displayWith: \"displayWith\",\n        autoActiveFirstOption: [2, \"autoActiveFirstOption\", \"autoActiveFirstOption\", booleanAttribute],\n        autoSelectActiveOption: [2, \"autoSelectActiveOption\", \"autoSelectActiveOption\", booleanAttribute],\n        requireSelection: [2, \"requireSelection\", \"requireSelection\", booleanAttribute],\n        panelWidth: \"panelWidth\",\n        disableRipple: [2, \"disableRipple\", \"disableRipple\", booleanAttribute],\n        classList: [0, \"class\", \"classList\"],\n        hideSingleSelectionIndicator: [2, \"hideSingleSelectionIndicator\", \"hideSingleSelectionIndicator\", booleanAttribute]\n      },\n      outputs: {\n        optionSelected: \"optionSelected\",\n        opened: \"opened\",\n        closed: \"closed\",\n        optionActivated: \"optionActivated\"\n      },\n      exportAs: [\"matAutocomplete\"],\n      features: [i0.ɵɵProvidersFeature([{\n        provide: MAT_OPTION_PARENT_COMPONENT,\n        useExisting: MatAutocomplete\n      }])],\n      ngContentSelectors: _c1,\n      decls: 1,\n      vars: 0,\n      consts: [[\"panel\", \"\"], [\"role\", \"listbox\", 1, \"mat-mdc-autocomplete-panel\", \"mdc-menu-surface\", \"mdc-menu-surface--open\", 3, \"id\"]],\n      template: function MatAutocomplete_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵprojectionDef();\n          i0.ɵɵtemplate(0, MatAutocomplete_ng_template_0_Template, 3, 17, \"ng-template\");\n        }\n      },\n      styles: [\"div.mat-mdc-autocomplete-panel{width:100%;max-height:256px;visibility:hidden;transform-origin:center top;overflow:auto;padding:8px 0;box-sizing:border-box;position:relative;border-radius:var(--mat-autocomplete-container-shape, var(--mat-sys-corner-extra-small));box-shadow:var(--mat-autocomplete-container-elevation-shadow, 0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12));background-color:var(--mat-autocomplete-background-color, var(--mat-sys-surface-container))}@media(forced-colors: active){div.mat-mdc-autocomplete-panel{outline:solid 1px}}.cdk-overlay-pane:not(.mat-mdc-autocomplete-panel-above) div.mat-mdc-autocomplete-panel{border-top-left-radius:0;border-top-right-radius:0}.mat-mdc-autocomplete-panel-above div.mat-mdc-autocomplete-panel{border-bottom-left-radius:0;border-bottom-right-radius:0;transform-origin:center bottom}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-visible{visibility:visible}div.mat-mdc-autocomplete-panel.mat-mdc-autocomplete-hidden{visibility:hidden;pointer-events:none}@keyframes _mat-autocomplete-enter{from{opacity:0;transform:scaleY(0.8)}to{opacity:1;transform:none}}.mat-autocomplete-panel-animations-enabled{animation:_mat-autocomplete-enter 120ms cubic-bezier(0, 0, 0.2, 1)}mat-autocomplete{display:none}\\n\"],\n      encapsulation: 2,\n      changeDetection: 0\n    });\n  }\n  return MatAutocomplete;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Directive applied to an element to make it usable\n * as a connection point for an autocomplete panel.\n */\nlet MatAutocompleteOrigin = /*#__PURE__*/(() => {\n  class MatAutocompleteOrigin {\n    elementRef = inject(ElementRef);\n    constructor() {}\n    static ɵfac = function MatAutocompleteOrigin_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocompleteOrigin)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatAutocompleteOrigin,\n      selectors: [[\"\", \"matAutocompleteOrigin\", \"\"]],\n      exportAs: [\"matAutocompleteOrigin\"]\n    });\n  }\n  return MatAutocompleteOrigin;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Provider that allows the autocomplete to register as a ControlValueAccessor.\n * @docs-private\n */\nconst MAT_AUTOCOMPLETE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatAutocompleteTrigger),\n  multi: true\n};\n/**\n * Creates an error to be thrown when attempting to use an autocomplete trigger without a panel.\n * @docs-private\n */\nfunction getMatAutocompleteMissingPanelError() {\n  return Error('Attempting to open an undefined instance of `mat-autocomplete`. ' + 'Make sure that the id passed to the `matAutocomplete` is correct and that ' + \"you're attempting to open it after the ngAfterContentInit hook.\");\n}\n/** Injection token that determines the scroll handling while the autocomplete panel is open. */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY = /*#__PURE__*/new InjectionToken('mat-autocomplete-scroll-strategy', {\n  providedIn: 'root',\n  factory: () => {\n    const injector = inject(Injector);\n    return () => createRepositionScrollStrategy(injector);\n  }\n});\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nfunction MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY(_overlay) {\n  const injector = inject(Injector);\n  return () => createRepositionScrollStrategy(injector);\n}\n/**\n * @docs-private\n * @deprecated No longer used, will be removed.\n * @breaking-change 21.0.0\n */\nconst MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER = {\n  provide: MAT_AUTOCOMPLETE_SCROLL_STRATEGY,\n  deps: [],\n  useFactory: MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY\n};\n/** Base class with all of the `MatAutocompleteTrigger` functionality. */\nlet MatAutocompleteTrigger = /*#__PURE__*/(() => {\n  class MatAutocompleteTrigger {\n    _environmentInjector = inject(EnvironmentInjector);\n    _element = inject(ElementRef);\n    _injector = inject(Injector);\n    _viewContainerRef = inject(ViewContainerRef);\n    _zone = inject(NgZone);\n    _changeDetectorRef = inject(ChangeDetectorRef);\n    _dir = inject(Directionality, {\n      optional: true\n    });\n    _formField = inject(MAT_FORM_FIELD, {\n      optional: true,\n      host: true\n    });\n    _viewportRuler = inject(ViewportRuler);\n    _scrollStrategy = inject(MAT_AUTOCOMPLETE_SCROLL_STRATEGY);\n    _renderer = inject(Renderer2);\n    _animationsDisabled = _animationsDisabled();\n    _defaults = inject(MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, {\n      optional: true\n    });\n    _overlayRef;\n    _portal;\n    _componentDestroyed = false;\n    _initialized = new Subject();\n    _keydownSubscription;\n    _outsideClickSubscription;\n    _cleanupWindowBlur;\n    /** Old value of the native input. Used to work around issues with the `input` event on IE. */\n    _previousValue;\n    /** Value of the input element when the panel was attached (even if there are no options). */\n    _valueOnAttach;\n    /** Value on the previous keydown event. */\n    _valueOnLastKeydown;\n    /** Strategy that is used to position the panel. */\n    _positionStrategy;\n    /** Whether or not the label state is being overridden. */\n    _manuallyFloatingLabel = false;\n    /** The subscription for closing actions (some are bound to document). */\n    _closingActionsSubscription;\n    /** Subscription to viewport size changes. */\n    _viewportSubscription = Subscription.EMPTY;\n    /** Implements BreakpointObserver to be used to detect handset landscape */\n    _breakpointObserver = inject(BreakpointObserver);\n    _handsetLandscapeSubscription = Subscription.EMPTY;\n    /**\n     * Whether the autocomplete can open the next time it is focused. Used to prevent a focused,\n     * closed autocomplete from being reopened if the user switches to another browser tab and then\n     * comes back.\n     */\n    _canOpenOnNextFocus = true;\n    /** Value inside the input before we auto-selected an option. */\n    _valueBeforeAutoSelection;\n    /**\n     * Current option that we have auto-selected as the user is navigating,\n     * but which hasn't been propagated to the model value yet.\n     */\n    _pendingAutoselectedOption;\n    /** Stream of keyboard events that can close the panel. */\n    _closeKeyEventStream = new Subject();\n    /** Classes to apply to the panel. Exposed as a public property for internal usage. */\n    _overlayPanelClass = coerceArray(this._defaults?.overlayPanelClass || []);\n    /**\n     * Event handler for when the window is blurred. Needs to be an\n     * arrow function in order to preserve the context.\n     */\n    _windowBlurHandler = () => {\n      // If the user blurred the window while the autocomplete is focused, it means that it'll be\n      // refocused when they come back. In this case we want to skip the first focus event, if the\n      // pane was closed, in order to avoid reopening it unintentionally.\n      this._canOpenOnNextFocus = this.panelOpen || !this._hasFocus();\n    };\n    /** `View -> model callback called when value changes` */\n    _onChange = () => {};\n    /** `View -> model callback called when autocomplete has been touched` */\n    _onTouched = () => {};\n    /** The autocomplete panel to be attached to this trigger. */\n    autocomplete;\n    /**\n     * Position of the autocomplete panel relative to the trigger element. A position of `auto`\n     * will render the panel underneath the trigger if there is enough space for it to fit in\n     * the viewport, otherwise the panel will be shown above it. If the position is set to\n     * `above` or `below`, the panel will always be shown above or below the trigger. no matter\n     * whether it fits completely in the viewport.\n     */\n    position = 'auto';\n    /**\n     * Reference relative to which to position the autocomplete panel.\n     * Defaults to the autocomplete trigger element.\n     */\n    connectedTo;\n    /**\n     * `autocomplete` attribute to be set on the input element.\n     * @docs-private\n     */\n    autocompleteAttribute = 'off';\n    /**\n     * Whether the autocomplete is disabled. When disabled, the element will\n     * act as a regular input and the user won't be able to open the panel.\n     */\n    autocompleteDisabled;\n    constructor() {}\n    /** Class to apply to the panel when it's above the input. */\n    _aboveClass = 'mat-mdc-autocomplete-panel-above';\n    ngAfterViewInit() {\n      this._initialized.next();\n      this._initialized.complete();\n      this._cleanupWindowBlur = this._renderer.listen('window', 'blur', this._windowBlurHandler);\n    }\n    ngOnChanges(changes) {\n      if (changes['position'] && this._positionStrategy) {\n        this._setStrategyPositions(this._positionStrategy);\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n      }\n    }\n    ngOnDestroy() {\n      this._cleanupWindowBlur?.();\n      this._handsetLandscapeSubscription.unsubscribe();\n      this._viewportSubscription.unsubscribe();\n      this._componentDestroyed = true;\n      this._destroyPanel();\n      this._closeKeyEventStream.complete();\n      this._clearFromModal();\n    }\n    /** Whether or not the autocomplete panel is open. */\n    get panelOpen() {\n      return this._overlayAttached && this.autocomplete.showPanel;\n    }\n    _overlayAttached = false;\n    /** Opens the autocomplete suggestion panel. */\n    openPanel() {\n      this._openPanelInternal();\n    }\n    /** Closes the autocomplete suggestion panel. */\n    closePanel() {\n      this._resetLabel();\n      if (!this._overlayAttached) {\n        return;\n      }\n      if (this.panelOpen) {\n        // Only emit if the panel was visible.\n        // `afterNextRender` always runs outside of the Angular zone, so all the subscriptions from\n        // `_subscribeToClosingActions()` are also outside of the Angular zone.\n        // We should manually run in Angular zone to update UI after panel closing.\n        this._zone.run(() => {\n          this.autocomplete.closed.emit();\n        });\n      }\n      // Only reset if this trigger is the latest one that opened the\n      // autocomplete since another may have taken it over.\n      if (this.autocomplete._latestOpeningTrigger === this) {\n        this.autocomplete._isOpen = false;\n        this.autocomplete._latestOpeningTrigger = null;\n      }\n      this._overlayAttached = false;\n      this._pendingAutoselectedOption = null;\n      if (this._overlayRef && this._overlayRef.hasAttached()) {\n        this._overlayRef.detach();\n        this._closingActionsSubscription.unsubscribe();\n      }\n      this._updatePanelState();\n      // Note that in some cases this can end up being called after the component is destroyed.\n      // Add a check to ensure that we don't try to run change detection on a destroyed view.\n      if (!this._componentDestroyed) {\n        // We need to trigger change detection manually, because\n        // `fromEvent` doesn't seem to do it at the proper time.\n        // This ensures that the label is reset when the\n        // user clicks outside.\n        this._changeDetectorRef.detectChanges();\n      }\n      // Remove aria-owns attribute when the autocomplete is no longer visible.\n      if (this._trackedModal) {\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', this.autocomplete.id);\n      }\n    }\n    /**\n     * Updates the position of the autocomplete suggestion panel to ensure that it fits all options\n     * within the viewport.\n     */\n    updatePosition() {\n      if (this._overlayAttached) {\n        this._overlayRef.updatePosition();\n      }\n    }\n    /**\n     * A stream of actions that should close the autocomplete panel, including\n     * when an option is selected, on blur, and when TAB is pressed.\n     */\n    get panelClosingActions() {\n      return merge(this.optionSelections, this.autocomplete._keyManager.tabOut.pipe(filter(() => this._overlayAttached)), this._closeKeyEventStream, this._getOutsideClickStream(), this._overlayRef ? this._overlayRef.detachments().pipe(filter(() => this._overlayAttached)) : of()).pipe(\n      // Normalize the output so we return a consistent type.\n      map(event => event instanceof MatOptionSelectionChange ? event : null));\n    }\n    /** Stream of changes to the selection state of the autocomplete options. */\n    optionSelections = defer(() => {\n      const options = this.autocomplete ? this.autocomplete.options : null;\n      if (options) {\n        return options.changes.pipe(startWith(options), switchMap(() => merge(...options.map(option => option.onSelectionChange))));\n      }\n      // If there are any subscribers before `ngAfterViewInit`, the `autocomplete` will be undefined.\n      // Return a stream that we'll replace with the real one once everything is in place.\n      return this._initialized.pipe(switchMap(() => this.optionSelections));\n    });\n    /** The currently active option, coerced to MatOption type. */\n    get activeOption() {\n      if (this.autocomplete && this.autocomplete._keyManager) {\n        return this.autocomplete._keyManager.activeItem;\n      }\n      return null;\n    }\n    /** Stream of clicks outside of the autocomplete panel. */\n    _getOutsideClickStream() {\n      return new Observable(observer => {\n        const listener = event => {\n          // If we're in the Shadow DOM, the event target will be the shadow root, so we have to\n          // fall back to check the first element in the path of the click event.\n          const clickTarget = _getEventTarget(event);\n          const formField = this._formField ? this._formField.getConnectedOverlayOrigin().nativeElement : null;\n          const customOrigin = this.connectedTo ? this.connectedTo.elementRef.nativeElement : null;\n          if (this._overlayAttached && clickTarget !== this._element.nativeElement &&\n          // Normally focus moves inside `mousedown` so this condition will almost always be\n          // true. Its main purpose is to handle the case where the input is focused from an\n          // outside click which propagates up to the `body` listener within the same sequence\n          // and causes the panel to close immediately (see #3106).\n          !this._hasFocus() && (!formField || !formField.contains(clickTarget)) && (!customOrigin || !customOrigin.contains(clickTarget)) && !!this._overlayRef && !this._overlayRef.overlayElement.contains(clickTarget)) {\n            observer.next(event);\n          }\n        };\n        const cleanups = [this._renderer.listen('document', 'click', listener), this._renderer.listen('document', 'auxclick', listener), this._renderer.listen('document', 'touchend', listener)];\n        return () => {\n          cleanups.forEach(current => current());\n        };\n      });\n    }\n    // Implemented as part of ControlValueAccessor.\n    writeValue(value) {\n      Promise.resolve(null).then(() => this._assignOptionValue(value));\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnChange(fn) {\n      this._onChange = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    registerOnTouched(fn) {\n      this._onTouched = fn;\n    }\n    // Implemented as part of ControlValueAccessor.\n    setDisabledState(isDisabled) {\n      this._element.nativeElement.disabled = isDisabled;\n    }\n    _handleKeydown(e) {\n      const event = e;\n      const keyCode = event.keyCode;\n      const hasModifier = hasModifierKey(event);\n      // Prevent the default action on all escape key presses. This is here primarily to bring IE\n      // in line with other browsers. By default, pressing escape on IE will cause it to revert\n      // the input value to the one that it had on focus, however it won't dispatch any events\n      // which means that the model value will be out of sync with the view.\n      if (keyCode === ESCAPE && !hasModifier) {\n        event.preventDefault();\n      }\n      this._valueOnLastKeydown = this._element.nativeElement.value;\n      if (this.activeOption && keyCode === ENTER && this.panelOpen && !hasModifier) {\n        this.activeOption._selectViaInteraction();\n        this._resetActiveItem();\n        event.preventDefault();\n      } else if (this.autocomplete) {\n        const prevActiveItem = this.autocomplete._keyManager.activeItem;\n        const isArrowKey = keyCode === UP_ARROW || keyCode === DOWN_ARROW;\n        if (keyCode === TAB || isArrowKey && !hasModifier && this.panelOpen) {\n          this.autocomplete._keyManager.onKeydown(event);\n        } else if (isArrowKey && this._canOpen()) {\n          this._openPanelInternal(this._valueOnLastKeydown);\n        }\n        if (isArrowKey || this.autocomplete._keyManager.activeItem !== prevActiveItem) {\n          this._scrollToOption(this.autocomplete._keyManager.activeItemIndex || 0);\n          if (this.autocomplete.autoSelectActiveOption && this.activeOption) {\n            if (!this._pendingAutoselectedOption) {\n              this._valueBeforeAutoSelection = this._valueOnLastKeydown;\n            }\n            this._pendingAutoselectedOption = this.activeOption;\n            this._assignOptionValue(this.activeOption.value);\n          }\n        }\n      }\n    }\n    _handleInput(event) {\n      let target = event.target;\n      let value = target.value;\n      // Based on `NumberValueAccessor` from forms.\n      if (target.type === 'number') {\n        value = value == '' ? null : parseFloat(value);\n      }\n      // If the input has a placeholder, IE will fire the `input` event on page load,\n      // focus and blur, in addition to when the user actually changed the value. To\n      // filter out all of the extra events, we save the value on focus and between\n      // `input` events, and we check whether it changed.\n      // See: https://connect.microsoft.com/IE/feedback/details/885747/\n      if (this._previousValue !== value) {\n        this._previousValue = value;\n        this._pendingAutoselectedOption = null;\n        // If selection is required we don't write to the CVA while the user is typing.\n        // At the end of the selection either the user will have picked something\n        // or we'll reset the value back to null.\n        if (!this.autocomplete || !this.autocomplete.requireSelection) {\n          this._onChange(value);\n        }\n        if (!value) {\n          this._clearPreviousSelectedOption(null, false);\n        } else if (this.panelOpen && !this.autocomplete.requireSelection) {\n          // Note that we don't reset this when `requireSelection` is enabled,\n          // because the option will be reset when the panel is closed.\n          const selectedOption = this.autocomplete.options?.find(option => option.selected);\n          if (selectedOption) {\n            const display = this._getDisplayValue(selectedOption.value);\n            if (value !== display) {\n              selectedOption.deselect(false);\n            }\n          }\n        }\n        if (this._canOpen() && this._hasFocus()) {\n          // When the `input` event fires, the input's value will have already changed. This means\n          // that if we take the `this._element.nativeElement.value` directly, it'll be one keystroke\n          // behind. This can be a problem when the user selects a value, changes a character while\n          // the input still has focus and then clicks away (see #28432). To work around it, we\n          // capture the value in `keydown` so we can use it here.\n          const valueOnAttach = this._valueOnLastKeydown ?? this._element.nativeElement.value;\n          this._valueOnLastKeydown = null;\n          this._openPanelInternal(valueOnAttach);\n        }\n      }\n    }\n    _handleFocus() {\n      if (!this._canOpenOnNextFocus) {\n        this._canOpenOnNextFocus = true;\n      } else if (this._canOpen()) {\n        this._previousValue = this._element.nativeElement.value;\n        this._attachOverlay(this._previousValue);\n        this._floatLabel(true);\n      }\n    }\n    _handleClick() {\n      if (this._canOpen() && !this.panelOpen) {\n        this._openPanelInternal();\n      }\n    }\n    /** Whether the input currently has focus. */\n    _hasFocus() {\n      return _getFocusedElementPierceShadowDom() === this._element.nativeElement;\n    }\n    /**\n     * In \"auto\" mode, the label will animate down as soon as focus is lost.\n     * This causes the value to jump when selecting an option with the mouse.\n     * This method manually floats the label until the panel can be closed.\n     * @param shouldAnimate Whether the label should be animated when it is floated.\n     */\n    _floatLabel(shouldAnimate = false) {\n      if (this._formField && this._formField.floatLabel === 'auto') {\n        if (shouldAnimate) {\n          this._formField._animateAndLockLabel();\n        } else {\n          this._formField.floatLabel = 'always';\n        }\n        this._manuallyFloatingLabel = true;\n      }\n    }\n    /** If the label has been manually elevated, return it to its normal state. */\n    _resetLabel() {\n      if (this._manuallyFloatingLabel) {\n        if (this._formField) {\n          this._formField.floatLabel = 'auto';\n        }\n        this._manuallyFloatingLabel = false;\n      }\n    }\n    /**\n     * This method listens to a stream of panel closing actions and resets the\n     * stream every time the option list changes.\n     */\n    _subscribeToClosingActions() {\n      const initialRender = new Observable(subscriber => {\n        afterNextRender(() => {\n          subscriber.next();\n        }, {\n          injector: this._environmentInjector\n        });\n      });\n      const optionChanges = this.autocomplete.options?.changes.pipe(tap(() => this._positionStrategy.reapplyLastPosition()),\n      // Defer emitting to the stream until the next tick, because changing\n      // bindings in here will cause \"changed after checked\" errors.\n      delay(0)) ?? of();\n      // When the options are initially rendered, and when the option list changes...\n      return merge(initialRender, optionChanges).pipe(\n      // create a new stream of panelClosingActions, replacing any previous streams\n      // that were created, and flatten it so our stream only emits closing events...\n      switchMap(() => this._zone.run(() => {\n        // `afterNextRender` always runs outside of the Angular zone, thus we have to re-enter\n        // the Angular zone. This will lead to change detection being called outside of the Angular\n        // zone and the `autocomplete.opened` will also emit outside of the Angular.\n        const wasOpen = this.panelOpen;\n        this._resetActiveItem();\n        this._updatePanelState();\n        this._changeDetectorRef.detectChanges();\n        if (this.panelOpen) {\n          this._overlayRef.updatePosition();\n        }\n        if (wasOpen !== this.panelOpen) {\n          // If the `panelOpen` state changed, we need to make sure to emit the `opened` or\n          // `closed` event, because we may not have emitted it. This can happen\n          // - if the users opens the panel and there are no options, but the\n          //   options come in slightly later or as a result of the value changing,\n          // - if the panel is closed after the user entered a string that did not match any\n          //   of the available options,\n          // - if a valid string is entered after an invalid one.\n          if (this.panelOpen) {\n            this._emitOpened();\n          } else {\n            this.autocomplete.closed.emit();\n          }\n        }\n        return this.panelClosingActions;\n      })),\n      // when the first closing event occurs...\n      take(1))\n      // set the value, close the panel, and complete.\n      .subscribe(event => this._setValueAndClose(event));\n    }\n    /**\n     * Emits the opened event once it's known that the panel will be shown and stores\n     * the state of the trigger right before the opening sequence was finished.\n     */\n    _emitOpened() {\n      this.autocomplete.opened.emit();\n    }\n    /** Destroys the autocomplete suggestion panel. */\n    _destroyPanel() {\n      if (this._overlayRef) {\n        this.closePanel();\n        this._overlayRef.dispose();\n        this._overlayRef = null;\n      }\n    }\n    /** Given a value, returns the string that should be shown within the input. */\n    _getDisplayValue(value) {\n      const autocomplete = this.autocomplete;\n      return autocomplete && autocomplete.displayWith ? autocomplete.displayWith(value) : value;\n    }\n    _assignOptionValue(value) {\n      const toDisplay = this._getDisplayValue(value);\n      if (value == null) {\n        this._clearPreviousSelectedOption(null, false);\n      }\n      // Simply falling back to an empty string if the display value is falsy does not work properly.\n      // The display value can also be the number zero and shouldn't fall back to an empty string.\n      this._updateNativeInputValue(toDisplay != null ? toDisplay : '');\n    }\n    _updateNativeInputValue(value) {\n      // If it's used within a `MatFormField`, we should set it through the property so it can go\n      // through change detection.\n      if (this._formField) {\n        this._formField._control.value = value;\n      } else {\n        this._element.nativeElement.value = value;\n      }\n      this._previousValue = value;\n    }\n    /**\n     * This method closes the panel, and if a value is specified, also sets the associated\n     * control to that value. It will also mark the control as dirty if this interaction\n     * stemmed from the user.\n     */\n    _setValueAndClose(event) {\n      const panel = this.autocomplete;\n      const toSelect = event ? event.source : this._pendingAutoselectedOption;\n      if (toSelect) {\n        this._clearPreviousSelectedOption(toSelect);\n        this._assignOptionValue(toSelect.value);\n        // TODO(crisbeto): this should wait until the animation is done, otherwise the value\n        // gets reset while the panel is still animating which looks glitchy. It'll likely break\n        // some tests to change it at this point.\n        this._onChange(toSelect.value);\n        panel._emitSelectEvent(toSelect);\n        this._element.nativeElement.focus();\n      } else if (panel.requireSelection && this._element.nativeElement.value !== this._valueOnAttach) {\n        this._clearPreviousSelectedOption(null);\n        this._assignOptionValue(null);\n        this._onChange(null);\n      }\n      this.closePanel();\n    }\n    /**\n     * Clear any previous selected option and emit a selection change event for this option\n     */\n    _clearPreviousSelectedOption(skip, emitEvent) {\n      // Null checks are necessary here, because the autocomplete\n      // or its options may not have been assigned yet.\n      this.autocomplete?.options?.forEach(option => {\n        if (option !== skip && option.selected) {\n          option.deselect(emitEvent);\n        }\n      });\n    }\n    _openPanelInternal(valueOnAttach = this._element.nativeElement.value) {\n      this._attachOverlay(valueOnAttach);\n      this._floatLabel();\n      // Add aria-owns attribute when the autocomplete becomes visible.\n      if (this._trackedModal) {\n        const panelId = this.autocomplete.id;\n        addAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      }\n    }\n    _attachOverlay(valueOnAttach) {\n      if (!this.autocomplete && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw getMatAutocompleteMissingPanelError();\n      }\n      let overlayRef = this._overlayRef;\n      if (!overlayRef) {\n        this._portal = new TemplatePortal(this.autocomplete.template, this._viewContainerRef, {\n          id: this._formField?.getLabelId()\n        });\n        overlayRef = createOverlayRef(this._injector, this._getOverlayConfig());\n        this._overlayRef = overlayRef;\n        this._viewportSubscription = this._viewportRuler.change().subscribe(() => {\n          if (this.panelOpen && overlayRef) {\n            overlayRef.updateSize({\n              width: this._getPanelWidth()\n            });\n          }\n        });\n        // Subscribe to the breakpoint events stream to detect when screen is in\n        // handsetLandscape.\n        this._handsetLandscapeSubscription = this._breakpointObserver.observe(Breakpoints.HandsetLandscape).subscribe(result => {\n          const isHandsetLandscape = result.matches;\n          // Check if result.matches Breakpoints.HandsetLandscape. Apply HandsetLandscape\n          // settings to prevent overlay cutoff in that breakpoint. Fixes b/284148377\n          if (isHandsetLandscape) {\n            this._positionStrategy.withFlexibleDimensions(true).withGrowAfterOpen(true).withViewportMargin(8);\n          } else {\n            this._positionStrategy.withFlexibleDimensions(false).withGrowAfterOpen(false).withViewportMargin(0);\n          }\n        });\n      } else {\n        // Update the trigger, panel width and direction, in case anything has changed.\n        this._positionStrategy.setOrigin(this._getConnectedElement());\n        overlayRef.updateSize({\n          width: this._getPanelWidth()\n        });\n      }\n      if (overlayRef && !overlayRef.hasAttached()) {\n        overlayRef.attach(this._portal);\n        this._valueOnAttach = valueOnAttach;\n        this._valueOnLastKeydown = null;\n        this._closingActionsSubscription = this._subscribeToClosingActions();\n      }\n      const wasOpen = this.panelOpen;\n      this.autocomplete._isOpen = this._overlayAttached = true;\n      this.autocomplete._latestOpeningTrigger = this;\n      this.autocomplete._setColor(this._formField?.color);\n      this._updatePanelState();\n      this._applyModalPanelOwnership();\n      // We need to do an extra `panelOpen` check in here, because the\n      // autocomplete won't be shown if there are no options.\n      if (this.panelOpen && wasOpen !== this.panelOpen) {\n        this._emitOpened();\n      }\n    }\n    /** Handles keyboard events coming from the overlay panel. */\n    _handlePanelKeydown = event => {\n      // Close when pressing ESCAPE or ALT + UP_ARROW, based on the a11y guidelines.\n      // See: https://www.w3.org/TR/wai-aria-practices-1.1/#textbox-keyboard-interaction\n      if (event.keyCode === ESCAPE && !hasModifierKey(event) || event.keyCode === UP_ARROW && hasModifierKey(event, 'altKey')) {\n        // If the user had typed something in before we autoselected an option, and they decided\n        // to cancel the selection, restore the input value to the one they had typed in.\n        if (this._pendingAutoselectedOption) {\n          this._updateNativeInputValue(this._valueBeforeAutoSelection ?? '');\n          this._pendingAutoselectedOption = null;\n        }\n        this._closeKeyEventStream.next();\n        this._resetActiveItem();\n        // We need to stop propagation, otherwise the event will eventually\n        // reach the input itself and cause the overlay to be reopened.\n        event.stopPropagation();\n        event.preventDefault();\n      }\n    };\n    /** Updates the panel's visibility state and any trigger state tied to id. */\n    _updatePanelState() {\n      this.autocomplete._setVisibility();\n      // Note that here we subscribe and unsubscribe based on the panel's visiblity state,\n      // because the act of subscribing will prevent events from reaching other overlays and\n      // we don't want to block the events if there are no options.\n      if (this.panelOpen) {\n        const overlayRef = this._overlayRef;\n        if (!this._keydownSubscription) {\n          // Use the `keydownEvents` in order to take advantage of\n          // the overlay event targeting provided by the CDK overlay.\n          this._keydownSubscription = overlayRef.keydownEvents().subscribe(this._handlePanelKeydown);\n        }\n        if (!this._outsideClickSubscription) {\n          // Subscribe to the pointer events stream so that it doesn't get picked up by other overlays.\n          // TODO(crisbeto): we should switch `_getOutsideClickStream` eventually to use this stream,\n          // but the behvior isn't exactly the same and it ends up breaking some internal tests.\n          this._outsideClickSubscription = overlayRef.outsidePointerEvents().subscribe();\n        }\n      } else {\n        this._keydownSubscription?.unsubscribe();\n        this._outsideClickSubscription?.unsubscribe();\n        this._keydownSubscription = this._outsideClickSubscription = null;\n      }\n    }\n    _getOverlayConfig() {\n      return new OverlayConfig({\n        positionStrategy: this._getOverlayPosition(),\n        scrollStrategy: this._scrollStrategy(),\n        width: this._getPanelWidth(),\n        direction: this._dir ?? undefined,\n        hasBackdrop: this._defaults?.hasBackdrop,\n        backdropClass: this._defaults?.backdropClass,\n        panelClass: this._overlayPanelClass,\n        disableAnimations: this._animationsDisabled\n      });\n    }\n    _getOverlayPosition() {\n      // Set default Overlay Position\n      const strategy = createFlexibleConnectedPositionStrategy(this._injector, this._getConnectedElement()).withFlexibleDimensions(false).withPush(false);\n      this._setStrategyPositions(strategy);\n      this._positionStrategy = strategy;\n      return strategy;\n    }\n    /** Sets the positions on a position strategy based on the directive's input state. */\n    _setStrategyPositions(positionStrategy) {\n      // Note that we provide horizontal fallback positions, even though by default the dropdown\n      // width matches the input, because consumers can override the width. See #18854.\n      const belowPositions = [{\n        originX: 'start',\n        originY: 'bottom',\n        overlayX: 'start',\n        overlayY: 'top'\n      }, {\n        originX: 'end',\n        originY: 'bottom',\n        overlayX: 'end',\n        overlayY: 'top'\n      }];\n      // The overlay edge connected to the trigger should have squared corners, while\n      // the opposite end has rounded corners. We apply a CSS class to swap the\n      // border-radius based on the overlay position.\n      const panelClass = this._aboveClass;\n      const abovePositions = [{\n        originX: 'start',\n        originY: 'top',\n        overlayX: 'start',\n        overlayY: 'bottom',\n        panelClass\n      }, {\n        originX: 'end',\n        originY: 'top',\n        overlayX: 'end',\n        overlayY: 'bottom',\n        panelClass\n      }];\n      let positions;\n      if (this.position === 'above') {\n        positions = abovePositions;\n      } else if (this.position === 'below') {\n        positions = belowPositions;\n      } else {\n        positions = [...belowPositions, ...abovePositions];\n      }\n      positionStrategy.withPositions(positions);\n    }\n    _getConnectedElement() {\n      if (this.connectedTo) {\n        return this.connectedTo.elementRef;\n      }\n      return this._formField ? this._formField.getConnectedOverlayOrigin() : this._element;\n    }\n    _getPanelWidth() {\n      return this.autocomplete.panelWidth || this._getHostWidth();\n    }\n    /** Returns the width of the input element, so the panel width can match it. */\n    _getHostWidth() {\n      return this._getConnectedElement().nativeElement.getBoundingClientRect().width;\n    }\n    /**\n     * Reset the active item to -1. This is so that pressing arrow keys will activate the correct\n     * option.\n     *\n     * If the consumer opted-in to automatically activatating the first option, activate the first\n     * *enabled* option.\n     */\n    _resetActiveItem() {\n      const autocomplete = this.autocomplete;\n      if (autocomplete.autoActiveFirstOption) {\n        // Find the index of the first *enabled* option. Avoid calling `_keyManager.setActiveItem`\n        // because it activates the first option that passes the skip predicate, rather than the\n        // first *enabled* option.\n        let firstEnabledOptionIndex = -1;\n        for (let index = 0; index < autocomplete.options.length; index++) {\n          const option = autocomplete.options.get(index);\n          if (!option.disabled) {\n            firstEnabledOptionIndex = index;\n            break;\n          }\n        }\n        autocomplete._keyManager.setActiveItem(firstEnabledOptionIndex);\n      } else {\n        autocomplete._keyManager.setActiveItem(-1);\n      }\n    }\n    /** Determines whether the panel can be opened. */\n    _canOpen() {\n      const element = this._element.nativeElement;\n      return !element.readOnly && !element.disabled && !this.autocompleteDisabled;\n    }\n    /** Scrolls to a particular option in the list. */\n    _scrollToOption(index) {\n      // Given that we are not actually focusing active options, we must manually adjust scroll\n      // to reveal options below the fold. First, we find the offset of the option from the top\n      // of the panel. If that offset is below the fold, the new scrollTop will be the offset -\n      // the panel height + the option height, so the active option will be just visible at the\n      // bottom of the panel. If that offset is above the top of the visible panel, the new scrollTop\n      // will become the offset. If that offset is visible within the panel already, the scrollTop is\n      // not adjusted.\n      const autocomplete = this.autocomplete;\n      const labelCount = _countGroupLabelsBeforeOption(index, autocomplete.options, autocomplete.optionGroups);\n      if (index === 0 && labelCount === 1) {\n        // If we've got one group label before the option and we're at the top option,\n        // scroll the list to the top. This is better UX than scrolling the list to the\n        // top of the option, because it allows the user to read the top group's label.\n        autocomplete._setScrollTop(0);\n      } else if (autocomplete.panel) {\n        const option = autocomplete.options.toArray()[index];\n        if (option) {\n          const element = option._getHostElement();\n          const newScrollPosition = _getOptionScrollPosition(element.offsetTop, element.offsetHeight, autocomplete._getScrollTop(), autocomplete.panel.nativeElement.offsetHeight);\n          autocomplete._setScrollTop(newScrollPosition);\n        }\n      }\n    }\n    /**\n     * Track which modal we have modified the `aria-owns` attribute of. When the combobox trigger is\n     * inside an aria-modal, we apply aria-owns to the parent modal with the `id` of the options\n     * panel. Track the modal we have changed so we can undo the changes on destroy.\n     */\n    _trackedModal = null;\n    /**\n     * If the autocomplete trigger is inside of an `aria-modal` element, connect\n     * that modal to the options panel with `aria-owns`.\n     *\n     * For some browser + screen reader combinations, when navigation is inside\n     * of an `aria-modal` element, the screen reader treats everything outside\n     * of that modal as hidden or invisible.\n     *\n     * This causes a problem when the combobox trigger is _inside_ of a modal, because the\n     * options panel is rendered _outside_ of that modal, preventing screen reader navigation\n     * from reaching the panel.\n     *\n     * We can work around this issue by applying `aria-owns` to the modal with the `id` of\n     * the options panel. This effectively communicates to assistive technology that the\n     * options panel is part of the same interaction as the modal.\n     *\n     * At time of this writing, this issue is present in VoiceOver.\n     * See https://github.com/angular/components/issues/20694\n     */\n    _applyModalPanelOwnership() {\n      // TODO(http://github.com/angular/components/issues/26853): consider de-duplicating this with\n      // the `LiveAnnouncer` and any other usages.\n      //\n      // Note that the selector here is limited to CDK overlays at the moment in order to reduce the\n      // section of the DOM we need to look through. This should cover all the cases we support, but\n      // the selector can be expanded if it turns out to be too narrow.\n      const modal = this._element.nativeElement.closest('body > .cdk-overlay-container [aria-modal=\"true\"]');\n      if (!modal) {\n        // Most commonly, the autocomplete trigger is not inside a modal.\n        return;\n      }\n      const panelId = this.autocomplete.id;\n      if (this._trackedModal) {\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n      }\n      addAriaReferencedId(modal, 'aria-owns', panelId);\n      this._trackedModal = modal;\n    }\n    /** Clears the references to the listbox overlay element from the modal it was added to. */\n    _clearFromModal() {\n      if (this._trackedModal) {\n        const panelId = this.autocomplete.id;\n        removeAriaReferencedId(this._trackedModal, 'aria-owns', panelId);\n        this._trackedModal = null;\n      }\n    }\n    static ɵfac = function MatAutocompleteTrigger_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocompleteTrigger)();\n    };\n    static ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatAutocompleteTrigger,\n      selectors: [[\"input\", \"matAutocomplete\", \"\"], [\"textarea\", \"matAutocomplete\", \"\"]],\n      hostAttrs: [1, \"mat-mdc-autocomplete-trigger\"],\n      hostVars: 7,\n      hostBindings: function MatAutocompleteTrigger_HostBindings(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵlistener(\"focusin\", function MatAutocompleteTrigger_focusin_HostBindingHandler() {\n            return ctx._handleFocus();\n          })(\"blur\", function MatAutocompleteTrigger_blur_HostBindingHandler() {\n            return ctx._onTouched();\n          })(\"input\", function MatAutocompleteTrigger_input_HostBindingHandler($event) {\n            return ctx._handleInput($event);\n          })(\"keydown\", function MatAutocompleteTrigger_keydown_HostBindingHandler($event) {\n            return ctx._handleKeydown($event);\n          })(\"click\", function MatAutocompleteTrigger_click_HostBindingHandler() {\n            return ctx._handleClick();\n          });\n        }\n        if (rf & 2) {\n          i0.ɵɵattribute(\"autocomplete\", ctx.autocompleteAttribute)(\"role\", ctx.autocompleteDisabled ? null : \"combobox\")(\"aria-autocomplete\", ctx.autocompleteDisabled ? null : \"list\")(\"aria-activedescendant\", ctx.panelOpen && ctx.activeOption ? ctx.activeOption.id : null)(\"aria-expanded\", ctx.autocompleteDisabled ? null : ctx.panelOpen.toString())(\"aria-controls\", ctx.autocompleteDisabled || !ctx.panelOpen ? null : ctx.autocomplete == null ? null : ctx.autocomplete.id)(\"aria-haspopup\", ctx.autocompleteDisabled ? null : \"listbox\");\n        }\n      },\n      inputs: {\n        autocomplete: [0, \"matAutocomplete\", \"autocomplete\"],\n        position: [0, \"matAutocompletePosition\", \"position\"],\n        connectedTo: [0, \"matAutocompleteConnectedTo\", \"connectedTo\"],\n        autocompleteAttribute: [0, \"autocomplete\", \"autocompleteAttribute\"],\n        autocompleteDisabled: [2, \"matAutocompleteDisabled\", \"autocompleteDisabled\", booleanAttribute]\n      },\n      exportAs: [\"matAutocompleteTrigger\"],\n      features: [i0.ɵɵProvidersFeature([MAT_AUTOCOMPLETE_VALUE_ACCESSOR]), i0.ɵɵNgOnChangesFeature]\n    });\n  }\n  return MatAutocompleteTrigger;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet MatAutocompleteModule = /*#__PURE__*/(() => {\n  class MatAutocompleteModule {\n    static ɵfac = function MatAutocompleteModule_Factory(__ngFactoryType__) {\n      return new (__ngFactoryType__ || MatAutocompleteModule)();\n    };\n    static ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatAutocompleteModule\n    });\n    static ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER],\n      imports: [OverlayModule, MatOptionModule, MatCommonModule, CdkScrollableModule, MatOptionModule, MatCommonModule]\n    });\n  }\n  return MatAutocompleteModule;\n})();\n/*#__PURE__*/(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nexport { MAT_AUTOCOMPLETE_DEFAULT_OPTIONS, MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY, MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER, MAT_AUTOCOMPLETE_VALUE_ACCESSOR, MatAutocomplete, MatAutocompleteModule, MatAutocompleteOrigin, MatAutocompleteSelectedEvent, MatAutocompleteTrigger, MatOption, getMatAutocompleteMissingPanelError };\n","import { patchState, signalStore, withComputed, withHooks, withMethods, withState } from '@ngrx/signals';\r\nimport { computed, inject } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { lastValueFrom } from 'rxjs';\r\nimport { User } from './user.model';\r\n\r\ninterface ApiUser {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n}\r\n\r\ninterface UserState {\r\n  users: User[];\r\n  initialized: boolean;\r\n  error: string | null;\r\n  currentPage: number;\r\n  pageSize: number;\r\n  searchQuery: string;\r\n  isLoading: boolean;\r\n  sortField: string | null;\r\n  sortDirection: 'asc' | 'desc';\r\n}\r\n\r\nconst initialState: UserState = {\r\n  users: [],\r\n  initialized: false,\r\n  error: null,\r\n  currentPage: 1,\r\n  pageSize: 10,\r\n  searchQuery: '',\r\n  isLoading: false,\r\n  sortField: null,\r\n  sortDirection: 'asc',\r\n};\r\n\r\nconst apiUrl = 'https://jsonplaceholder.typicode.com/users';\r\n\r\nexport const UserStore = signalStore(\r\n  { providedIn: 'root' },\r\n  withState(initialState),\r\n  withComputed(({ users, searchQuery, pageSize, sortField, sortDirection }) => {\r\n    const filteredUsers = computed(() => {\r\n      let filtered = users().filter(u => {\r\n        const firstName = u.firstName ;\r\n        const email = u.email ;\r\n        const role = u.role ;\r\n        const query = searchQuery().toLowerCase() ;\r\n        return (\r\n          firstName.toLowerCase().includes(query) ||\r\n          email.toLowerCase().includes(query) ||\r\n          role.toLowerCase().includes(query)\r\n        );\r\n      });\r\n\r\n      if (sortField()) {\r\n        filtered = filtered.sort((a, b) => {\r\n          const field = sortField() as keyof User;\r\n          if (field === 'createdDate') {\r\n            const valueA = new Date(a[field] ).getTime();\r\n            const valueB = new Date(b[field] ).getTime();\r\n            return sortDirection() === 'asc' ? valueA - valueB : valueB - valueA;\r\n          } else {\r\n            const valueA = String(a[field] ).toLowerCase();\r\n            const valueB = String(b[field] ).toLowerCase();\r\n            return sortDirection() === 'asc' ? valueA.localeCompare(valueB) : valueB.localeCompare(valueA);\r\n          }\r\n        });\r\n      }\r\n\r\n      return filtered;\r\n    });\r\n\r\n    return {\r\n      filteredUsers,\r\n      paginatedUsers: computed(() => {\r\n        const paginated = filteredUsers();\r\n        return paginated;\r\n      }),\r\n      totalPages: computed(() => {\r\n        const total = Math.ceil(filteredUsers().length / pageSize());\r\n        return total;\r\n      }),\r\n      totalRecords: computed(() => filteredUsers().length),\r\n      isLoading: computed(() => !users().length && !initialState.initialized),\r\n      uniqueEmails: computed(() => {\r\n        const emails = users().map(u => u.email ).filter(email => email !== '');\r\n        return [...new Set(emails)].sort();\r\n      }),\r\n      uniqueFirstNames: computed(() => {\r\n        const names = users().map(u => u.firstName ).filter(name => name !== '');\r\n        return [...new Set(names)].sort();\r\n      }),\r\n    };\r\n  }),\r\n  withMethods((store, http = inject(HttpClient)) => ({\r\n    async loadUsers() {\r\n      try {\r\n        patchState(store, { isLoading: true, error: null });\r\n        const localData = localStorage.getItem('users');\r\n        let users: User[] = [];\r\n        if (localData) {\r\n          users = JSON.parse(localData).map((u: User) => ({\r\n            id: u.id,\r\n            firstName: u.firstName || 'Unknown',\r\n            email: u.email || 'unknown@example.com',\r\n            role: u.role || 'Guest',\r\n            createdDate: u.createdDate || new Date().toISOString(),\r\n          }));\r\n        } else {\r\n          const apiUsers = await lastValueFrom(http.get<ApiUser[]>(apiUrl));\r\n          users = apiUsers.map(u => ({\r\n            id: u.id,\r\n            firstName: u.name || 'Unknown',\r\n            email: u.email || 'unknown@example.com',\r\n            role: 'Guest',\r\n            createdDate: new Date().toISOString(),\r\n          }));\r\n          localStorage.setItem('users', JSON.stringify(users));\r\n        }\r\n        patchState(store, { users, initialized: true, isLoading: false, error: null });\r\n        return users;\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to load users', isLoading: false });\r\n        throw error;\r\n      }\r\n    },\r\n    addUser(user: Omit<User, 'id' | 'createdDate'>) {\r\n      try {\r\n        const newUser: User = {\r\n          ...user,\r\n          id: Date.now(),\r\n          createdDate: new Date().toISOString(),\r\n          firstName: user.firstName || 'Unknown',\r\n          email: user.email || 'unknown@example.com',\r\n          role: user.role || 'Guest',\r\n        };\r\n        const newUsers = [...store.users(), newUser];\r\n        localStorage.setItem('users', JSON.stringify(newUsers));\r\n        patchState(store, { users: newUsers, error: null });\r\n        return newUser;\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to add user' });\r\n        throw error;\r\n      }\r\n    },\r\n    updateUser(user: User) {\r\n      try {\r\n        const updatedUsers = store.users().map(u =>\r\n          u.id === user.id\r\n            ? {\r\n                ...user,\r\n                firstName: user.firstName || 'Unknown',\r\n                email: user.email || 'unknown@example.com',\r\n                role: user.role || 'Guest',\r\n                createdDate: user.createdDate || new Date().toISOString(),\r\n              }\r\n            : u\r\n        );\r\n        localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n        patchState(store, { users: updatedUsers, error: null });\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message || 'Failed to update user' });\r\n        throw error;\r\n      }\r\n    },\r\n    deleteUser(id: number) {\r\n      try {\r\n        const updatedUsers = store.users().filter(u => u.id !== id);\r\n        localStorage.setItem('users', JSON.stringify(updatedUsers));\r\n        patchState(store, { users: updatedUsers, error: null });\r\n      } catch (error: any) {\r\n        patchState(store, { error: error.message });\r\n        throw error;\r\n      }\r\n    },\r\n    setPage(page: number) {\r\n      patchState(store, { currentPage: page });\r\n    },\r\n    setPageSize(pageSize: number) {\r\n      patchState(store, { pageSize, currentPage: 1 });\r\n    },\r\n    setSearchQuery(query: string) {\r\n      patchState(store, { searchQuery: query, currentPage: 1 });\r\n    },\r\n    sortUsers(field: string | null, direction: 'asc' | 'desc') {\r\n      patchState(store, { sortField: field, sortDirection: direction, currentPage: 1 });\r\n    },\r\n  })),\r\n  withHooks({\r\n    onInit(store) {\r\n      store.loadUsers();\r\n    },\r\n  })\r\n);","import { Component, Inject } from '@angular/core';\r\nimport { MatDialogRef, MAT_DIALOG_DATA, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { User } from './user.model';\r\n\r\n@Component({\r\n  selector: 'app-user-dialog',\r\n  standalone: true,\r\n  imports: [\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatSelectModule,\r\n    MatButtonModule,\r\n    FormsModule,\r\n  ],\r\n  template: `\r\n   <h2 mat-dialog-title>{{ data.user ? 'Edit User' : 'Add User' }}</h2>\r\n<mat-dialog-content>\r\n  <mat-form-field appearance=\"fill\" class=\"w-full\">\r\n    <mat-label>First Name</mat-label>\r\n    <input matInput [(ngModel)]=\"user.firstName\" required aria-label=\"First Name\" data-testid=\"first-name-input\">\r\n    @if (!user.firstName) {\r\n      <mat-error data-testid=\"first-name-error\">First Name is required</mat-error>\r\n    }\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"fill\" class=\"w-full\">\r\n    <mat-label>Email</mat-label>\r\n    <input matInput [(ngModel)]=\"user.email\" type=\"email\" required aria-label=\"Email\" data-testid=\"email-input\">\r\n    @if (!user.email) {\r\n      <mat-error data-testid=\"email-error\">Email is required</mat-error>\r\n    }\r\n  </mat-form-field>\r\n  <mat-form-field appearance=\"fill\" class=\"w-full\">\r\n    <mat-label>Role</mat-label>\r\n    <mat-select [(ngModel)]=\"user.role\" required aria-label=\"Role\" data-testid=\"role-select\">\r\n      <mat-option value=\"Admin\" data-testid=\"role-admin\">Admin</mat-option>\r\n      <mat-option value=\"User\" data-testid=\"role-user\">User</mat-option>\r\n      <mat-option value=\"Guest\" data-testid=\"role-guest\">Guest</mat-option>\r\n    </mat-select>\r\n    @if (!user.role) {\r\n      <mat-error data-testid=\"role-error\">Role is required</mat-error>\r\n    }\r\n  </mat-form-field>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n  <button mat-button (click)=\"cancel()\" aria-label=\"Cancel\" data-testid=\"cancel-button\">Cancel</button>\r\n  <button mat-raised-button color=\"primary\" (click)=\"save()\" [disabled]=\"!isValid()\" aria-label=\"Save\" data-testid=\"save-button\">Save</button>\r\n</mat-dialog-actions>\r\n  `,\r\n})\r\nexport class UserDialogComponent {\r\n  user: Partial<User> = {\r\n    firstName: '',\r\n    email: '',\r\n    role: '',\r\n  };\r\n\r\n  constructor(\r\n    public dialogRef: MatDialogRef<UserDialogComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { user: User | null }\r\n  ) {\r\n    if (data.user) {\r\n      this.user = { ...data.user };\r\n    }\r\n    console.log('UserDialogComponent: initialized with data', this.data);\r\n  }\r\n\r\n  isValid(): boolean {\r\n    const valid = !!this.user.firstName && !!this.user.email && !!this.user.role;\r\n    console.log('UserDialogComponent: isValid', valid, 'user', this.user);\r\n    return valid;\r\n  }\r\n\r\n  save() {\r\n    console.log('UserDialogComponent: saving user', this.user);\r\n    this.dialogRef.close(this.user);\r\n  }\r\n\r\n  cancel() {\r\n    console.log('UserDialogComponent: cancelled');\r\n    this.dialogRef.close();\r\n  }\r\n}\r\n","import { Component, inject, ViewChild, AfterViewInit, OnDestroy, effect, EffectRef, ChangeDetectorRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { MatTableDataSource, MatTableModule } from '@angular/material/table';\r\nimport { MatSort, MatSortModule } from '@angular/material/sort';\r\nimport { MatPaginator, MatPaginatorModule, PageEvent } from '@angular/material/paginator';\r\nimport { MatDialog, MatDialogModule } from '@angular/material/dialog';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatNativeDateModule } from '@angular/material/core';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { ToastrService } from 'ngx-toastr';\r\nimport { UserStore } from './mat-components.store';\r\nimport { User } from './user.model';\r\nimport { UserDialogComponent } from './user-dialog.component';\r\nimport { untracked } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-mat-components',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatSortModule,\r\n    MatPaginatorModule,\r\n    MatDialogModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatButtonModule,\r\n    MatIconModule,\r\n    MatCardModule,\r\n    MatSelectModule,\r\n    MatDatepickerModule,\r\n    MatNativeDateModule,\r\n    MatToolbarModule,\r\n    MatProgressSpinnerModule,\r\n    MatAutocompleteModule,\r\n  ],\r\n  templateUrl: './mat-components.component.html',\r\n  styleUrls: ['./mat-components.component.scss'],\r\n})\r\nexport class MatComponentsComponent implements AfterViewInit, OnDestroy {\r\n  private userStore = inject(UserStore);\r\n  private dialog = inject(MatDialog);\r\n  private cdr = inject(ChangeDetectorRef);\r\n  private toastr = inject(ToastrService);\r\n\r\n  public isLoading = this.userStore.isLoading;\r\n  public error = this.userStore.error;\r\n  public pageSize = this.userStore.pageSize;\r\n  public currentPage = this.userStore.currentPage;\r\n  public filteredUsers = this.userStore.filteredUsers;\r\n  public totalRecords = this.userStore.totalRecords;\r\n  public uniqueFirstNames = this.userStore.uniqueFirstNames;\r\n\r\n  private destroyEffect: EffectRef | null = null;\r\n\r\n  displayedColumns: string[] = ['id', 'firstName', 'email', 'role', 'createdDate', 'actions'];\r\n  dataSource = new MatTableDataSource<User>();\r\n  filterValues = {\r\n    global: '',\r\n    firstName: '',\r\n    email: '',\r\n    role: [] as string[],\r\n    startDate: null as Date | null,\r\n    endDate: null as Date | null,\r\n  };\r\n  roles = ['Admin', 'User', 'Guest'];\r\n  allEmails: string[] = [];\r\n  filteredEmails: string[] = [];\r\n\r\n  @ViewChild(MatSort) sort!: MatSort;\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n\r\n  constructor() {\r\n    this.destroyEffect = effect(() => {\r\n      const paginatedUsers = this.userStore.paginatedUsers();\r\n      const filteredUsersLength = this.userStore.totalRecords();\r\n      untracked(() => {\r\n        this.dataSource.data = paginatedUsers;\r\n        this.allEmails = [...new Set(this.userStore.users().map(user => user.email ?? '').filter(email => !!email))];\r\n        this.filteredEmails = this.allEmails;\r\n        if (this.paginator) {\r\n          this.paginator.length = filteredUsersLength;\r\n          this.paginator.pageIndex = this.userStore.currentPage() - 1;\r\n          this.paginator.pageSize = this.userStore.pageSize();\r\n          this.dataSource._updateChangeSubscription();\r\n          this.cdr.markForCheck();\r\n        }\r\n      });\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.dataSource.sort = this.sort;\r\n    this.dataSource.paginator = this.paginator;\r\n    this.dataSource.filterPredicate = this.createFilterPredicate();\r\n    if (this.paginator) {\r\n      this.paginator.pageSize = this.userStore.pageSize();\r\n      this.paginator.length = this.userStore.totalRecords();\r\n      this.paginator._changePageSize(this.paginator.pageSize);\r\n    }\r\n    this.userStore.loadUsers();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.destroyEffect) {\r\n      this.destroyEffect.destroy();\r\n      this.destroyEffect = null;\r\n    }\r\n  }\r\n\r\n  createFilterPredicate() {\r\n    return (data: User, filter: string): boolean => {\r\n      const filterValues = JSON.parse(filter);\r\n      const globalSearch =\r\n        !filterValues.global ||\r\n        (data.firstName ?? '').toLowerCase().includes(filterValues.global.toLowerCase()) ||\r\n        (data.email ?? '').toLowerCase().includes(filterValues.global.toLowerCase()) ||\r\n        (data.role ?? '').toLowerCase().includes(filterValues.global.toLowerCase());\r\n\r\n      const firstNameSearch =\r\n        !filterValues.firstName ||\r\n        (data.firstName ?? '') === filterValues.firstName;\r\n\r\n      const emailSearch =\r\n        !filterValues.email ||\r\n        (data.email ?? '').toLowerCase().includes(filterValues.email.toLowerCase());\r\n\r\n      const roleSearch = !filterValues.role.length || filterValues.role.includes(data.role ?? '');\r\n\r\n      const dateSearch =\r\n        (!filterValues.startDate || new Date(data.createdDate ?? '') >= new Date(filterValues.startDate)) &&\r\n        (!filterValues.endDate || new Date(data.createdDate ?? '') <= new Date(filterValues.endDate));\r\n\r\n      return globalSearch && firstNameSearch && emailSearch && roleSearch && dateSearch;\r\n    };\r\n  }\r\n\r\n  applyFilter() {\r\n    this.dataSource.filter = JSON.stringify(this.filterValues);\r\n    this.filteredEmails = this.allEmails.filter(email =>\r\n      email.toLowerCase().includes(this.filterValues.email.toLowerCase())\r\n    );\r\n    this.userStore.setPage(1);\r\n    if (this.paginator) {\r\n      const filteredLength = this.userStore.totalRecords();\r\n      this.paginator.length = filteredLength;\r\n      this.paginator.pageIndex = 0;\r\n      this.paginator.pageSize = this.userStore.pageSize();\r\n      this.paginator._changePageSize(this.paginator.pageSize);\r\n      this.dataSource._updateChangeSubscription();\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  openAddDialog() {\r\n    const dialogRef = this.dialog.open(UserDialogComponent, {\r\n      width: '400px',\r\n      maxWidth: '100vw',\r\n      data: { user: null },\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result && result.firstName && result.email && result.role) {\r\n        try {\r\n          this.userStore.addUser(result);\r\n          this.toastr.success('User added successfully', 'Success');\r\n          this.userStore.sortUsers('createdDate', 'desc');\r\n          this.syncPaginator();\r\n          this.applyFilter();\r\n          this.dataSource._updateChangeSubscription();\r\n          this.cdr.markForCheck();\r\n        } catch (error) {\r\n          this.toastr.error('Failed to add user', 'Error');\r\n          // console.error('openAddDialog: addUser failed', error);\r\n        }\r\n      } else {\r\n        console.warn('openAddDialog: invalid or no result', result);\r\n      }\r\n    });\r\n  }\r\n\r\n  openEditDialog(user: User) {\r\n    const dialogRef = this.dialog.open(UserDialogComponent, {\r\n      width: '400px',\r\n      maxWidth: '100vw',\r\n      data: { user },\r\n    });\r\n    dialogRef.afterClosed().subscribe(result => {\r\n      if (result) {\r\n        try {\r\n          this.userStore.updateUser(result);\r\n          this.toastr.success('User updated successfully', 'Success');\r\n          this.syncPaginator();\r\n          this.applyFilter();\r\n          this.dataSource._updateChangeSubscription();\r\n          this.cdr.markForCheck();\r\n        } catch (error) {\r\n          this.toastr.error('Failed to update user', 'Error');\r\n          // console.error('openEditDialog: updateUser failed', error);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  deleteUser(id: number) {\r\n    try {\r\n      this.userStore.deleteUser(id);\r\n      this.toastr.success('User deleted successfully', 'Success');\r\n      this.syncPaginator();\r\n      this.applyFilter();\r\n      this.dataSource._updateChangeSubscription();\r\n      this.cdr.markForCheck();\r\n    } catch (error) {\r\n      this.toastr.error('Failed to delete user', 'Error');\r\n      // console.error('deleteUser: delete failed', error);\r\n    }\r\n  }\r\n\r\n  syncPaginator() {\r\n    if (this.paginator) {\r\n      const totalRecords = this.userStore.totalRecords();\r\n      const currentPage = this.userStore.currentPage();\r\n      const pageSize = this.userStore.pageSize();\r\n      const totalPages = this.userStore.totalPages; // Fixed: Access signal directly\r\n      const validPage = Math.min(Math.max(1, currentPage));\r\n      this.paginator.length = totalRecords;\r\n      this.paginator.pageIndex = validPage - 1;\r\n      this.paginator.pageSize = pageSize;\r\n      this.paginator._changePageSize(pageSize);\r\n      this.userStore.setPage(validPage);\r\n      this.cdr.markForCheck();\r\n    }\r\n  }\r\n\r\n  refreshTable() {\r\n    this.filterValues = {\r\n      global: '',\r\n      firstName: '',\r\n      email: '',\r\n      role: [],\r\n      startDate: null,\r\n      endDate: null,\r\n    };\r\n    this.userStore.setSearchQuery('');\r\n    this.userStore.setPage(1);\r\n    this.userStore.sortUsers(null, 'asc');\r\n    try {\r\n      this.userStore.loadUsers();\r\n      this.toastr.success('Table refreshed successfully', 'Success');\r\n      this.syncPaginator();\r\n      this.applyFilter();\r\n      this.dataSource._updateChangeSubscription();\r\n      this.cdr.markForCheck();\r\n    } catch (error) {\r\n      this.toastr.error('Failed to refresh table', 'Error');\r\n      // console.error('refreshTable: loadUsers failed', error);\r\n    }\r\n  }\r\n\r\n  onPageChange(event: PageEvent) {\r\n    this.userStore.setPage(event.pageIndex + 1);\r\n    this.userStore.setPageSize(event.pageSize);\r\n    this.paginator.pageSize = this.userStore.pageSize();\r\n    this.dataSource._updateChangeSubscription();\r\n    this.cdr.markForCheck();\r\n  }\r\n\r\n  trackById(index: number, user: User): number {\r\n    return user.id;\r\n  }\r\n}","<mat-toolbar class=\"bg-blue-600 text-white shadow-md flex items-center px-4 py-2\" aria-label=\"User Management Toolbar\" data-testid=\"user-management-toolbar\">\r\n  <span class=\"text-lg font-semibold\" data-testid=\"toolbar-title\">User Management</span>\r\n  <span class=\"flex-grow\"></span>\r\n  <button mat-raised-button class=\"bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-md text-sm\" (click)=\"openAddDialog()\" aria-label=\"Add New User\" data-testid=\"add-user-button\">\r\n    Add New User\r\n  </button>\r\n  <button mat-icon-button class=\"hover:bg-blue-700 rounded-full p-1\" (click)=\"refreshTable()\" aria-label=\"Refresh User Table\" data-testid=\"refresh-button\">\r\n    <mat-icon>refresh</mat-icon>\r\n  </button>\r\n</mat-toolbar>\r\n\r\n<div class=\"m-4 p-4 bg-white dark:bg-gray-800 shadow-lg rounded-lg\" aria-label=\"User Management Content\" data-testid=\"user-management-content\">\r\n  <!-- Error Display -->\r\n  <div *ngIf=\"error()\" class=\"mb-4 p-3 bg-red-100 dark:bg-red-900 text-red-700 dark:text-red-200 rounded-md text-sm\" role=\"alert\" aria-label=\"Error Message\" data-testid=\"error-message\">\r\n    {{ error() }}\r\n  </div>\r\n\r\n  <!-- Loading Indicator -->\r\n  <div *ngIf=\"isLoading()\" class=\"flex justify-center items-center py-4\" aria-label=\"Loading Indicator\" data-testid=\"loading-indicator\">\r\n    <mat-spinner diameter=\"30\" aria-label=\"Loading Users\"></mat-spinner>\r\n  </div>\r\n\r\n  <!-- Filters -->\r\n  <div class=\"flex flex-wrap gap-8 mb-4\" *ngIf=\"!isLoading()\" aria-label=\"User Filters\" data-testid=\"user-filters\">\r\n    <!-- Global Search -->\r\n    <mat-form-field appearance=\"fill\" class=\"w-60 sm:max-w-80\" data-testid=\"global-search\">\r\n      <mat-label class=\"text-xs\">Search</mat-label>\r\n      <input matInput [(ngModel)]=\"filterValues.global\" (ngModelChange)=\"applyFilter()\" placeholder=\"Search users...\" class=\"text-sm text-gray-900 dark:text-gray-100\" aria-label=\"Search Users\" data-testid=\"global-search-input\">\r\n    </mat-form-field>\r\n\r\n    <!-- First Name Filter with Dropdown -->\r\n    <mat-form-field appearance=\"fill\" class=\"w-44 sm:max-w-80\" data-testid=\"first-name-filter\">\r\n      <mat-label class=\"text-xs\">First Name</mat-label>\r\n      <mat-select [(ngModel)]=\"filterValues.firstName\" (ngModelChange)=\"applyFilter()\" class=\"text-sm text-gray-900 dark:text-gray-100\" aria-label=\"Filter by First Name\" data-testid=\"first-name-select\">\r\n        <mat-option value=\"\" class=\"text-sm\">All</mat-option>\r\n        <mat-option *ngFor=\"let name of uniqueFirstNames()\" [value]=\"name\" class=\"text-sm\" data-testid=\"first-name-option\">{{name}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <!-- Email Filter with Dropdown and Search -->\r\n    <mat-form-field appearance=\"fill\" class=\"w-44 sm:max-w-80\" data-testid=\"email-filter\">\r\n      <mat-label class=\"text-xs\">Email</mat-label>\r\n      <input\r\n        matInput\r\n        [(ngModel)]=\"filterValues.email\"\r\n        (ngModelChange)=\"applyFilter()\"\r\n        [matAutocomplete]=\"autoEmail\"\r\n        class=\"text-sm text-gray-900 dark:text-gray-100\"\r\n        aria-label=\"Filter by Email\"\r\n        data-testid=\"email-input\"\r\n        placeholder=\"Select or type email...\"\r\n      >\r\n      <mat-autocomplete #autoEmail=\"matAutocomplete\" (optionSelected)=\"applyFilter()\">\r\n        <mat-option *ngFor=\"let email of filteredEmails\" [value]=\"email\" class=\"text-sm\" data-testid=\"email-option\">\r\n          {{ email }}\r\n        </mat-option>\r\n      </mat-autocomplete>\r\n    </mat-form-field>\r\n\r\n    <!-- Role Filter -->\r\n    <mat-form-field appearance=\"fill\" class=\"w-44 sm:max-w-80\" data-testid=\"role-filter\">\r\n      <mat-label class=\"text-xs\">Role</mat-label>\r\n      <mat-select [(ngModel)]=\"filterValues.role\" multiple (ngModelChange)=\"applyFilter()\" class=\"text-sm text-gray-900 dark:text-gray-100\" aria-label=\"Filter by Role\" data-testid=\"role-select\">\r\n        <mat-option *ngFor=\"let role of roles\" [value]=\"role\" class=\"text-sm\" data-testid=\"role-option\">{{role}}</mat-option>\r\n      </mat-select>\r\n    </mat-form-field>\r\n\r\n    <!-- Date Range Filter -->\r\n    <mat-form-field appearance=\"fill\" class=\"w-44 sm:max-w-80\" data-testid=\"date-range-filter\">\r\n      <mat-label class=\"text-xs\">Date Range</mat-label>\r\n      <mat-date-range-input [rangePicker]=\"dateRangePicker\" class=\"text-sm text-gray-900 dark:text-gray-100\" aria-label=\"Filter by Date Range\" data-testid=\"date-range-input\">\r\n        <input matStartDate [(ngModel)]=\"filterValues.startDate\" (ngModelChange)=\"applyFilter()\" placeholder=\"Start date\" aria-label=\"Start Date\" data-testid=\"start-date-input\">\r\n        <input matEndDate [(ngModel)]=\"filterValues.endDate\" (ngModelChange)=\"applyFilter()\" placeholder=\"End date\" aria-label=\"End Date\" data-testid=\"end-date-input\">\r\n      </mat-date-range-input>\r\n      <mat-datepicker-toggle matSuffix [for]=\"dateRangePicker\" class=\"text-sm\" aria-label=\"Open Date Range Picker\" data-testid=\"date-range-picker-toggle\"></mat-datepicker-toggle>\r\n      <mat-date-range-picker #dateRangePicker aria-label=\"Date Range Picker\"></mat-date-range-picker>\r\n    </mat-form-field>\r\n  </div>\r\n\r\n  <!-- Material Table -->\r\n  <div class=\"overflow-x-auto\" *ngIf=\"!isLoading()\" aria-label=\"User Data Table\" data-testid=\"user-table\">\r\n    <table mat-table [dataSource]=\"dataSource\" matSort class=\"w-full bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 text-sm\">\r\n      <ng-container matColumnDef=\"id\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"font-semibold p-2\" data-testid=\"id-header\">ID</th>\r\n        <td mat-cell *matCellDef=\"let user\" class=\"p-2\" data-testid=\"id-cell\">{{user.id}}</td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"firstName\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"font-semibold p-2\" data-testid=\"first-name-header\">First Name</th>\r\n        <td mat-cell *matCellDef=\"let user\" class=\"p-2\" data-testid=\"first-name-cell\">{{user.firstName}}</td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"email\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"font-semibold p-2\" data-testid=\"email-header\">Email</th>\r\n        <td mat-cell *matCellDef=\"let user\" class=\"p-2\" data-testid=\"email-cell\">{{user.email}}</td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"role\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"font-semibold p-2\" data-testid=\"role-header\">Role</th>\r\n        <td mat-cell *matCellDef=\"let user\" class=\"p-2\" data-testid=\"role-cell\">{{user.role}}</td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"createdDate\">\r\n        <th mat-header-cell *matHeaderCellDef mat-sort-header class=\"font-semibold p-2\" data-testid=\"created-date-header\">Created Date</th>\r\n        <td mat-cell *matCellDef=\"let user\" class=\"p-2\" data-testid=\"created-date-cell\">{{user.createdDate | date:'short'}}</td>\r\n      </ng-container>\r\n\r\n      <ng-container matColumnDef=\"actions\">\r\n        <th mat-header-cell *matHeaderCellDef class=\"font-semibold p-2\" data-testid=\"actions-header\">Actions</th>\r\n        <td mat-cell *matCellDef=\"let user\" class=\"p-2\" data-testid=\"actions-cell\">\r\n          <button mat-icon-button (click)=\"openEditDialog(user)\" class=\"text-blue-600 dark:text-blue-400 hover:text-blue-800 dark:hover:text-blue-300\" aria-label=\"Edit User\" data-testid=\"edit-button\">\r\n            <mat-icon>edit</mat-icon>\r\n          </button>\r\n          <button mat-icon-button (click)=\"deleteUser(user.id)\" class=\"text-red-600 dark:text-red-400 hover:text-red-800 dark:hover:text-red-300\" aria-label=\"Delete User\" data-testid=\"delete-button\">\r\n            <mat-icon>delete</mat-icon>\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n      <tr mat-header-row *matHeaderRowDef=\"displayedColumns\" class=\"bg-gray-100 dark:bg-gray-700\" data-testid=\"table-header-row\"></tr>\r\n      <tr mat-row *matRowDef=\"let row; columns: displayedColumns; let i = index\" class=\"hover:bg-gray-50 dark:hover:bg-gray-600\" data-testid=\"table-row\"></tr>\r\n    </table>\r\n  </div>\r\n\r\n  <mat-paginator\r\n    [pageSizeOptions]=\"[5, 10, 20]\"\r\n    [pageSize]=\"pageSize()\"\r\n    [pageIndex]=\"currentPage() - 1\"\r\n    [length]=\"filteredUsers().length\"\r\n    showFirstLastButtons\r\n    (page)=\"onPageChange($event)\"\r\n    class=\"bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 p-2\"\r\n    aria-label=\"Table Pagination\"\r\n    data-testid=\"table-paginator\"\r\n  ></mat-paginator>\r\n</div>"],"mappings":"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","names":["_c0","_c1","MatSortHeader_Conditional_3_Template","rf","ctx","ɵɵelementStart","ɵɵnamespaceSVG","ɵɵelement","ɵɵelementEnd","MAT_SORT_DEFAULT_OPTIONS","InjectionToken","MatSort","ReplaySubject","Subject","direction","EventEmitter","_defaultOptions","sortable","disableClear","sortDirectionCycle","getSortDirectionCycle","nextDirectionIndex","__ngFactoryType__","ɵɵdirectiveInject","ɵɵdefineDirective","booleanAttribute","ɵɵNgOnChangesFeature","start","sortOrder","MatSortHeaderIntl","ɵɵdefineInjectable","MAT_SORT_HEADER_INTL_PROVIDER_FACTORY","parentIntl","MAT_SORT_HEADER_INTL_PROVIDER","Optional","SkipSelf","MatSortHeader","inject","ChangeDetectorRef","FocusMonitor","ElementRef","AriaDescriber","_animationsDisabled","signal","value","_CdkPrivateStyleLoader","_StructuralStylesLoader","defaultOptions","merge","wasSorted","prevDirection","event","newDescription","ɵɵdefineComponent","rf","ctx","ɵɵlistener","$event","ɵɵattribute","ɵɵclassProp","_c0","_c1","ɵɵprojectionDef","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","ɵɵconditionalCreate","MatSortHeader_Conditional_3_Template","ɵɵadvance","ɵɵconditional","MatSortModule","ɵɵdefineNgModule","ɵɵdefineInjector","MatCommonModule","MAT_DATE_LOCALE","InjectionToken","MAT_DATE_LOCALE_FACTORY","inject","LOCALE_ID","NOT_IMPLEMENTED","DateAdapter","Subject","target","hours","minutes","seconds","date","value","parseFormat","amount","obj","locale","first","second","firstValid","secondValid","min","max","MAT_DATE_FORMATS","_c0","_forTrack0","$index","$item","_forTrack1","MatCalendarBody_Conditional_0_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ctx_r0","ɵɵnextContext","ɵɵadvance","ɵɵstyleProp","ɵɵattribute","ɵɵtextInterpolate1","MatCalendarBody_For_2_Conditional_1_Template","MatCalendarBody_For_2_For_3_Template","_r2","ɵɵgetCurrentView","ɵɵlistener","$event","item_r3","ɵɵrestoreView","ɵɵresetView","ɵɵelement","ɵ$index_14_r4","ɵ$index_7_r5","ɵɵclassProp","ɵɵproperty","MatCalendarBody_For_2_Template","ɵɵconditionalCreate","ɵɵrepeaterCreate","row_r6","ɵɵconditional","ɵɵrepeater","MatMonthView_For_4_Template","day_r1","ɵɵtextInterpolate","_c1","MatCalendar_ng_template_0_Template","MatCalendar_Case_2_Template","_r1","ɵɵtwoWayListener","ctx_r1","ɵɵtwoWayBindingSet","ɵɵtwoWayProperty","MatCalendar_Case_3_Template","_r3","MatCalendar_Case_4_Template","_r4","MatDatepickerContent_ng_template_2_Template","_c2","_c3","_c4","MatDatepickerToggle_Conditional_2_Template","ɵɵnamespaceSVG","_c5","_c6","MatDatepickerIntl","Subject","start","end","__ngFactoryType__","ɵɵdefineInjectable","uniqueIdCounter$1","MatCalendarCell","value","displayValue","ariaLabel","enabled","cssClasses","compareValue","rawValue","activeCapturingEventOptions","passiveCapturingEventOptions","passiveEventOptions","MatCalendarBody","inject","ElementRef","NgZone","Platform","EventEmitter","Injector","row","renderer","Renderer2","idGenerator","_IdGenerator","_CdkPrivateStyleLoader","_StructuralStylesLoader","element","cleanups","cell","event","changes","columnChanges","rows","numCols","cleanup","rowIndex","colIndex","cellNumber","movePreview","afterNextRender","activeCell","isStart","isEnd","isInRange","previousCell","previousRow","nextCell","nextRow","target","getActualTouchTarget","getCellElement","cellElement","col","ɵɵdefineComponent","ɵɵNgOnChangesFeature","_c0","rf","ctx","ɵɵconditionalCreate","MatCalendarBody_Conditional_0_Template","ɵɵrepeaterCreate","MatCalendarBody_For_2_Template","_forTrack0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵconditional","ɵɵadvance","ɵɵrepeater","ɵɵproperty","ɵɵtextInterpolate1","ɵɵtextInterpolate2","NgClass","isTableCell","node","rangeEnabled","touchLocation","DateRange","MatDateSelectionModel","selection","_adapter","source","oldValue","date","ɵɵinvalidFactory","MatSingleDateSelectionModel","adapter","clone","ɵɵinject","DateAdapter","MatRangeDateSelectionModel","MAT_SINGLE_DATE_SELECTION_MODEL_FACTORY","parent","MAT_SINGLE_DATE_SELECTION_MODEL_PROVIDER","Optional","SkipSelf","MAT_RANGE_DATE_SELECTION_MODEL_FACTORY","MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER","MAT_DATE_RANGE_SELECTION_STRATEGY","InjectionToken","DefaultMatCalendarRangeStrategy","_dateAdapter","currentRange","activeDate","dragOrigin","originalRange","newDate","isRange","diffYears","diffMonths","diffDays","MAT_CALENDAR_RANGE_STRATEGY_PROVIDER_FACTORY","MAT_CALENDAR_RANGE_STRATEGY_PROVIDER","DAYS_PER_WEEK","uniqueIdCounter","MatMonthView","ChangeDetectorRef","MAT_DATE_FORMATS","Directionality","Subscription","oldActiveDate","validDate","_VisuallyHiddenLoader","startWith","comparisonChange","selectedDate","rangeStartDate","rangeEndDate","month","isRtl","hasModifierKey","firstOfMonth","previewRange","dragRange","dragDropResult","dayOfMonth","firstDayOfWeek","narrowWeekdays","weekdays","long","i","daysInMonth","dateNames","cellClasses","d1","d2","year","day","selectedValue","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","MatMonthView_For_4_Template","_forTrack1","ɵɵelement","ɵɵlistener","$event","yearsPerPage","yearsPerRow","MatMultiYearView","isSameMultiYearView","minYearOfPage","getActiveOffset","selectedYear","activeMonth","yearName","firstOfYear","dateAdapter","date1","date2","minDate","maxDate","year1","year2","startingYear","getStartingYear","activeYear","euclideanModulo","a","b","MatYearView","selectedMonth","monthNames","normalizedDate","monthName","maxYear","maxMonth","minYear","minMonth","MatCalendarHeader","MatCalendar","changeDetectorRef","calendar","intl","maxYearOfPage","minYearLabel","maxYearLabel","_c1","ɵɵprojectionDef","ɵɵnamespaceSVG","ɵɵnamespaceHTML","ɵɵprojection","ɵɵtextInterpolate","ɵɵattribute","ɵɵclassProp","MatButton","MatIconButton","viewChangedResult","ComponentPortal","minDateChange","maxDateChange","changeRequiringRerender","view","_getFocusedElementPierceShadowDom","normalizedYear","normalizedMonth","ɵɵProvidersFeature","ɵɵtemplate","MatCalendar_ng_template_0_Template","MatCalendar_Case_2_Template","MatCalendar_Case_3_Template","MatCalendar_Case_4_Template","tmp_1_0","CdkPortalOutlet","CdkMonitorFocus","MAT_DATEPICKER_SCROLL_STRATEGY","injector","createRepositionScrollStrategy","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY","_overlay","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatDatepickerContent","_animationsDisabled","newSelection","portal","forceRerender","ɵɵclassMap","MatDatepickerContent_ng_template_2_Template","CdkTrapFocus","MatDatepickerBase","ViewContainerRef","DOCUMENT","coerceStringArray","positionChange","positionStrategy","FlexibleConnectedPositionStrategy","input","canRestoreFocus","completeClose","instance","location","take","activeElement","isDialog","overlayRef","createOverlayRef","OverlayConfig","createBlockScrollStrategy","keyCode","createGlobalPositionStrategy","strategy","createFlexibleConnectedPositionStrategy","primaryX","secondaryX","primaryY","secondaryY","ctrlShiftMetaModifiers","merge","filter","modifier","ɵɵdefineDirective","booleanAttribute","MatDatepickerInputEvent","target","targetElement","MatDatepickerInputBase","inject","ElementRef","DateAdapter","MAT_DATE_FORMATS","value","newValue","element","EventEmitter","Subject","Subscription","control","controlValue","min","max","model","event","changes","dateInputsHaveChanged","fn","c","isDisabled","ctrlShiftMetaModifiers","hasModifierKey","modifier","lastValueWasValid","date","hasChanged","filter","__ngFactoryType__","ɵɵdefineDirective","booleanAttribute","ɵɵNgOnChangesFeature","adapter","keys","key","previousValue","currentValue","MatDatepickerToggleIcon","__ngFactoryType__","ɵɵdefineDirective","MatDatepickerToggle","inject","MatDatepickerIntl","ChangeDetectorRef","Subscription","value","defaultTabIndex","HostAttributeToken","parsedTabIndex","changes","event","datepickerStateChanged","of","inputStateChanged","datepickerToggled","merge","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","_c2","ɵɵlistener","$event","ɵɵattribute","ɵɵclassProp","booleanAttribute","ɵɵNgOnChangesFeature","_c4","ɵɵprojectionDef","_c3","ɵɵelementStart","ɵɵconditionalCreate","MatDatepickerToggle_Conditional_2_Template","ɵɵprojection","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","ɵɵconditional","MatIconButton","MatDateRangeInput","ElementRef","DateAdapter","MAT_FORM_FIELD","_IdGenerator","start","end","rangePicker","signal","wasMatchingStart","wasMatchingEnd","validValue","startEmpty","endEmpty","Subject","ControlContainer","ids","dateInputsHaveChanged","part","input","formField","origin","model","target","Validators","ɵɵProvidersFeature","MatFormFieldControl","_c6","_c5","ɵɵtext","ɵɵtextInterpolate","CdkMonitorFocus","_computeAriaAccessibleName","element","_computeAriaAccessibleNameInternal","ssrSafeIsElement","node","ssrSafeIsHTMLInputElement","ssrSafeIsHTMLTextAreaElement","currentNode","isDirectlyReferenced","validIdRefs","validIds","id","elem","idRef","ariaLabel","x","placeholder","title","MatDateRangeInputPartBase","MatDatepickerInputBase","ErrorStateMatcher","Injector","NgForm","FormGroupDirective","Directionality","_ErrorStateTracker","ngControl","NgControl","source","ɵɵInheritDefinitionFeature","MatStartDate","control","modelValue","change","range","DateRange","endInput","isLtr","ɵMatStartDate_BaseFactory","ɵɵgetInheritedFactory","ɵɵdomProperty","NG_VALUE_ACCESSOR","NG_VALIDATORS","MatEndDate","startInput","ɵMatEndDate_BaseFactory","MatDateRangePicker","MatDatepickerBase","instance","ɵMatDateRangePicker_BaseFactory","MAT_RANGE_DATE_SELECTION_MODEL_PROVIDER","MAT_CALENDAR_RANGE_STRATEGY_PROVIDER","MatDatepickerModule","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","MatDatepickerIntl","MAT_DATEPICKER_SCROLL_STRATEGY_FACTORY_PROVIDER","MatButtonModule","OverlayModule","A11yModule","PortalModule","MatCommonModule","MatDatepickerContent","MatDatepickerToggle","MatCalendarHeader","CdkScrollableModule","ISO_8601_REGEX","TIME_REGEX","range","length","valueFunction","valuesArray","i","NativeDateAdapter","DateAdapter","inject","MAT_DATE_LOCALE","matDateLocale","date","style","dtf","locale","firstDay","year","month","result","value","parseFormat","displayFormat","__spreadProps","__spreadValues","years","months","newDate","days","obj","target","hours","minutes","seconds","clone","userValue","withoutExtras","amount","d","n","parsed","amPm","inRange","__ngFactoryType__","ɵɵdefineInjectable","min","max","MAT_NATIVE_DATE_FORMATS","MatNativeDateModule","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","provideNativeDateAdapter","formats","MAT_NATIVE_DATE_FORMATS","DateAdapter","NativeDateAdapter","MAT_DATE_FORMATS","_c0","_c1","MatToolbarRow","__ngFactoryType__","ɵɵdefineDirective","MatToolbar","inject","ElementRef","Platform","DOCUMENT","ɵɵdefineComponent","rf","ctx","dirIndex","ɵɵcontentQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵclassMap","ɵɵclassProp","ɵɵprojectionDef","ɵɵprojection","MatToolbarModule","__ngFactoryType__","ɵɵdefineNgModule","ɵɵdefineInjector","MatCommonModule","_c0","_c1","MatAutocomplete_ng_template_0_Template","rf","ctx","ɵɵelementStart","ɵɵprojection","ɵɵelementEnd","formFieldId_r1","ctx_r1","ɵɵnextContext","ɵɵclassMap","ɵɵclassProp","ɵɵproperty","ɵɵattribute","MatAutocompleteSelectedEvent","source","option","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","InjectionToken","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS_FACTORY","MatAutocomplete","inject","ChangeDetectorRef","ElementRef","_animationsDisabled","Subscription","value","EventEmitter","_IdGenerator","platform","Platform","ActiveDescendantKeyManager","index","scrollTop","event","labelId","labelExpression","__ngFactoryType__","ɵɵdefineComponent","dirIndex","ɵɵcontentQuery","MatOption","MAT_OPTGROUP","_t","ɵɵqueryRefresh","ɵɵloadQuery","ɵɵviewQuery","TemplateRef","booleanAttribute","ɵɵProvidersFeature","MAT_OPTION_PARENT_COMPONENT","ɵɵprojectionDef","ɵɵtemplate","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","NG_VALUE_ACCESSOR","forwardRef","MatAutocompleteTrigger","MAT_AUTOCOMPLETE_SCROLL_STRATEGY","InjectionToken","injector","inject","Injector","createRepositionScrollStrategy","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY","_overlay","MAT_AUTOCOMPLETE_SCROLL_STRATEGY_FACTORY_PROVIDER","MatAutocompleteTrigger","EnvironmentInjector","ElementRef","ViewContainerRef","NgZone","ChangeDetectorRef","Directionality","MAT_FORM_FIELD","ViewportRuler","Renderer2","_animationsDisabled","MAT_AUTOCOMPLETE_DEFAULT_OPTIONS","Subject","Subscription","BreakpointObserver","coerceArray","changes","removeAriaReferencedId","merge","filter","of","map","event","MatOptionSelectionChange","defer","options","startWith","switchMap","option","Observable","observer","listener","clickTarget","_getEventTarget","formField","customOrigin","cleanups","current","value","fn","isDisabled","keyCode","hasModifier","hasModifierKey","prevActiveItem","isArrowKey","target","selectedOption","display","valueOnAttach","_getFocusedElementPierceShadowDom","shouldAnimate","initialRender","subscriber","afterNextRender","optionChanges","tap","delay","wasOpen","take","autocomplete","toDisplay","panel","toSelect","skip","emitEvent","panelId","addAriaReferencedId","overlayRef","TemplatePortal","createOverlayRef","Breakpoints","result","OverlayConfig","strategy","createFlexibleConnectedPositionStrategy","positionStrategy","belowPositions","panelClass","abovePositions","positions","firstEnabledOptionIndex","index","element","labelCount","_countGroupLabelsBeforeOption","newScrollPosition","_getOptionScrollPosition","modal","__ngFactoryType__","ɵɵdefineDirective","rf","ctx","ɵɵlistener","$event","ɵɵattribute","booleanAttribute","ɵɵProvidersFeature","MAT_AUTOCOMPLETE_VALUE_ACCESSOR","ɵɵNgOnChangesFeature","MatAutocompleteModule","ɵɵdefineNgModule","ɵɵdefineInjector","OverlayModule","MatOptionModule","MatCommonModule","CdkScrollableModule","initialState","users","initialized","error","currentPage","pageSize","searchQuery","isLoading","sortField","sortDirection","apiUrl","UserStore","signalStore","providedIn","withState","withComputed","filteredUsers","computed","filtered","filter","u","firstName","email","role","query","toLowerCase","includes","sort","a","b","field","valueA","Date","getTime","valueB","String","localeCompare","paginatedUsers","totalPages","Math","ceil","length","totalRecords","uniqueEmails","emails","map","Set","uniqueFirstNames","names","name","withMethods","store","http","inject","HttpClient","loadUsers","__async","patchState","localData","localStorage","getItem","JSON","parse","id","createdDate","toISOString","lastValueFrom","get","setItem","stringify","message","addUser","user","newUser","__spreadProps","__spreadValues","now","newUsers","updateUser","updatedUsers","deleteUser","setPage","page","setPageSize","setSearchQuery","sortUsers","direction","withHooks","onInit","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","UserDialogComponent","dialogRef","data","user","firstName","email","role","constructor","__spreadValues","console","log","isValid","valid","save","close","cancel","ɵɵdirectiveInject","MatDialogRef","MAT_DIALOG_DATA","selectors","decls","vars","consts","template","rf","ctx","ɵɵtwoWayListener","$event","i0","ɵɵtwoWayBindingSet","ɵɵconditionalCreate","UserDialogComponent_Conditional_7_Template","UserDialogComponent_Conditional_12_Template","UserDialogComponent_Conditional_23_Template","ɵɵlistener","ɵɵadvance","ɵɵtextInterpolate","ɵɵtwoWayProperty","ɵɵconditional","ɵɵproperty","MatDialogModule","MatDialogTitle","MatDialogActions","MatDialogContent","MatFormFieldModule","MatFormField","MatLabel","MatError","MatInputModule","MatInput","MatSelectModule","MatSelect","MatOption","MatButtonModule","MatButton","FormsModule","DefaultValueAccessor","NgControlStatus","RequiredValidator","NgModel","encapsulation","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","error","ɵɵelement","ɵɵproperty","name_r3","ɵɵtextInterpolate","email_r4","role_r5","ɵɵtwoWayListener","$event","ɵɵrestoreView","_r2","ɵɵnextContext","i0","ɵɵtwoWayBindingSet","filterValues","global","ɵɵresetView","ɵɵlistener","applyFilter","firstName","ɵɵtemplate","MatComponentsComponent_div_12_mat_option_11_Template","email","MatComponentsComponent_div_12_mat_option_18_Template","role","MatComponentsComponent_div_12_mat_option_23_Template","startDate","endDate","ɵɵtwoWayProperty","uniqueFirstNames","autoEmail_r6","filteredEmails","roles","dateRangePicker_r7","user_r8","id","user_r9","user_r10","user_r11","ɵɵpipeBind2","user_r12","createdDate","user_r14","_r13","$implicit","openEditDialog","deleteUser","ɵɵelementContainerStart","MatComponentsComponent_div_13_th_3_Template","MatComponentsComponent_div_13_td_4_Template","MatComponentsComponent_div_13_th_6_Template","MatComponentsComponent_div_13_td_7_Template","MatComponentsComponent_div_13_th_9_Template","MatComponentsComponent_div_13_td_10_Template","MatComponentsComponent_div_13_th_12_Template","MatComponentsComponent_div_13_td_13_Template","MatComponentsComponent_div_13_th_15_Template","MatComponentsComponent_div_13_td_16_Template","MatComponentsComponent_div_13_th_18_Template","MatComponentsComponent_div_13_td_19_Template","MatComponentsComponent_div_13_tr_20_Template","MatComponentsComponent_div_13_tr_21_Template","dataSource","displayedColumns","MatComponentsComponent","userStore","inject","UserStore","dialog","MatDialog","cdr","ChangeDetectorRef","toastr","ToastrService","isLoading","pageSize","currentPage","filteredUsers","totalRecords","destroyEffect","MatTableDataSource","allEmails","sort","paginator","constructor","effect","paginatedUsers","filteredUsersLength","untracked","data","Set","users","map","user","filter","length","pageIndex","_updateChangeSubscription","markForCheck","ngAfterViewInit","filterPredicate","createFilterPredicate","_changePageSize","loadUsers","ngOnDestroy","destroy","JSON","parse","globalSearch","toLowerCase","includes","firstNameSearch","emailSearch","roleSearch","dateSearch","Date","stringify","setPage","filteredLength","openAddDialog","open","UserDialogComponent","width","maxWidth","afterClosed","subscribe","result","addUser","success","sortUsers","syncPaginator","console","warn","updateUser","totalPages","validPage","Math","min","max","refreshTable","setSearchQuery","onPageChange","event","setPageSize","trackById","index","selectors","viewQuery","rf","ctx","MatSort","MatPaginator","MatComponentsComponent_div_10_Template","MatComponentsComponent_div_11_Template","MatComponentsComponent_div_12_Template","MatComponentsComponent_div_13_Template","ɵɵpureFunction0","_c0","CommonModule","NgForOf","NgIf","DatePipe","FormsModule","DefaultValueAccessor","NgControlStatus","NgModel","MatTableModule","MatTable","MatHeaderCellDef","MatHeaderRowDef","MatColumnDef","MatCellDef","MatRowDef","MatHeaderCell","MatCell","MatHeaderRow","MatRow","MatSortModule","MatSortHeader","MatPaginatorModule","MatDialogModule","MatFormFieldModule","MatFormField","MatLabel","MatSuffix","MatInputModule","MatInput","MatButtonModule","MatButton","MatIconButton","MatIconModule","MatIcon","MatCardModule","MatSelectModule","MatSelect","MatOption","MatDatepickerModule","MatDatepickerToggle","MatDateRangeInput","MatStartDate","MatEndDate","MatDateRangePicker","MatNativeDateModule","MatToolbarModule","MatToolbar","MatProgressSpinnerModule","MatProgressSpinner","MatAutocompleteModule","MatAutocomplete","MatAutocompleteTrigger","encapsulation"],"x_google_ignoreList":[0,1,2,3,4,5]}