{
  "version": 3,
  "sources": ["src/app/services/dark-mode.service.ts"],
  "sourcesContent": ["import { Injectable, computed, signal } from '@angular/core';\r\n\r\nexport interface Theme {\r\n  name: 'light' | 'dark' | 'system';\r\n  icon: string;\r\n}\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class DarkModeService {\r\n  private theme = signal<'light' | 'dark' | 'system'>('system');\r\n  private themes: Theme[] = [\r\n    { name: 'light', icon: 'light_mode' },\r\n    { name: 'dark', icon: 'dark_mode' },\r\n    { name: 'system', icon: 'desktop_windows' }\r\n  ];\r\n\r\n  selectedTheme = computed(() => this.themes.find(t => t.name === this.theme())!);\r\n  isDarkMode = computed(() => {\r\n    if (this.theme() === 'system') {\r\n      return window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    }\r\n    return this.theme() === 'dark';\r\n  });\r\n\r\n  constructor() {\r\n    this.initializeTheme();\r\n    // Listen for system theme changes when in system mode\r\n    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', () => {\r\n      if (this.theme() === 'system') {\r\n        this.applyTheme();\r\n      }\r\n    });\r\n  }\r\n\r\n  private initializeTheme() {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    this.theme.set(savedTheme as 'light' | 'dark' | 'system' || 'system');\r\n    this.applyTheme();\r\n  }\r\n\r\n  setTheme(theme: 'light' | 'dark' | 'system') {\r\n    this.theme.set(theme);\r\n    localStorage.setItem('theme', theme);\r\n    this.applyTheme();\r\n  }\r\n\r\n  getThemes() {\r\n    return this.themes;\r\n  }\r\n\r\n  public applyTheme() {\r\n    const isDark = this.isDarkMode();\r\n    // Toggle dark/light theme classes on the body\r\n    document.body.classList.toggle('dark-theme', isDark);\r\n    document.body.classList.toggle('light-theme', !isDark);\r\n    document.body.setAttribute('data-theme', isDark ? 'dark-theme' : 'light-theme');\r\n  }\r\n\r\n  isVisible() {\r\n    return true; // Theme toggle is always visible\r\n  }\r\n}"],
  "mappings": "yDAUA,IAAaA,GAAe,IAAA,CAAtB,MAAOA,CAAe,CAClBC,MAAQC,EAAoC,QAAQ,EACpDC,OAAkB,CACxB,CAAEC,KAAM,QAASC,KAAM,YAAY,EACnC,CAAED,KAAM,OAAQC,KAAM,WAAW,EACjC,CAAED,KAAM,SAAUC,KAAM,iBAAiB,CAAE,EAG7CC,cAAgBC,EAAS,IAAM,KAAKJ,OAAOK,KAAKC,GAAKA,EAAEL,OAAS,KAAKH,MAAK,CAAE,CAAE,EAC9ES,WAAaH,EAAS,IAChB,KAAKN,MAAK,IAAO,SACZU,OAAOC,YAAcD,OAAOC,WAAW,8BAA8B,EAAEC,QAEzE,KAAKZ,MAAK,IAAO,MACzB,EAEDa,aAAA,CACE,KAAKC,gBAAe,EAEpBJ,OAAOC,WAAW,8BAA8B,EAAEI,iBAAiB,SAAU,IAAK,CAC5E,KAAKf,MAAK,IAAO,UACnB,KAAKgB,WAAU,CAEnB,CAAC,CACH,CAEQF,iBAAe,CACrB,IAAMG,EAAaC,aAAaC,QAAQ,OAAO,EAC/C,KAAKnB,MAAMoB,IAAIH,GAA6C,QAAQ,EACpE,KAAKD,WAAU,CACjB,CAEAK,SAASrB,EAAkC,CACzC,KAAKA,MAAMoB,IAAIpB,CAAK,EACpBkB,aAAaI,QAAQ,QAAStB,CAAK,EACnC,KAAKgB,WAAU,CACjB,CAEAO,WAAS,CACP,OAAO,KAAKrB,MACd,CAEOc,YAAU,CACf,IAAMQ,EAAS,KAAKf,WAAU,EAE9BgB,SAASC,KAAKC,UAAUC,OAAO,aAAcJ,CAAM,EACnDC,SAASC,KAAKC,UAAUC,OAAO,cAAe,CAACJ,CAAM,EACrDC,SAASC,KAAKG,aAAa,aAAcL,EAAS,aAAe,aAAa,CAChF,CAEAM,WAAS,CACP,MAAO,EACT,4CApDW/B,EAAe,6BAAfA,EAAegC,QAAfhC,EAAeiC,UAAAC,WAFd,MAAM,CAAA,SAEPlC,CAAe,GAAA",
  "names": ["DarkModeService", "theme", "signal", "themes", "name", "icon", "selectedTheme", "computed", "find", "t", "isDarkMode", "window", "matchMedia", "matches", "constructor", "initializeTheme", "addEventListener", "applyTheme", "savedTheme", "localStorage", "getItem", "set", "setTheme", "setItem", "getThemes", "isDark", "document", "body", "classList", "toggle", "setAttribute", "isVisible", "factory", "\u0275fac", "providedIn"]
}
