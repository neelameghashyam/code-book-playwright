{
  "version": 3,
  "sources": ["src/app/pages/categories/add-categories/add-categories.component.ts", "src/app/pages/categories/add-categories/add-categories.component.html", "src/app/pages/categories/categories.component.ts", "src/app/pages/categories/categories.component.html"],
  "sourcesContent": ["import { Component, OnInit, Inject } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatIconModule } from '@angular/material/icon'; // Fixed import\r\nimport { MAT_DIALOG_DATA, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { Category } from '../category';\r\n\r\n@Component({\r\n  selector: 'app-add-categories',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule, // Use ReactiveFormsModule instead of FormsModule\r\n    MatButtonModule,\r\n    MatIconModule, // Correct module for MatIcon\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatDialogModule,\r\n  ],\r\n  templateUrl: './add-categories.component.html',\r\n  styleUrls: ['./add-categories.component.scss'],\r\n})\r\nexport class AddCategoriesComponent implements OnInit {\r\n  categoryForm: FormGroup;\r\n\r\n  constructor(\r\n    private fb: FormBuilder, // Standard injection\r\n    public dialogRef: MatDialogRef<AddCategoriesComponent>,\r\n    @Inject(MAT_DIALOG_DATA) public data: { category?: Category | null } = {}\r\n  ) {\r\n    this.categoryForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      icon: ['', Validators.required],\r\n      imageUrl: ['', Validators.required],\r\n      comments: [''],\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    if (this.data?.category) {\r\n      this.categoryForm.patchValue(this.data.category);\r\n    }\r\n  }\r\n\r\n  saveCategory() {\r\n    if (this.categoryForm.invalid) {\r\n      this.categoryForm.markAllAsTouched();\r\n      return;\r\n    }\r\n    this.dialogRef.close(this.categoryForm.value);\r\n  }\r\n\r\n  cancel() {\r\n    this.dialogRef.close();\r\n  }\r\n}", "<mat-card class=\"p-6 bg-white dark:bg-gray-800 shadow-3xl rounded-lg\">\r\n  <mat-card-header>\r\n    <button (click)=\"cancel()\" class=\"absolute top-0 right-0 flex justify-center items-center p-2 rounded-full hover:bg-gray-100\">\r\n      <mat-icon>close</mat-icon>\r\n    </button>\r\n    <mat-card-title class=\"flex justify-between items-center\">\r\n      <h2 class=\"text-2xl font-bold text-gray-900 dark:text-gray-100\" style=\"font-family: 'Roboto, sans-serif';\">\r\n        {{ data?.category ? 'Edit Category' : 'Add Category' }}\r\n      </h2>\r\n    </mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    \r\n    <form [formGroup]=\"categoryForm\" (ngSubmit)=\"saveCategory()\">\r\n      <div class=\"grid grid-cols-2 gap-4\">\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Name</mat-label>\r\n            <input matInput formControlName=\"name\" required placeholder=\"Category Name\">\r\n            <mat-error *ngIf=\"categoryForm.get('name')?.hasError('required') && categoryForm.get('name')?.touched\">\r\n              Category Name is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Icon</mat-label>\r\n            <input matInput formControlName=\"icon\" required placeholder=\"Material Icon Name (e.g., star)\">\r\n            <mat-error *ngIf=\"categoryForm.get('icon')?.hasError('required') && categoryForm.get('icon')?.touched\">\r\n              Icon is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Image URL</mat-label>\r\n            <input matInput formControlName=\"imageUrl\" required placeholder=\"Image URL\">\r\n            <mat-error *ngIf=\"categoryForm.get('imageUrl')?.hasError('required') && categoryForm.get('imageUrl')?.touched\">\r\n              Image URL is required\r\n            </mat-error>\r\n          </mat-form-field>\r\n        </div>\r\n        <div class=\"flex flex-col min-h-[6rem]\">\r\n          <mat-form-field>\r\n            <mat-label>Comments</mat-label>\r\n            <input matInput formControlName=\"comments\" placeholder=\"Comments\">\r\n          </mat-form-field>\r\n        </div>\r\n      </div>\r\n      <div class=\"mt-4 flex justify-end gap-2\">\r\n        <button\r\n          mat-button\r\n          type=\"button\"\r\n          (click)=\"cancel()\"\r\n          class=\"bg-gray-300 text-gray-800 px-4 py-2 rounded-lg hover:bg-gray-400 transition\"\r\n          style=\"font-family: 'Roboto, sans-serif';\"\r\n          aria-label=\"Cancel category form\"\r\n        >\r\n          Cancel\r\n        </button>\r\n        <button\r\n          mat-raised-button\r\n          color=\"primary\"\r\n          type=\"submit\"\r\n          [disabled]=\"categoryForm.invalid\"\r\n          class=\"hover:bg-blue-700 transition\"\r\n          style=\"font-family: 'Roboto, sans-serif';\"\r\n          [attr.aria-label]=\"data?.category ? 'Update category' : 'Save category'\"\r\n        >\r\n          {{ data?.category ? 'Update' : 'Save' }}\r\n        </button>\r\n      </div>\r\n    </form>\r\n  </mat-card-content>\r\n</mat-card>", "import { Component, inject, ViewChild, OnInit, OnDestroy } from '@angular/core';\r\nimport { CategoriesService } from './categories.service';\r\nimport { Category } from './category';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatPaginator, MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatIcon } from '@angular/material/icon';\r\nimport { MatDialog, MatDialogModule, MatDialogConfig } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { MatMenuModule } from '@angular/material/menu';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { AddCategoriesComponent } from './add-categories/add-categories.component';\r\nimport { DarkModeService } from '../../services/dark-mode.service';\r\nimport { ResponsiveService } from '../../services/responsive/responsive.service';\r\nimport { Subscription } from 'rxjs';\r\n\r\n@Component({\r\n  selector: 'app-categories',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    MatTableModule,\r\n    MatButtonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatPaginatorModule,\r\n    MatIcon,\r\n    MatDialogModule,\r\n    MatProgressSpinnerModule,\r\n    MatCardModule,\r\n    MatCheckboxModule,\r\n    MatMenuModule,\r\n    MatSelectModule,\r\n  ],\r\n  templateUrl: './categories.component.html',\r\n  styleUrls: ['./categories.component.scss'],\r\n})\r\nexport class CategoriesComponent implements OnInit, OnDestroy {\r\n  service = inject(CategoriesService);\r\n  dialog = inject(MatDialog);\r\n  responsive = inject(ResponsiveService);\r\n  darkModeService = inject(DarkModeService);\r\n\r\n  editingCategory: Category | null = null;\r\n  selectedCategories: Category[] = [];\r\n  displayedColumns: string[] = [];\r\n  sortField: string | null = null;\r\n  sortDirection: 'asc' | 'desc' = 'asc';\r\n  isMobile: boolean = false;\r\n  isTablet: boolean = false;\r\n  breakpointSubscription: Subscription | undefined;\r\n\r\n  @ViewChild(MatPaginator) paginator!: MatPaginator;\r\n\r\n  ngOnInit() {\r\n    this.breakpointSubscription = this.responsive.currentBreakpoint().subscribe(breakpoint => {\r\n      this.isMobile = breakpoint === 'xsmall';\r\n      this.isTablet = breakpoint === 'small' || breakpoint === 'medium';\r\n      this.updateDisplayedColumns();\r\n    });\r\n    this.darkModeService.applyTheme();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.breakpointSubscription?.unsubscribe();\r\n  }\r\n\r\n  updateDisplayedColumns() {\r\n    if (this.isMobile) {\r\n      this.displayedColumns = ['name', 'icon', 'actions'];\r\n    } else if (this.isTablet) {\r\n      this.displayedColumns = ['select', 'name', 'icon', 'imageUrl', 'actions'];\r\n    } else {\r\n      this.displayedColumns = ['select', 'name', 'icon', 'imageUrl', 'createdAt', 'modifiedAt', 'comments', 'actions'];\r\n    }\r\n  }\r\n\r\n  refreshTable() {\r\n    this.sortField = null;\r\n    this.sortDirection = 'asc';\r\n    this.service.sortCategories(null, 'asc');\r\n    this.service.setPage(1);\r\n    this.service.setSearchQuery('');\r\n    this.selectedCategories = [];\r\n    const searchInput = document.getElementById('searchCategories') as HTMLInputElement;\r\n    if (searchInput) {\r\n      searchInput.value = '';\r\n    }\r\n    this.service.getCategories();\r\n  }\r\n\r\n  private openCategoryDialog(config: MatDialogConfig) {\r\n    const dialogWidth = this.isMobile ? '90vw' : this.isTablet ? '80vw' : '800px';\r\n    const defaultConfig: MatDialogConfig = {\r\n      width: dialogWidth,\r\n      maxWidth: '100vw',\r\n      disableClose: false,\r\n      hasBackdrop: true,\r\n    };\r\n    return this.dialog.open(AddCategoriesComponent, { ...defaultConfig, ...config });\r\n  }\r\n\r\n  openAddCategoryDialog() {\r\n    this.openCategoryDialog({ data: {} }).afterClosed().subscribe(result => {\r\n      if (result) this.service.addCategory(result);\r\n    });\r\n  }\r\n\r\n  startEdit(category: Category) {\r\n    this.editingCategory = { ...category };\r\n    this.openCategoryDialog({ data: { category: this.editingCategory } }).afterClosed().subscribe(result => {\r\n      if (result) this.service.updateCategory(result as Category);\r\n      this.editingCategory = null;\r\n    });\r\n  }\r\n\r\n  onSearchQueryChange(event: Event) {\r\n    const inputElement = event.target as HTMLInputElement;\r\n    this.service.setSearchQuery(inputElement.value);\r\n  }\r\n\r\n  onPageChange(event: any) {\r\n    this.service.setPage(event.pageIndex + 1);\r\n    this.selectedCategories = [];\r\n  }\r\n\r\n  sortColumn(field: string, direction: 'asc' | 'desc') {\r\n    this.sortField = field;\r\n    this.sortDirection = direction;\r\n    this.service.sortCategories(this.sortField, this.sortDirection);\r\n  }\r\n\r\n  toggleCategory(category: Category) {\r\n    const index = this.selectedCategories.findIndex(c => c.id === category.id);\r\n    if (index === -1) {\r\n      this.selectedCategories.push(category);\r\n    } else {\r\n      this.selectedCategories.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  isSelected(category: Category): boolean {\r\n    return this.selectedCategories.some(c => c.id === category.id);\r\n  }\r\n\r\n  toggleAllCategories(checked: boolean) {\r\n    if (checked) {\r\n      this.selectedCategories = [...this.service.paginatedCategories()];\r\n    } else {\r\n      this.selectedCategories = [];\r\n    }\r\n  }\r\n\r\n  isAllSelected(): boolean {\r\n    return this.service.paginatedCategories().length > 0 &&\r\n           this.service.paginatedCategories().every(category => this.isSelected(category));\r\n  }\r\n\r\n  deleteSelectedCategories() {\r\n    this.selectedCategories.forEach(category => this.service.deleteCategory(category.id));\r\n    this.selectedCategories = [];\r\n  }\r\n\r\n  getPageNumbers(): number[] {\r\n    const totalPages = this.service.totalPages();\r\n    const currentPage = this.service.currentPage();\r\n    const maxPagesToShow = this.isMobile ? 3 : this.isTablet ? 4 : 5;\r\n    let startPage = Math.max(1, currentPage - Math.floor(maxPagesToShow / 2));\r\n    let endPage = Math.min(totalPages, startPage + maxPagesToShow - 1);\r\n\r\n    if (endPage - startPage + 1 < maxPagesToShow) {\r\n      startPage = Math.max(1, endPage - maxPagesToShow + 1);\r\n    }\r\n\r\n    const pages: number[] = [];\r\n    if (totalPages > 0) {\r\n      for (let i = startPage; i <= endPage; i++) {\r\n        pages.push(i);\r\n      }\r\n    }\r\n    return pages;\r\n  }\r\n\r\n  trackById(index: number, category: Category | null): number | undefined {\r\n    return category ? category.id : undefined;\r\n  }\r\n}", "<mat-card class=\"shadow-3xl rounded-8\" style=\"font-family: 'Roboto, sans-serif';\">\r\n  <mat-card-header class=\"relative flex items-center justify-between flex-col md:flex-row gap-4\" style=\"background-color: #2c3e50; color: #f7f7f7; font-family: 'Roboto, sans-serif'; padding: 16px;\">\r\n    <mat-card-title class=\"flex items-center\">\r\n      <h2 class=\"text-20 font-semibold m-0\" style=\"font-family: 'Roboto, sans-serif';\">Categories</h2>\r\n    </mat-card-title>\r\n\r\n    <div class=\"flex items-center w-full md:w-1/3\">\r\n      <input\r\n        id=\"searchCategories\"\r\n        type=\"text\"\r\n        (input)=\"onSearchQueryChange($event)\"\r\n        placeholder=\"Search categories...\"\r\n        class=\"p-2 border rounded text-sm w-full focus:outline-none h-9\"\r\n        style=\"font-family: 'Roboto, sans-serif'; border-color: #ced4da; background-color: #fff;\"\r\n        aria-label=\"Search categories\"\r\n      />\r\n    </div>\r\n\r\n    <div class=\"flex gap-2\">\r\n      <button\r\n        mat-raised-button\r\n        class=\"px-4 py-2 text-14 flex items-center\"\r\n        (click)=\"deleteSelectedCategories()\"\r\n        [disabled]=\"!selectedCategories.length\"\r\n        aria-label=\"Delete selected categories\"\r\n        style=\"background-color: #dc3545; color: white; font-family: 'Roboto, sans-serif';\"\r\n      >\r\n        <mat-icon [style.color]=\"'#FFFFFF'\">delete</mat-icon> Delete\r\n      </button>\r\n      <button\r\n        mat-raised-button\r\n        class=\"px-4 py-2 text-14 flex items-center\"\r\n        (click)=\"openAddCategoryDialog()\"\r\n        aria-label=\"Add new category\"\r\n        style=\"background-color: #28a745; color: white; font-family: 'Roboto, sans-serif';\"\r\n      >\r\n        <mat-icon [style.color]=\"'#FFFFFF'\">add</mat-icon> Add Category\r\n      </button>\r\n    </div>\r\n  </mat-card-header>\r\n\r\n  <mat-card-content class=\"relative\" style=\"font-family: 'Roboto, sans-serif';\">\r\n    <div\r\n      *ngIf=\"service.error()\"\r\n      class=\"mb-16 p-16 rounded-8\"\r\n      style=\"color: var(--mat-sys-error); background-color: color-mix(in srgb, var(--mat-sys-error), transparent 90%); font-family: 'Roboto, sans-serif';\"\r\n      role=\"alert\"\r\n    >\r\n      Error: {{ service.error() }}. Please try again or contact support.\r\n    </div>\r\n\r\n    <div *ngIf=\"service.isLoading()\" class=\"text-center mb-16\">\r\n      <mat-spinner diameter=\"40\" style=\"color: var(--mat-sys-on-surface);\"></mat-spinner>\r\n    </div>\r\n\r\n    <div *ngIf=\"!service.isLoading()\" class=\"table-container\" [class.dark-theme]=\"darkModeService.isDarkMode()\">\r\n      <mat-table [dataSource]=\"service.paginatedCategories()\" role=\"grid\" class=\"w-full\">\r\n        <ng-container matColumnDef=\"select\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8\" data-label=\"Select\">\r\n            <mat-checkbox\r\n              (change)=\"toggleAllCategories($event.checked)\"\r\n              [checked]=\"isAllSelected()\"\r\n              [indeterminate]=\"selectedCategories.length > 0 && !isAllSelected()\"\r\n              aria-label=\"Select all categories\"\r\n            ></mat-checkbox>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8\" data-label=\"Select\">\r\n            <mat-checkbox\r\n              (change)=\"toggleCategory(category)\"\r\n              [checked]=\"isSelected(category)\"\r\n              aria-label=\"Select category\"\r\n            ></mat-checkbox>\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"name\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Name\">\r\n            Name\r\n            <button mat-icon-button [matMenuTriggerFor]=\"nameSortMenu\" *ngIf=\"sortField === 'name'\" aria-label=\"Sort name\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"nameSortMenu\" *ngIf=\"sortField !== 'name'\" aria-label=\"Sort name\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #nameSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('name', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('name', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Name\">{{ category.name }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"icon\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Icon\">Icon</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Icon\">\r\n            <mat-icon>{{ category.icon }}</mat-icon>\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"imageUrl\" *ngIf=\"!isMobile\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Image\">Image</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Image\">\r\n            <img [src]=\"category.imageUrl\" alt=\"Category Image\" class=\"w-28 h-28 object-cover rounded\" *ngIf=\"category.imageUrl\">\r\n          </mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"createdAt\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Created At\">\r\n            Created At\r\n            <button mat-icon-button [matMenuTriggerFor]=\"createdAtSortMenu\" *ngIf=\"sortField === 'createdAt'\" aria-label=\"Sort created at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"createdAtSortMenu\" *ngIf=\"sortField !== 'createdAt'\" aria-label=\"Sort created at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #createdAtSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('createdAt', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('createdAt', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Created At\">{{ category.createdAt | date:'short' }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"modifiedAt\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16 flex items-center\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Modified At\">\r\n            Modified At\r\n            <button mat-icon-button [matMenuTriggerFor]=\"modifiedAtSortMenu\" *ngIf=\"sortField === 'modifiedAt'\" aria-label=\"Sort modified at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <button mat-icon-button [matMenuTriggerFor]=\"modifiedAtSortMenu\" *ngIf=\"sortField !== 'modifiedAt'\" aria-label=\"Sort modified at\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">sort</mat-icon>\r\n            </button>\r\n            <mat-menu #modifiedAtSortMenu=\"matMenu\">\r\n              <button mat-menu-item (click)=\"sortColumn('modifiedAt', 'asc')\">Ascending</button>\r\n              <button mat-menu-item (click)=\"sortColumn('modifiedAt', 'desc')\">Descending</button>\r\n            </mat-menu>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Modified At\">{{ category.modifiedAt | date:'short' }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"comments\" *ngIf=\"responsive.isDesktop()\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Comments\">Comments</mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Comments\">{{ category.comments }}</mat-cell>\r\n        </ng-container>\r\n\r\n        <ng-container matColumnDef=\"actions\">\r\n          <mat-header-cell *matHeaderCellDef class=\"p-8 text-16\" style=\"font-family: 'Roboto, sans-serif';\" data-label=\"Actions\">\r\n            Actions\r\n            <button mat-icon-button (click)=\"refreshTable()\" aria-label=\"Refresh table\">\r\n              <mat-icon style=\"color: var(--mat-sys-primary);\">refresh</mat-icon>\r\n            </button>\r\n          </mat-header-cell>\r\n          <mat-cell *matCellDef=\"let category\" class=\"p-8\" data-label=\"Actions\">\r\n            <ng-container *ngIf=\"!isMobile; else mobileActions\">\r\n              <button\r\n                mat-icon-button\r\n                (click)=\"startEdit(category)\"\r\n                aria-label=\"Edit category\"\r\n                class=\"edit-button\"\r\n              >\r\n                <mat-icon>edit</mat-icon>\r\n              </button>\r\n              <button\r\n                mat-icon-button\r\n                (click)=\"service.deleteCategory(category.id)\"\r\n                aria-label=\"Delete category\"\r\n                class=\"delete-button\"\r\n              >\r\n                <mat-icon>delete</mat-icon>\r\n              </button>\r\n            </ng-container>\r\n            <ng-template #mobileActions>\r\n              <button mat-icon-button [matMenuTriggerFor]=\"actionMenu\" aria-label=\"Category actions\">\r\n                <mat-icon>more_vert</mat-icon>\r\n              </button>\r\n              <mat-menu #actionMenu=\"matMenu\">\r\n                <button mat-menu-item (click)=\"startEdit(category)\" aria-label=\"Edit category\">\r\n                  <mat-icon>edit</mat-icon> Edit\r\n                </button>\r\n                <button mat-menu-item (click)=\"service.deleteCategory(category.id)\" aria-label=\"Delete category\">\r\n                  <mat-icon>delete</mat-icon> Delete\r\n                </button>\r\n              </mat-menu>\r\n            </ng-template>\r\n          </mat-cell>\r\n        </ng-container>\r\n        <mat-header-row *matHeaderRowDef=\"displayedColumns\" class=\"divide-y table-header\"></mat-header-row>\r\n        <mat-row *matRowDef=\"let row; columns: displayedColumns;\" class=\"divide-y table-row\" [attr.aria-label]=\"'Category row ' + row.id\"></mat-row>\r\n      </mat-table>\r\n\r\n      <div class=\"flex justify-between items-center p-4 pagination-container\" style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\">\r\n        <span class=\"text-12\">\r\n          Showing {{ (service.currentPage() - 1) * service.pageSize() + 1 }} to \r\n          {{ (service.currentPage() - 1) * service.pageSize() + service.paginatedCategories().length }} of {{ service.filteredCategories().length }} entries\r\n        </span>\r\n        <div class=\"flex gap-4 items-center\">\r\n          <button\r\n            mat-button\r\n            (click)=\"onPageChange({ pageIndex: service.currentPage() - 2 })\"\r\n            [disabled]=\"service.currentPage() === 1\"\r\n            class=\"px-4 py-2 rounded-4 pagination-button\"\r\n            style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\"\r\n            aria-label=\"Previous page\"\r\n          >\r\n            Previous\r\n          </button>\r\n          <ng-container *ngIf=\"!isMobile; else mobilePagination\">\r\n            <ng-container *ngIf=\"getPageNumbers().length > 0; else noPages\">\r\n              <button\r\n                *ngFor=\"let page of getPageNumbers()\"\r\n                mat-button\r\n                (click)=\"onPageChange({ pageIndex: page - 1 })\"\r\n                [class.bg-blue-600]=\"service.currentPage() === page\"\r\n                class=\"px-4 py-2 rounded-4 pagination-button\"\r\n                [style.color]=\"service.currentPage() === page ? 'var(--mat-sys-on-primary)' : 'var(--mat-sys-on-surface)'\"\r\n                [style.background-color]=\"service.currentPage() === page ? 'var(--mat-sys-primary)' : 'transparent'\"\r\n                [attr.aria-label]=\"'Page ' + page\"\r\n              >\r\n                {{ page }}\r\n              </button>\r\n            </ng-container>\r\n            <ng-template #noPages>\r\n              <span class=\"text-12\">No pages available</span>\r\n            </ng-template>\r\n          </ng-container>\r\n          <ng-template #mobilePagination>\r\n            <mat-select\r\n              (selectionChange)=\"onPageChange({ pageIndex: $event.value - 1 })\"\r\n              [value]=\"service.currentPage()\"\r\n              class=\"w-20 pagination-select\"\r\n              aria-label=\"Select page\"\r\n            >\r\n              <mat-option *ngFor=\"let page of getPageNumbers()\" [value]=\"page\">\r\n                {{ page }}\r\n              </mat-option>\r\n              <mat-option *ngIf=\"getPageNumbers().length === 0\" disabled>No pages available</mat-option>\r\n            </mat-select>\r\n          </ng-template>\r\n          <button\r\n            mat-button\r\n            (click)=\"onPageChange({ pageIndex: service.currentPage() })\"\r\n            [disabled]=\"service.currentPage() === service.totalPages() || service.totalPages() === 0\"\r\n            class=\"px-4 py-2 rounded-4 pagination-button\"\r\n            style=\"color: var(--mat-sys-on-surface); font-family: 'Roboto, sans-serif';\"\r\n            aria-label=\"Next page\"\r\n          >\r\n            Next\r\n          </button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </mat-card-content>\r\n</mat-card>"],
  "mappings": "ysCCmBYA,EAAA,EAAA,WAAA,EACEC,EAAA,EAAA,6BAAA,EACFC,EAAA,0BAOAF,EAAA,EAAA,WAAA,EACEC,EAAA,EAAA,oBAAA,EACFC,EAAA,0BAOAF,EAAA,EAAA,WAAA,EACEC,EAAA,EAAA,yBAAA,EACFC,EAAA,GDXZ,IAAaC,IAAsB,IAAA,CAA7B,MAAOA,CAAsB,CAIvBC,GACDC,UACyBC,KALlCC,aAEAC,YACUJ,EACDC,EACyBC,EAAuC,CAAA,EAAE,CAFjE,KAAAF,GAAAA,EACD,KAAAC,UAAAA,EACyB,KAAAC,KAAAA,EAEhC,KAAKC,aAAe,KAAKH,GAAGK,MAAM,CAChCC,KAAM,CAAC,GAAIC,EAAWC,QAAQ,EAC9BC,KAAM,CAAC,GAAIF,EAAWC,QAAQ,EAC9BE,SAAU,CAAC,GAAIH,EAAWC,QAAQ,EAClCG,SAAU,CAAC,EAAE,EACd,CACH,CAEAC,UAAQ,CACF,KAAKV,MAAMW,UACb,KAAKV,aAAaW,WAAW,KAAKZ,KAAKW,QAAQ,CAEnD,CAEAE,cAAY,CACV,GAAI,KAAKZ,aAAaa,QAAS,CAC7B,KAAKb,aAAac,iBAAgB,EAClC,MACF,CACA,KAAKhB,UAAUiB,MAAM,KAAKf,aAAagB,KAAK,CAC9C,CAEAC,QAAM,CACJ,KAAKnB,UAAUiB,MAAK,CACtB,4CAhCWnB,GAAsBsB,EAAAC,EAAA,EAAAD,EAAAE,EAAA,EAAAF,EAMvBG,EAAe,CAAA,CAAA,2BANdzB,EAAsB0B,UAAA,CAAA,CAAA,oBAAA,CAAA,EAAAC,MAAA,GAAAC,KAAA,EAAAC,OAAA,CAAA,CAAA,EAAA,MAAA,WAAA,mBAAA,aAAA,YAAA,EAAA,CAAA,EAAA,WAAA,QAAA,UAAA,OAAA,iBAAA,eAAA,MAAA,eAAA,oBAAA,EAAA,OAAA,EAAA,CAAA,EAAA,OAAA,kBAAA,cAAA,EAAA,CAAA,EAAA,WAAA,YAAA,gBAAA,qBAAA,EAAA,cAAA,sBAAA,EAAA,CAAA,EAAA,WAAA,WAAA,EAAA,CAAA,EAAA,OAAA,cAAA,OAAA,EAAA,CAAA,EAAA,OAAA,WAAA,cAAA,EAAA,CAAA,WAAA,GAAA,kBAAA,OAAA,WAAA,GAAA,cAAA,eAAA,EAAA,CAAA,EAAA,MAAA,EAAA,CAAA,WAAA,GAAA,kBAAA,OAAA,WAAA,GAAA,cAAA,iCAAA,EAAA,CAAA,WAAA,GAAA,kBAAA,WAAA,WAAA,GAAA,cAAA,WAAA,EAAA,CAAA,WAAA,GAAA,kBAAA,WAAA,cAAA,UAAA,EAAA,CAAA,EAAA,OAAA,OAAA,cAAA,OAAA,EAAA,CAAA,aAAA,GAAA,OAAA,SAAA,aAAA,uBAAA,EAAA,cAAA,gBAAA,OAAA,OAAA,aAAA,oBAAA,aAAA,EAAA,cAAA,uBAAA,EAAA,OAAA,EAAA,CAAA,oBAAA,GAAA,QAAA,UAAA,OAAA,SAAA,EAAA,oBAAA,aAAA,EAAA,cAAA,uBAAA,EAAA,UAAA,CAAA,EAAAC,SAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,IC5BnClC,EAAA,EAAA,WAAA,CAAA,EAAsE,EAAA,iBAAA,EACnD,EAAA,SAAA,CAAA,EACPoC,EAAA,QAAA,UAAA,CAAA,OAASD,EAAAX,OAAA,CAAQ,CAAA,EACvBxB,EAAA,EAAA,UAAA,EAAUC,EAAA,EAAA,OAAA,EAAKC,EAAA,EAAW,EAE5BF,EAAA,EAAA,iBAAA,CAAA,EAA0D,EAAA,KAAA,CAAA,EAEtDC,EAAA,CAAA,EACFC,EAAA,EAAK,EACU,EAEnBF,EAAA,EAAA,kBAAA,EAAkB,EAAA,OAAA,CAAA,EAEiBoC,EAAA,WAAA,UAAA,CAAA,OAAYD,EAAAhB,aAAA,CAAc,CAAA,EACzDnB,EAAA,GAAA,MAAA,CAAA,EAAoC,GAAA,MAAA,CAAA,EACM,GAAA,gBAAA,EACtB,GAAA,WAAA,EACHC,EAAA,GAAA,MAAA,EAAIC,EAAA,EACfmC,EAAA,GAAA,QAAA,CAAA,EACAC,EAAA,GAAAC,GAAA,EAAA,EAAA,YAAA,CAAA,EAGFrC,EAAA,EAAiB,EAEnBF,EAAA,GAAA,MAAA,CAAA,EAAwC,GAAA,gBAAA,EACtB,GAAA,WAAA,EACHC,EAAA,GAAA,MAAA,EAAIC,EAAA,EACfmC,EAAA,GAAA,QAAA,CAAA,EACAC,EAAA,GAAAE,GAAA,EAAA,EAAA,YAAA,CAAA,EAGFtC,EAAA,EAAiB,EAEnBF,EAAA,GAAA,MAAA,CAAA,EAAwC,GAAA,gBAAA,EACtB,GAAA,WAAA,EACHC,EAAA,GAAA,WAAA,EAASC,EAAA,EACpBmC,EAAA,GAAA,QAAA,EAAA,EACAC,EAAA,GAAAG,GAAA,EAAA,EAAA,YAAA,CAAA,EAGFvC,EAAA,EAAiB,EAEnBF,EAAA,GAAA,MAAA,CAAA,EAAwC,GAAA,gBAAA,EACtB,GAAA,WAAA,EACHC,EAAA,GAAA,UAAA,EAAQC,EAAA,EACnBmC,EAAA,GAAA,QAAA,EAAA,EACFnC,EAAA,EAAiB,EACb,EAERF,EAAA,GAAA,MAAA,EAAA,EAAyC,GAAA,SAAA,EAAA,EAIrCoC,EAAA,QAAA,UAAA,CAAA,OAASD,EAAAX,OAAA,CAAQ,CAAA,EAKjBvB,EAAA,GAAA,UAAA,EACFC,EAAA,EACAF,EAAA,GAAA,SAAA,EAAA,EASEC,EAAA,EAAA,EACFC,EAAA,EAAS,EACL,EACD,EACU,kBAlEbwC,EAAA,CAAA,EAAAC,EAAA,IAAAR,EAAA7B,MAAA,MAAA6B,EAAA7B,KAAAW,SAAA,gBAAA,eAAA,GAAA,EAMEyB,EAAA,CAAA,EAAAE,EAAA,YAAAT,EAAA5B,YAAA,EAMcmC,EAAA,CAAA,EAAAE,EAAA,SAAAC,EAAAV,EAAA5B,aAAAuC,IAAA,MAAA,IAAA,KAAA,KAAAD,EAAAE,SAAA,UAAA,MAAAF,EAAAV,EAAA5B,aAAAuC,IAAA,MAAA,IAAA,KAAA,KAAAD,EAAAG,QAAA,EASAN,EAAA,CAAA,EAAAE,EAAA,SAAAK,EAAAd,EAAA5B,aAAAuC,IAAA,MAAA,IAAA,KAAA,KAAAG,EAAAF,SAAA,UAAA,MAAAE,EAAAd,EAAA5B,aAAAuC,IAAA,MAAA,IAAA,KAAA,KAAAG,EAAAD,QAAA,EASAN,EAAA,CAAA,EAAAE,EAAA,SAAAM,EAAAf,EAAA5B,aAAAuC,IAAA,UAAA,IAAA,KAAA,KAAAI,EAAAH,SAAA,UAAA,MAAAG,EAAAf,EAAA5B,aAAAuC,IAAA,UAAA,IAAA,KAAA,KAAAI,EAAAF,QAAA,EA2BdN,EAAA,CAAA,EAAAE,EAAA,WAAAT,EAAA5B,aAAAa,OAAA,kFAKAsB,EAAA,EAAAC,EAAA,IAAAR,EAAA7B,MAAA,MAAA6B,EAAA7B,KAAAW,SAAA,SAAA,OAAA,GAAA,kBDrDNkC,EAAYC,EACZC,GAAmBC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GACnBC,EAAeC,EACfC,GAAaC,EACbC,EAAkBC,GAAAC,GAAAC,GAClBC,EAAcC,GACdC,EAAaC,EAAAC,EAAAC,EAAAC,EACbC,CAAe,EAAAC,cAAA,CAAA,CAAA,SAKN1E,CAAsB,GAAA,4BGc/B2E,EAAA,EAAA,MAAA,EAAA,EAMEC,EAAA,CAAA,EACFC,EAAA,kBADEC,EAAA,EAAAC,EAAA,WAAAC,EAAAC,QAAAC,MAAA,EAAA,yCAAA,0BAGFP,EAAA,EAAA,MAAA,EAAA,EACEQ,EAAA,EAAA,cAAA,EAAA,EACFN,EAAA,sCAKMF,EAAA,EAAA,kBAAA,EAAA,EAAmE,EAAA,eAAA,EAAA,EAE/DS,EAAA,SAAA,SAAAC,EAAA,CAAAC,EAAAC,CAAA,EAAA,IAAAP,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAUT,EAAAU,oBAAAL,EAAAM,OAAA,CAAmC,CAAA,CAAA,EAI9Cd,EAAA,EAAe,qBAHdC,EAAA,EAAAc,EAAA,UAAAZ,EAAAa,cAAA,CAAA,EAA2B,gBAAAb,EAAAc,mBAAAC,OAAA,GAAA,CAAAf,EAAAa,cAAA,CAAA,sCAK/BlB,EAAA,EAAA,WAAA,EAAA,EAAqE,EAAA,eAAA,EAAA,EAEjES,EAAA,SAAA,UAAA,CAAA,IAAAY,EAAAV,EAAAW,CAAA,EAAAC,UAAAlB,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAUT,EAAAmB,eAAAH,CAAA,CAAwB,CAAA,CAAA,EAGnCnB,EAAA,EAAe,mCAFdC,EAAA,EAAAc,EAAA,UAAAZ,EAAAoB,WAAAJ,CAAA,CAAA,0BAZNK,EAAA,EAAA,EAAA,EACEC,EAAA,EAAAC,GAAA,EAAA,EAAA,kBAAA,EAAA,EAAmE,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,iCAoBjE7B,EAAA,EAAA,SAAA,EAAA,EAA+G,EAAA,WAAA,EAAA,EAC5DC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,uBAD1Ce,EAAA,oBAAAa,CAAA,6BAGxB9B,EAAA,EAAA,SAAA,EAAA,EAA+G,EAAA,WAAA,EAAA,EAC5DC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,uBAD1Ce,EAAA,oBAAAa,CAAA,sCAL1B9B,EAAA,EAAA,kBAAA,EAAA,EACEC,EAAA,EAAA,QAAA,EACA0B,EAAA,EAAAI,GAAA,EAAA,EAAA,SAAA,EAAA,EAA+G,EAAAC,GAAA,EAAA,EAAA,SAAA,EAAA,EAM/GhC,EAAA,EAAA,WAAA,KAAA,CAAA,EAAkC,EAAA,SAAA,EAAA,EACVS,EAAA,QAAA,UAAA,CAAAE,EAAAsB,CAAA,EAAA,IAAA5B,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA6B,WAAW,OAAQ,KAAK,CAAC,CAAA,CAAA,EAAEjC,EAAA,EAAA,WAAA,EAASC,EAAA,EACnEF,EAAA,EAAA,SAAA,EAAA,EAAsBS,EAAA,QAAA,UAAA,CAAAE,EAAAsB,CAAA,EAAA,IAAA5B,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA6B,WAAW,OAAQ,MAAM,CAAC,CAAA,CAAA,EAAEjC,EAAA,EAAA,YAAA,EAAUC,EAAA,EAAS,EACrE,qBATiDC,EAAA,CAAA,EAAAc,EAAA,OAAAZ,EAAA8B,YAAA,MAAA,EAGAhC,EAAA,EAAAc,EAAA,OAAAZ,EAAA8B,YAAA,MAAA,6BAQ9DnC,EAAA,EAAA,WAAA,EAAA,EAAsHC,EAAA,CAAA,EAAmBC,EAAA,0BAAnBC,EAAA,EAAAiC,EAAAC,EAAAC,IAAA,0BAItHtC,EAAA,EAAA,kBAAA,EAAA,EAAoHC,EAAA,EAAA,MAAA,EAAIC,EAAA,6BACxHF,EAAA,EAAA,WAAA,EAAA,EAAsH,EAAA,UAAA,EAC1GC,EAAA,CAAA,EAAmBC,EAAA,EAAW,0BAA9BC,EAAA,CAAA,EAAAiC,EAAAG,EAAAC,IAAA,0BAKZxC,EAAA,EAAA,kBAAA,EAAA,EAAqHC,EAAA,EAAA,OAAA,EAAKC,EAAA,4BAExHM,EAAA,EAAA,MAAA,EAAA,2BAAKS,EAAA,MAAAwB,EAAAC,SAAAC,CAAA,6BADP3C,EAAA,EAAA,WAAA,EAAA,EACE2B,EAAA,EAAAiB,GAAA,EAAA,EAAA,MAAA,EAAA,EACF1C,EAAA,0BAD8FC,EAAA,EAAAc,EAAA,OAAAwB,EAAAC,QAAA,0BAHhGhB,EAAA,EAAA,EAAA,EACEC,EAAA,EAAAkB,GAAA,EAAA,EAAA,kBAAA,EAAA,EAAqH,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,iCASnH9C,EAAA,EAAA,SAAA,EAAA,EAA+H,EAAA,WAAA,EAAA,EAC5EC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,uBAD1Ce,EAAA,oBAAA8B,CAAA,6BAGxB/C,EAAA,EAAA,SAAA,EAAA,EAA+H,EAAA,WAAA,EAAA,EAC5EC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,uBAD1Ce,EAAA,oBAAA8B,CAAA,sCAL1B/C,EAAA,EAAA,kBAAA,EAAA,EACEC,EAAA,EAAA,cAAA,EACA0B,EAAA,EAAAqB,GAAA,EAAA,EAAA,SAAA,EAAA,EAA+H,EAAAC,GAAA,EAAA,EAAA,SAAA,EAAA,EAM/HjD,EAAA,EAAA,WAAA,KAAA,CAAA,EAAuC,EAAA,SAAA,EAAA,EACfS,EAAA,QAAA,UAAA,CAAAE,EAAAuC,CAAA,EAAA,IAAA7C,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA6B,WAAW,YAAa,KAAK,CAAC,CAAA,CAAA,EAAEjC,EAAA,EAAA,WAAA,EAASC,EAAA,EACxEF,EAAA,EAAA,SAAA,EAAA,EAAsBS,EAAA,QAAA,UAAA,CAAAE,EAAAuC,CAAA,EAAA,IAAA7C,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA6B,WAAW,YAAa,MAAM,CAAC,CAAA,CAAA,EAAEjC,EAAA,EAAA,YAAA,EAAUC,EAAA,EAAS,EAC1E,qBATsDC,EAAA,CAAA,EAAAc,EAAA,OAAAZ,EAAA8B,YAAA,WAAA,EAGAhC,EAAA,EAAAc,EAAA,OAAAZ,EAAA8B,YAAA,WAAA,6BAQnEnC,EAAA,EAAA,WAAA,EAAA,EAA4HC,EAAA,CAAA,cAAuCC,EAAA,0BAAvCC,EAAA,EAAAiC,EAAAe,EAAA,EAAA,EAAAC,EAAAC,UAAA,OAAA,CAAA,0BAd9H3B,EAAA,EAAA,EAAA,EACEC,EAAA,EAAA2B,GAAA,GAAA,EAAA,kBAAA,EAAA,EAA4I,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,iCAmB1IvD,EAAA,EAAA,SAAA,EAAA,EAAkI,EAAA,WAAA,EAAA,EAC/EC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,uBAD1Ce,EAAA,oBAAAuC,CAAA,6BAGxBxD,EAAA,EAAA,SAAA,EAAA,EAAkI,EAAA,WAAA,EAAA,EAC/EC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,uBAD1Ce,EAAA,oBAAAuC,CAAA,sCAL1BxD,EAAA,EAAA,kBAAA,EAAA,EACEC,EAAA,EAAA,eAAA,EACA0B,EAAA,EAAA8B,GAAA,EAAA,EAAA,SAAA,EAAA,EAAkI,EAAAC,GAAA,EAAA,EAAA,SAAA,EAAA,EAMlI1D,EAAA,EAAA,WAAA,KAAA,CAAA,EAAwC,EAAA,SAAA,EAAA,EAChBS,EAAA,QAAA,UAAA,CAAAE,EAAAgD,CAAA,EAAA,IAAAtD,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA6B,WAAW,aAAc,KAAK,CAAC,CAAA,CAAA,EAAEjC,EAAA,EAAA,WAAA,EAASC,EAAA,EACzEF,EAAA,EAAA,SAAA,EAAA,EAAsBS,EAAA,QAAA,UAAA,CAAAE,EAAAgD,CAAA,EAAA,IAAAtD,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA6B,WAAW,aAAc,MAAM,CAAC,CAAA,CAAA,EAAEjC,EAAA,EAAA,YAAA,EAAUC,EAAA,EAAS,EAC3E,qBATuDC,EAAA,CAAA,EAAAc,EAAA,OAAAZ,EAAA8B,YAAA,YAAA,EAGAhC,EAAA,EAAAc,EAAA,OAAAZ,EAAA8B,YAAA,YAAA,6BAQpEnC,EAAA,EAAA,WAAA,EAAA,EAA6HC,EAAA,CAAA,cAAwCC,EAAA,0BAAxCC,EAAA,EAAAiC,EAAAe,EAAA,EAAA,EAAAS,EAAAC,WAAA,OAAA,CAAA,0BAd/HnC,EAAA,EAAA,EAAA,EACEC,EAAA,EAAAmC,GAAA,GAAA,EAAA,kBAAA,EAAA,EAA6I,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,8BAiB7I/D,EAAA,EAAA,kBAAA,EAAA,EAAwHC,EAAA,EAAA,UAAA,EAAQC,EAAA,6BAChIF,EAAA,EAAA,WAAA,EAAA,EAA0HC,EAAA,CAAA,EAAuBC,EAAA,0BAAvBC,EAAA,EAAAiC,EAAA4B,EAAAC,QAAA,0BAF5HvC,EAAA,EAAA,EAAA,EACEC,EAAA,EAAAuC,GAAA,EAAA,EAAA,kBAAA,EAAA,EAAwH,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,0CAKxHnE,EAAA,EAAA,kBAAA,EAAA,EACEC,EAAA,EAAA,WAAA,EACAD,EAAA,EAAA,SAAA,EAAA,EAAwBS,EAAA,QAAA,UAAA,CAAAE,EAAAyD,CAAA,EAAA,IAAA/D,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAAgE,aAAA,CAAc,CAAA,CAAA,EAC7CrE,EAAA,EAAA,WAAA,EAAA,EAAiDC,EAAA,EAAA,SAAA,EAAOC,EAAA,EAAW,EAC5D,sCAGTwB,EAAA,CAAA,EACE1B,EAAA,EAAA,SAAA,EAAA,EAEES,EAAA,QAAA,UAAA,CAAAE,EAAA2D,CAAA,EAAA,IAAAC,EAAA1D,EAAA,EAAAU,UAAAlB,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAAmE,UAAAD,CAAA,CAAmB,CAAA,CAAA,EAI5BvE,EAAA,EAAA,UAAA,EAAUC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAW,EAE3BF,EAAA,EAAA,SAAA,EAAA,EAEES,EAAA,QAAA,UAAA,CAAAE,EAAA2D,CAAA,EAAA,IAAAC,EAAA1D,EAAA,EAAAU,UAAAlB,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAAC,QAAAmE,eAAAF,EAAAG,EAAA,CAAmC,CAAA,CAAA,EAI5C1E,EAAA,EAAA,UAAA,EAAUC,EAAA,EAAA,QAAA,EAAMC,EAAA,EAAW,0CAI7BF,EAAA,EAAA,SAAA,EAAA,EAAuF,EAAA,UAAA,EAC3EC,EAAA,EAAA,WAAA,EAASC,EAAA,EAAW,EAEhCF,EAAA,EAAA,WAAA,KAAA,CAAA,EAAgC,EAAA,SAAA,EAAA,EACRS,EAAA,QAAA,UAAA,CAAAE,EAAAgE,CAAA,EAAA,IAAAJ,EAAA1D,EAAA,EAAAU,UAAAlB,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAAmE,UAAAD,CAAA,CAAmB,CAAA,CAAA,EAChDvE,EAAA,EAAA,UAAA,EAAUC,EAAA,EAAA,MAAA,EAAIC,EAAA,EAAYD,EAAA,EAAA,QAAA,EAC5BC,EAAA,EACAF,EAAA,EAAA,SAAA,EAAA,EAAsBS,EAAA,QAAA,UAAA,CAAAE,EAAAgE,CAAA,EAAA,IAAAJ,EAAA1D,EAAA,EAAAU,UAAAlB,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAAC,QAAAmE,eAAAF,EAAAG,EAAA,CAAmC,CAAA,CAAA,EAChE1E,EAAA,GAAA,UAAA,EAAUC,EAAA,GAAA,QAAA,EAAMC,EAAA,EAAYD,EAAA,GAAA,UAAA,EAC9BC,EAAA,EAAS,qBATae,EAAA,oBAAA2D,CAAA,6BApB5B5E,EAAA,EAAA,WAAA,EAAA,EACE2B,EAAA,EAAAkD,GAAA,EAAA,EAAA,eAAA,EAAA,EAAoD,EAAAC,GAAA,GAAA,EAAA,cAAA,KAAA,EAAAC,CAAA,EA+BtD7E,EAAA,0BA/BiBC,EAAA,EAAAc,EAAA,OAAA,CAAAZ,EAAA2E,QAAA,EAAiB,WAAAC,CAAA,yBAiCpCzE,EAAA,EAAA,iBAAA,EAAA,2BACAA,EAAA,EAAA,UAAA,EAAA,kGAqBMR,EAAA,EAAA,SAAA,EAAA,EAGES,EAAA,QAAA,UAAA,CAAA,IAAAyE,EAAAvE,EAAAwE,CAAA,EAAA5D,UAAAlB,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAST,EAAA+E,aAAa,CAAAC,UAAAH,EAAoB,CAAC,CAAE,CAAC,CAAA,CAAA,EAO9CjF,EAAA,CAAA,EACFC,EAAA,mCALEoF,EAAA,QAAAjF,EAAAC,QAAAiF,YAAA,IAAAL,EAAA,4BAAA,2BAAA,EAA0G,mBAAA7E,EAAAC,QAAAiF,YAAA,IAAAL,EAAA,yBAAA,aAAA,EAF1GM,EAAA,cAAAnF,EAAAC,QAAAiF,YAAA,IAAAL,CAAA,4BAMA/E,EAAA,EAAAC,EAAA,IAAA8E,EAAA,GAAA,6BAXJxD,EAAA,CAAA,EACEC,EAAA,EAAA8D,GAAA,EAAA,EAAA,SAAA,EAAA,uBACmBtF,EAAA,EAAAc,EAAA,UAAAZ,EAAAqF,eAAA,CAAA,0BAanB1F,EAAA,EAAA,OAAA,EAAA,EAAsBC,EAAA,EAAA,oBAAA,EAAkBC,EAAA,6BAhB5CwB,EAAA,CAAA,EACEC,EAAA,EAAAgE,GAAA,EAAA,EAAA,eAAA,EAAA,EAAgE,EAAAC,GAAA,EAAA,EAAA,cAAA,KAAA,EAAAb,CAAA,8BAAjD5E,EAAA,EAAAc,EAAA,OAAAZ,EAAAqF,eAAA,EAAAtE,OAAA,CAAA,EAAmC,WAAAyE,CAAA,6BAyBhD7F,EAAA,EAAA,aAAA,EAAA,EACEC,EAAA,CAAA,EACFC,EAAA,0BAFkDe,EAAA,QAAA6E,CAAA,EAChD3F,EAAA,EAAAC,EAAA,IAAA0F,EAAA,GAAA,0BAEF9F,EAAA,EAAA,aAAA,GAAA,EAA2DC,EAAA,EAAA,oBAAA,EAAkBC,EAAA,sCAT/EF,EAAA,EAAA,aAAA,EAAA,EACES,EAAA,kBAAA,SAAAC,EAAA,CAAAC,EAAAoF,CAAA,EAAA,IAAA1F,EAAAQ,EAAA,CAAA,EAAA,OAAAC,EAAmBT,EAAA+E,aAAa,CAAAC,UAAA3E,EAAAsF,MAA4B,CAAC,CAAE,CAAC,CAAA,CAAA,EAKhErE,EAAA,EAAAsE,GAAA,EAAA,EAAA,aAAA,EAAA,EAAiE,EAAAC,GAAA,EAAA,EAAA,aAAA,EAAA,EAInEhG,EAAA,qBAREe,EAAA,QAAAZ,EAAAC,QAAAiF,YAAA,CAAA,EAI6BpF,EAAA,EAAAc,EAAA,UAAAZ,EAAAqF,eAAA,CAAA,EAGhBvF,EAAA,EAAAc,EAAA,OAAAZ,EAAAqF,eAAA,EAAAtE,SAAA,CAAA,sCApLvBpB,EAAA,EAAA,MAAA,EAAA,EAA4G,EAAA,YAAA,EAAA,EAExG2B,EAAA,EAAAwE,GAAA,EAAA,EAAA,eAAA,EAAA,EAkBAzE,EAAA,EAAA,EAAA,EACEC,EAAA,EAAAyE,GAAA,GAAA,EAAA,kBAAA,EAAA,EAAsI,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,MAgBxI3E,EAAA,EAAA,EAAA,EACEC,EAAA,EAAA2E,GAAA,EAAA,EAAA,kBAAA,EAAA,EAAoH,EAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,MAMtH5E,EAAA,EAAA6E,GAAA,EAAA,EAAA,eAAA,EAAA,EAAwD,GAAAC,GAAA,EAAA,EAAA,eAAA,EAAA,EAOc,GAAAC,GAAA,EAAA,EAAA,eAAA,EAAA,EAiBC,GAAAC,GAAA,EAAA,EAAA,eAAA,EAAA,EAsBvEjF,EAAA,GAAA,EAAA,EACEC,EAAA,GAAAiF,GAAA,EAAA,EAAA,kBAAA,EAAA,EAAuH,GAAAC,GAAA,EAAA,EAAA,WAAA,EAAA,MAwCzHlF,EAAA,GAAAmF,GAAA,EAAA,EAAA,iBAAA,EAAA,EAAkF,GAAAC,GAAA,EAAA,EAAA,UAAA,EAAA,EAEpF7G,EAAA,EAEAF,EAAA,GAAA,MAAA,EAAA,EAAqJ,GAAA,OAAA,EAAA,EAEjJC,EAAA,EAAA,EAEFC,EAAA,EACAF,EAAA,GAAA,MAAA,EAAA,EAAqC,GAAA,SAAA,EAAA,EAGjCS,EAAA,QAAA,UAAA,CAAAE,EAAAqG,CAAA,EAAA,IAAA3G,EAAAQ,EAAA,EAAA,OAAAC,EAAST,EAAA+E,aAAa,CAAAC,UAAahF,EAAAC,QAAAiF,YAAA,EAAwB,CAAC,CAAE,CAAC,CAAA,CAAA,EAM/DtF,EAAA,GAAA,YAAA,EACFC,EAAA,EACAyB,EAAA,GAAAsF,GAAA,EAAA,EAAA,eAAA,EAAA,EAAuD,GAAAC,GAAA,EAAA,EAAA,cAAA,KAAA,EAAAnC,CAAA,EAgCvD/E,EAAA,GAAA,SAAA,EAAA,EAEES,EAAA,QAAA,UAAA,CAAAE,EAAAqG,CAAA,EAAA,IAAA3G,EAAAQ,EAAA,EAAA,OAAAC,EAAST,EAAA+E,aAAa,CAAAC,UAAahF,EAAAC,QAAAiF,YAAA,CAAqB,CAAE,CAAC,CAAA,CAAA,EAM3DtF,EAAA,GAAA,QAAA,EACFC,EAAA,EAAS,EACL,EACF,4BAlMkDsF,EAAA,aAAAnF,EAAA8G,gBAAAC,WAAA,CAAA,EAC7CjH,EAAA,EAAAc,EAAA,aAAAZ,EAAAC,QAAA+G,oBAAA,CAAA,EAC4BlH,EAAA,EAAAc,EAAA,OAAA,CAAAZ,EAAA2E,QAAA,EA0CE7E,EAAA,CAAA,EAAAc,EAAA,OAAA,CAAAZ,EAAA2E,QAAA,EAOC7E,EAAA,EAAAc,EAAA,OAAAZ,EAAAiH,WAAAC,UAAA,CAAA,EAiBCpH,EAAA,EAAAc,EAAA,OAAAZ,EAAAiH,WAAAC,UAAA,CAAA,EAiBFpH,EAAA,EAAAc,EAAA,OAAAZ,EAAAiH,WAAAC,UAAA,CAAA,EA8CtBpH,EAAA,CAAA,EAAAc,EAAA,kBAAAZ,EAAAmH,gBAAA,EACarH,EAAA,EAAAc,EAAA,mBAAAZ,EAAAmH,gBAAA,EAK5BrH,EAAA,CAAA,EAAAsH,GAAA,aAAApH,EAAAC,QAAAiF,YAAA,EAAA,GAAAlF,EAAAC,QAAAoH,SAAA,EAAA,EAAA,QAAArH,EAAAC,QAAAiF,YAAA,EAAA,GAAAlF,EAAAC,QAAAoH,SAAA,EAAArH,EAAAC,QAAA+G,oBAAA,EAAAjG,OAAA,OAAAf,EAAAC,QAAAqH,mBAAA,EAAAvG,OAAA,WAAA,EAOEjB,EAAA,CAAA,EAAAc,EAAA,WAAAZ,EAAAC,QAAAiF,YAAA,IAAA,CAAA,EAOapF,EAAA,CAAA,EAAAc,EAAA,OAAA,CAAAZ,EAAA2E,QAAA,EAAiB,WAAA4C,CAAA,EAmC9BzH,EAAA,CAAA,EAAAc,EAAA,WAAAZ,EAAAC,QAAAiF,YAAA,IAAAlF,EAAAC,QAAAuH,WAAA,GAAAxH,EAAAC,QAAAuH,WAAA,IAAA,CAAA,GDrMZ,IAAaC,IAAmB,IAAA,CAA1B,MAAOA,CAAmB,CAC9BxH,QAAUyH,EAAOC,EAAiB,EAClCC,OAASF,EAAOG,EAAS,EACzBZ,WAAaS,EAAOI,EAAiB,EACrChB,gBAAkBY,EAAOK,EAAe,EAExCC,gBAAmC,KACnClH,mBAAiC,CAAA,EACjCqG,iBAA6B,CAAA,EAC7BrF,UAA2B,KAC3BmG,cAAgC,MAChCtD,SAAoB,GACpBuD,SAAoB,GACpBC,uBAEyBC,UAEzBC,UAAQ,CACN,KAAKF,uBAAyB,KAAKlB,WAAWqB,kBAAiB,EAAGC,UAAUC,GAAa,CACvF,KAAK7D,SAAW6D,IAAe,SAC/B,KAAKN,SAAWM,IAAe,SAAWA,IAAe,SACzD,KAAKC,uBAAsB,CAC7B,CAAC,EACD,KAAK3B,gBAAgB4B,WAAU,CACjC,CAEAC,aAAW,CACT,KAAKR,wBAAwBS,YAAW,CAC1C,CAEAH,wBAAsB,CAChB,KAAK9D,SACP,KAAKwC,iBAAmB,CAAC,OAAQ,OAAQ,SAAS,EACzC,KAAKe,SACd,KAAKf,iBAAmB,CAAC,SAAU,OAAQ,OAAQ,WAAY,SAAS,EAExE,KAAKA,iBAAmB,CAAC,SAAU,OAAQ,OAAQ,WAAY,YAAa,aAAc,WAAY,SAAS,CAEnH,CAEAnD,cAAY,CACV,KAAKlC,UAAY,KACjB,KAAKmG,cAAgB,MACrB,KAAKhI,QAAQ4I,eAAe,KAAM,KAAK,EACvC,KAAK5I,QAAQ6I,QAAQ,CAAC,EACtB,KAAK7I,QAAQ8I,eAAe,EAAE,EAC9B,KAAKjI,mBAAqB,CAAA,EAC1B,IAAMkI,EAAcC,SAASC,eAAe,kBAAkB,EAC1DF,IACFA,EAAYrD,MAAQ,IAEtB,KAAK1F,QAAQkJ,cAAa,CAC5B,CAEQC,mBAAmBC,EAAuB,CAEhD,IAAMC,EAAiC,CACrCC,MAFkB,KAAK5E,SAAW,OAAS,KAAKuD,SAAW,OAAS,QAGpEsB,SAAU,QACVC,aAAc,GACdC,YAAa,IAEf,OAAO,KAAK9B,OAAO+B,KAAKC,GAAwBC,IAAA,GAAKP,GAAkBD,EAAQ,CACjF,CAEAS,uBAAqB,CACnB,KAAKV,mBAAmB,CAAEW,KAAM,CAAA,CAAE,CAAE,EAAEC,YAAW,EAAGzB,UAAU0B,GAAS,CACjEA,GAAQ,KAAKhK,QAAQiK,YAAYD,CAAM,CAC7C,CAAC,CACH,CAEA9F,UAAUgG,EAAkB,CAC1B,KAAKnC,gBAAkB6B,EAAA,GAAKM,GAC5B,KAAKf,mBAAmB,CAAEW,KAAM,CAAEI,SAAU,KAAKnC,eAAe,CAAE,CAAE,EAAEgC,YAAW,EAAGzB,UAAU0B,GAAS,CACjGA,GAAQ,KAAKhK,QAAQmK,eAAeH,CAAkB,EAC1D,KAAKjC,gBAAkB,IACzB,CAAC,CACH,CAEAqC,oBAAoBC,EAAY,CAC9B,IAAMC,EAAeD,EAAME,OAC3B,KAAKvK,QAAQ8I,eAAewB,EAAa5E,KAAK,CAChD,CAEAZ,aAAauF,EAAU,CACrB,KAAKrK,QAAQ6I,QAAQwB,EAAMtF,UAAY,CAAC,EACxC,KAAKlE,mBAAqB,CAAA,CAC5B,CAEAe,WAAW4I,EAAeC,EAAyB,CACjD,KAAK5I,UAAY2I,EACjB,KAAKxC,cAAgByC,EACrB,KAAKzK,QAAQ4I,eAAe,KAAK/G,UAAW,KAAKmG,aAAa,CAChE,CAEA9G,eAAegJ,EAAkB,CAC/B,IAAMQ,EAAQ,KAAK7J,mBAAmB8J,UAAUC,GAAKA,EAAExG,KAAO8F,EAAS9F,EAAE,EACrEsG,IAAU,GACZ,KAAK7J,mBAAmBgK,KAAKX,CAAQ,EAErC,KAAKrJ,mBAAmBiK,OAAOJ,EAAO,CAAC,CAE3C,CAEAvJ,WAAW+I,EAAkB,CAC3B,OAAO,KAAKrJ,mBAAmBkK,KAAKH,GAAKA,EAAExG,KAAO8F,EAAS9F,EAAE,CAC/D,CAEA3D,oBAAoBC,EAAgB,CAC9BA,EACF,KAAKG,mBAAqB,CAAC,GAAG,KAAKb,QAAQ+G,oBAAmB,CAAE,EAEhE,KAAKlG,mBAAqB,CAAA,CAE9B,CAEAD,eAAa,CACX,OAAO,KAAKZ,QAAQ+G,oBAAmB,EAAGjG,OAAS,GAC5C,KAAKd,QAAQ+G,oBAAmB,EAAGiE,MAAMd,GAAY,KAAK/I,WAAW+I,CAAQ,CAAC,CACvF,CAEAe,0BAAwB,CACtB,KAAKpK,mBAAmBqK,QAAQhB,GAAY,KAAKlK,QAAQmE,eAAe+F,EAAS9F,EAAE,CAAC,EACpF,KAAKvD,mBAAqB,CAAA,CAC5B,CAEAuE,gBAAc,CACZ,IAAMmC,EAAa,KAAKvH,QAAQuH,WAAU,EACpCtC,EAAc,KAAKjF,QAAQiF,YAAW,EACtCkG,EAAiB,KAAKzG,SAAW,EAAI,KAAKuD,SAAW,EAAI,EAC3DmD,EAAYC,KAAKC,IAAI,EAAGrG,EAAcoG,KAAKE,MAAMJ,EAAiB,CAAC,CAAC,EACpEK,EAAUH,KAAKI,IAAIlE,EAAY6D,EAAYD,EAAiB,CAAC,EAE7DK,EAAUJ,EAAY,EAAID,IAC5BC,EAAYC,KAAKC,IAAI,EAAGE,EAAUL,EAAiB,CAAC,GAGtD,IAAMO,EAAkB,CAAA,EACxB,GAAInE,EAAa,EACf,QAASoE,EAAIP,EAAWO,GAAKH,EAASG,IACpCD,EAAMb,KAAKc,CAAC,EAGhB,OAAOD,CACT,CAEAE,UAAUlB,EAAeR,EAAyB,CAChD,OAAOA,EAAWA,EAAS9F,GAAKyH,MAClC,4CApJWrE,EAAmB,2BAAnBA,EAAmBsE,UAAA,CAAA,CAAA,gBAAA,CAAA,EAAAC,UAAA,SAAAC,EAAAC,EAAA,IAAAD,EAAA,KAenBE,GAAY,CAAA,y1OC3DzBxM,EAAA,EAAA,WAAA,CAAA,EAAkF,EAAA,kBAAA,CAAA,EACoH,EAAA,iBAAA,CAAA,EACxJ,EAAA,KAAA,EAAA,EACyCC,EAAA,EAAA,YAAA,EAAUC,EAAA,EAAK,EAGlGF,EAAA,EAAA,MAAA,EAAA,EAA+C,EAAA,QAAA,EAAA,EAI3CS,EAAA,QAAA,SAAAC,EAAA,CAAA,OAAS6L,EAAA7B,oBAAAhK,CAAA,CAA2B,CAAA,EAHtCR,EAAA,EAQE,EAGJF,EAAA,EAAA,MAAA,EAAA,EAAwB,EAAA,SAAA,EAAA,EAIpBS,EAAA,QAAA,UAAA,CAAA,OAAS8L,EAAAhB,yBAAA,CAA0B,CAAA,EAKnCvL,EAAA,EAAA,UAAA,EAAoCC,EAAA,GAAA,QAAA,EAAMC,EAAA,EAAYD,EAAA,GAAA,UAAA,EACxDC,EAAA,EACAF,EAAA,GAAA,SAAA,EAAA,EAGES,EAAA,QAAA,UAAA,CAAA,OAAS8L,EAAApC,sBAAA,CAAuB,CAAA,EAIhCnK,EAAA,GAAA,UAAA,EAAoCC,EAAA,GAAA,KAAA,EAAGC,EAAA,EAAYD,EAAA,GAAA,gBAAA,EACrDC,EAAA,EAAS,EACL,EAGRF,EAAA,GAAA,mBAAA,EAAA,EACE2B,EAAA,GAAA8K,GAAA,EAAA,EAAA,MAAA,EAAA,EAKC,GAAAC,GAAA,EAAA,EAAA,MAAA,EAAA,EAI0D,GAAAC,GAAA,GAAA,GAAA,MAAA,EAAA,EAwM7DzM,EAAA,EAAmB,SApObC,EAAA,CAAA,EAAAc,EAAA,WAAA,CAAAsL,EAAApL,mBAAAC,MAAA,EAIUjB,EAAA,EAAAmF,EAAA,QAAA,SAAA,EASAnF,EAAA,CAAA,EAAAmF,EAAA,QAAA,SAAA,EAOXnF,EAAA,CAAA,EAAAc,EAAA,OAAAsL,EAAAjM,QAAAC,MAAA,CAAA,EAQGJ,EAAA,EAAAc,EAAA,OAAAsL,EAAAjM,QAAAsM,UAAA,CAAA,EAIAzM,EAAA,EAAAc,EAAA,OAAA,CAAAsL,EAAAjM,QAAAsM,UAAA,CAAA,kBD7BNC,EAAYC,GAAAC,EAAAC,GACZC,GACAC,GAAcC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GAAAC,GACdC,EAAeC,EAAAC,GACfC,EACAC,EACAC,GACAC,EACAC,EACAC,GAAwBC,GACxBC,EAAaC,EAAAC,EAAAC,EAAAC,EACbC,GAAiBC,GACjBC,GAAaC,GAAAC,GAAAC,GACbC,GAAeC,GAAAC,EAAA,EAAAC,cAAA,CAAA,CAAA,SAKNvH,CAAmB,GAAA",
  "names": ["\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "AddCategoriesComponent", "fb", "dialogRef", "data", "categoryForm", "constructor", "group", "name", "Validators", "required", "icon", "imageUrl", "comments", "ngOnInit", "category", "patchValue", "saveCategory", "invalid", "markAllAsTouched", "close", "value", "cancel", "\u0275\u0275directiveInject", "FormBuilder", "MatDialogRef", "MAT_DIALOG_DATA", "selectors", "decls", "vars", "consts", "template", "rf", "ctx", "\u0275\u0275listener", "\u0275\u0275element", "\u0275\u0275template", "AddCategoriesComponent_mat_error_16_Template", "AddCategoriesComponent_mat_error_22_Template", "AddCategoriesComponent_mat_error_28_Template", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "\u0275\u0275property", "tmp_2_0", "get", "hasError", "touched", "tmp_3_0", "tmp_4_0", "CommonModule", "NgIf", "ReactiveFormsModule", "\u0275NgNoValidate", "DefaultValueAccessor", "NgControlStatus", "NgControlStatusGroup", "RequiredValidator", "FormGroupDirective", "FormControlName", "MatButtonModule", "MatButton", "MatIconModule", "MatIcon", "MatFormFieldModule", "MatFormField", "MatLabel", "MatError", "MatInputModule", "MatInput", "MatCardModule", "MatCard", "MatCardContent", "MatCardHeader", "MatCardTitle", "MatDialogModule", "encapsulation", "\u0275\u0275elementStart", "\u0275\u0275text", "\u0275\u0275elementEnd", "\u0275\u0275advance", "\u0275\u0275textInterpolate1", "ctx_r0", "service", "error", "\u0275\u0275element", "\u0275\u0275listener", "$event", "\u0275\u0275restoreView", "_r3", "\u0275\u0275nextContext", "\u0275\u0275resetView", "toggleAllCategories", "checked", "\u0275\u0275property", "isAllSelected", "selectedCategories", "length", "category_r5", "_r4", "$implicit", "toggleCategory", "isSelected", "\u0275\u0275elementContainerStart", "\u0275\u0275template", "CategoriesComponent_div_19_ng_container_2_mat_header_cell_1_Template", "CategoriesComponent_div_19_ng_container_2_mat_cell_2_Template", "nameSortMenu_r7", "CategoriesComponent_div_19_mat_header_cell_4_button_2_Template", "CategoriesComponent_div_19_mat_header_cell_4_button_3_Template", "_r6", "sortColumn", "sortField", "\u0275\u0275textInterpolate", "category_r8", "name", "category_r9", "icon", "category_r10", "imageUrl", "\u0275\u0275sanitizeUrl", "CategoriesComponent_div_19_ng_container_9_mat_cell_2_img_1_Template", "CategoriesComponent_div_19_ng_container_9_mat_header_cell_1_Template", "CategoriesComponent_div_19_ng_container_9_mat_cell_2_Template", "createdAtSortMenu_r12", "CategoriesComponent_div_19_ng_container_10_mat_header_cell_1_button_2_Template", "CategoriesComponent_div_19_ng_container_10_mat_header_cell_1_button_3_Template", "_r11", "\u0275\u0275pipeBind2", "category_r13", "createdAt", "CategoriesComponent_div_19_ng_container_10_mat_header_cell_1_Template", "CategoriesComponent_div_19_ng_container_10_mat_cell_2_Template", "modifiedAtSortMenu_r15", "CategoriesComponent_div_19_ng_container_11_mat_header_cell_1_button_2_Template", "CategoriesComponent_div_19_ng_container_11_mat_header_cell_1_button_3_Template", "_r14", "category_r16", "modifiedAt", "CategoriesComponent_div_19_ng_container_11_mat_header_cell_1_Template", "CategoriesComponent_div_19_ng_container_11_mat_cell_2_Template", "category_r17", "comments", "CategoriesComponent_div_19_ng_container_12_mat_header_cell_1_Template", "CategoriesComponent_div_19_ng_container_12_mat_cell_2_Template", "_r18", "refreshTable", "_r19", "category_r20", "startEdit", "deleteCategory", "id", "_r21", "actionMenu_r22", "CategoriesComponent_div_19_mat_cell_15_ng_container_1_Template", "CategoriesComponent_div_19_mat_cell_15_ng_template_2_Template", "\u0275\u0275templateRefExtractor", "isMobile", "mobileActions_r23", "page_r26", "_r25", "onPageChange", "pageIndex", "\u0275\u0275styleProp", "currentPage", "\u0275\u0275classProp", "CategoriesComponent_div_19_ng_container_24_ng_container_1_button_1_Template", "getPageNumbers", "CategoriesComponent_div_19_ng_container_24_ng_container_1_Template", "CategoriesComponent_div_19_ng_container_24_ng_template_2_Template", "noPages_r27", "page_r29", "_r28", "value", "CategoriesComponent_div_19_ng_template_25_mat_option_1_Template", "CategoriesComponent_div_19_ng_template_25_mat_option_2_Template", "CategoriesComponent_div_19_ng_container_2_Template", "CategoriesComponent_div_19_mat_header_cell_4_Template", "CategoriesComponent_div_19_mat_cell_5_Template", "CategoriesComponent_div_19_mat_header_cell_7_Template", "CategoriesComponent_div_19_mat_cell_8_Template", "CategoriesComponent_div_19_ng_container_9_Template", "CategoriesComponent_div_19_ng_container_10_Template", "CategoriesComponent_div_19_ng_container_11_Template", "CategoriesComponent_div_19_ng_container_12_Template", "CategoriesComponent_div_19_mat_header_cell_14_Template", "CategoriesComponent_div_19_mat_cell_15_Template", "CategoriesComponent_div_19_mat_header_row_16_Template", "CategoriesComponent_div_19_mat_row_17_Template", "_r2", "CategoriesComponent_div_19_ng_container_24_Template", "CategoriesComponent_div_19_ng_template_25_Template", "darkModeService", "isDarkMode", "paginatedCategories", "responsive", "isDesktop", "displayedColumns", "\u0275\u0275textInterpolate3", "pageSize", "filteredCategories", "mobilePagination_r30", "totalPages", "CategoriesComponent", "inject", "CategoriesService", "dialog", "MatDialog", "ResponsiveService", "DarkModeService", "editingCategory", "sortDirection", "isTablet", "breakpointSubscription", "paginator", "ngOnInit", "currentBreakpoint", "subscribe", "breakpoint", "updateDisplayedColumns", "applyTheme", "ngOnDestroy", "unsubscribe", "sortCategories", "setPage", "setSearchQuery", "searchInput", "document", "getElementById", "getCategories", "openCategoryDialog", "config", "defaultConfig", "width", "maxWidth", "disableClose", "hasBackdrop", "open", "AddCategoriesComponent", "__spreadValues", "openAddCategoryDialog", "data", "afterClosed", "result", "addCategory", "category", "updateCategory", "onSearchQueryChange", "event", "inputElement", "target", "field", "direction", "index", "findIndex", "c", "push", "splice", "some", "every", "deleteSelectedCategories", "forEach", "maxPagesToShow", "startPage", "Math", "max", "floor", "endPage", "min", "pages", "i", "trackById", "undefined", "selectors", "viewQuery", "rf", "ctx", "MatPaginator", "CategoriesComponent_div_17_Template", "CategoriesComponent_div_18_Template", "CategoriesComponent_div_19_Template", "isLoading", "CommonModule", "NgForOf", "NgIf", "DatePipe", "FormsModule", "MatTableModule", "MatTable", "MatHeaderCellDef", "MatHeaderRowDef", "MatColumnDef", "MatCellDef", "MatRowDef", "MatHeaderCell", "MatCell", "MatHeaderRow", "MatRow", "MatButtonModule", "MatButton", "MatIconButton", "MatFormFieldModule", "MatInputModule", "MatPaginatorModule", "MatIcon", "MatDialogModule", "MatProgressSpinnerModule", "MatProgressSpinner", "MatCardModule", "MatCard", "MatCardContent", "MatCardHeader", "MatCardTitle", "MatCheckboxModule", "MatCheckbox", "MatMenuModule", "MatMenu", "MatMenuItem", "MatMenuTrigger", "MatSelectModule", "MatSelect", "MatOption", "encapsulation"]
}
